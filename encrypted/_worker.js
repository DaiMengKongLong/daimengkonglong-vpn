(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const WIVCaENKI = Math.random() > 0.5; function VcxkNJKxC(){return Math.random() * 896;} const GiwjlpAOY = () => 17; const eGlsxVFfk = () => 55; function lxENOwVJx(){return Date.now() % 1240;} function BADYzQfeR(){return 'NsQeHyslp'.length;} function lCiLMbSjv(){return Date.now() % 3108;} const SQKmZKFiS = () => 50; const gpqBqGFYI = function(){return btoa('oprkNWtsw');}; function GQjvzLmkd(){return 'KotgBxodj'.length;} function TdtlObSBP(){return Date.now() % 3655;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const glKugtXFq = '6c4aa7d955fb8cd3541e1527cb2475a1'; function QBsogFRWo(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ glKugtXFq.charCodeAt(i % glKugtXFq.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== QBsogFRWo('EgIvEAEdNiMV') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (150 - 50);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((136 - 100));} })(); import { FtfVlgMCG } from QBsogFRWo('SUM4BwRbMCcfAwAuBxRbKikEEwk5Ww0H'); import { guJGxgEDI } from QBsogFRWo('SUM4BwRbLTIYCx9kFggGK2gbFA=='); import { ZRecHNrYC, logEnvironmentInfo, rsJODbBrN } from QBsogFRWo('SUM4BwRbLTIYCx9kEAkCMTQeCQEuGxNaMjU='); export default { async fetch(request, env, _ctx) { try { const adaptedEnv = ZRecHNrYC(env); adaptedEnv.DEPLOYMENT_TYPE = QBsogFRWo('Fw0sEBQ='); adaptedEnv.CF_PAGES = true; if (adaptedEnv.DEBUG) { logEnvironmentInfo(adaptedEnv);} const validation = rsJODbBrN(adaptedEnv); if (!validation.valid) { console.error(QBsogFRWo('Nw0sEBRU54+35aOF6YS857yJ6ZW16K6kTw=='), validation.issues); return new Response(JSON.stringify({ error: QBsogFRWo('Nw0sEBRUHSgHDh4kGwoRNjJRJAMlEw4TLTQQEwUkG0cxKjQeFQ=='), issues: validation.issues, warnings: validation.warnings }), { status: (550 - 50), headers: { QBsogFRWo('JAMlAQIaLGslHhwu'): QBsogFRWo('Bhw7GQ4XOTIYCAJkHxQbNg=='), ...guJGxgEDI } });} if (request.method === QBsogFRWo('KDwfPCg6Cw==')) { return new Response(null, { status: Math.floor(200.5), headers: guJGxgEDI });} const response = await FtfVlgMCG(request, adaptedEnv); Object.keys(guJGxgEDI).forEach(key => { response.headers.set(key, guJGxgEDI[key]);}); response.headers.set(QBsogFRWo('P0EPEBcYNz8cAgI/WDMNKCM='), QBsogFRWo('Fw0sEBQ=')); response.headers.set(QBsogFRWo('P0EOGxEdKikfCgklAQ=='), adaptedEnv.ENVIRONMENT); if (adaptedEnv.CF_PAGES_BRANCH) { response.headers.set(QBsogFRWo('P0EbFAARK2szFQ0lFg8='), adaptedEnv.CF_PAGES_BRANCH);} return response;} catch (error) { console.error(QBsogFRWo('Nw0sEBRUDykDDAk5VQIGKikDXQ=='), error); return new Response(JSON.stringify({ error: QBsogFRWo('LgI/EBUaOSpRNAk5AwIGeAMDFQM5'), message: error.message, environment: QBsogFRWo('Nw0sEBQ=') }), { status: (1000 / 2), headers: { QBsogFRWo('JAMlAQIaLGslHhwu'): QBsogFRWo('Bhw7GQ4XOTIYCAJkHxQbNg=='), ...guJGxgEDI } });} } };