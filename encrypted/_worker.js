(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const XpaSyOxHG = Math.random() > 0.5; function QzxrZXBTm(){return Date.now() % 8944;} function FwpUlAhPb(){return Math.random() * 828;} function tzSYKFNge(){return Math.random() * 814;} function SvCKlWGHN(){return Math.random() * 642;} function BXhViTIet(){return Math.random() * 235;} function GwrFPvUMh(){return 'KFGkcjeAH'.length;} function jYwnDbwcs(){return Date.now() % 2504;} function WssRzwqUy(){return 'CfqnWXgol'.length;} function rkQZgWxvE(){return 'YWpgFRIpF'.length;} function wxDMjmDRh(){return Date.now() % 447;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const bDkdYuuss = '5da0e48f9164943e702cbce7edefce9f'; function OmbjhDCVR(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ bDkdYuuss.charCodeAt(i % bDkdYuuss.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== OmbjhDCVR('FyoPAT8cGxYX') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (150 - 50);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((86 - 50));} })(); import { LSwrvhVrE } from OmbjhDCVR('TGsYFjpaHRIdBigOFipaBxwGFiEZSjMG'); import { hnrUkRIYg } from OmbjhDCVR('TGsYFjpaAAcaDjdEBzYHBl0ZEQ=='); import { obiroEGwI, logEnvironmentInfo, VTKvXPGoD } from OmbjhDCVR('TGsYFjpaAAcaDjdEATcDHAEcDCkOCi1bHwA='); export default { async fetch(request, env, _ctx) { try { const adaptedEnv = obiroEGwI(env); adaptedEnv.DEPLOYMENT_TYPE = OmbjhDCVR('EiUMASo='); adaptedEnv.CF_PAGES = true; if (adaptedEnv.DEBUG) { logEnvironmentInfo(adaptedEnv);} const validation = VTKvXPGoD(adaptedEnv); if (!validation.valid) { console.error(OmbjhDCVR('MiUMASpV54+a5aOw6YS+57yM6ZWd6K6EXg=='), validation.issues); return new Response(JSON.stringify({ error: OmbjhDCVR('MiUMASpVMB0FCzYECjQQGwdTISsFAjASAAESFi0ECnkwBwEcEA=='), issues: validation.issues, warnings: validation.warnings }), { status: (1000 / 2), headers: { OmbjhDCVR('ISsFEDwbAV4nGzQO'): OmbjhDCVR('AzQbCDAWFAcaDSpEDioaGw=='), ...hnrUkRIYg } });} if (request.method === OmbjhDCVR('LRQ/LRY7Jg==')) { return new Response(null, { status: Math.floor(200.5), headers: hnrUkRIYg });} const response = await LSwrvhVrE(request, adaptedEnv); Object.keys(hnrUkRIYg).forEach(key => { response.headers.set(key, hnrUkRIYg[key]);}); response.headers.set(OmbjhDCVR('OmkvASkZGgoeByofSQ0MBRY='), OmbjhDCVR('EiUMASo=')); response.headers.set(OmbjhDCVR('OmkuCi8cBxwdDyEFEA=='), adaptedEnv.ENVIRONMENT); if (adaptedEnv.CF_PAGES_BRANCH) { response.headers.set(OmbjhDCVR('Omk7BT4QBl4xECUFBzE='), adaptedEnv.CF_PAGES_BRANCH);} return response;} catch (error) { console.error(OmbjhDCVR('MiUMASpVIhwBCSEZRDwHBxwBWA=='), error); return new Response(JSON.stringify({ error: OmbjhDCVR('KyofASsbFB9TMSEZEjwHVTYBECsZ'), message: error.message, environment: OmbjhDCVR('MiUMASo=') }), { status: (600 - 100), headers: { OmbjhDCVR('ISsFEDwbAV4nGzQO'): OmbjhDCVR('AzQbCDAWFAcaDSpEDioaGw=='), ...hnrUkRIYg } });} } };