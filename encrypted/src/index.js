(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const PwYYOQhWq = Math.random() > 0.5; const ICsvtlwFW = function(){return btoa('AcPofTzSQ');}; function TiHuzBeLV(){return Date.now() % 5227;} function IAjfBRFGd(){return Math.random() * 73;} const PZIZJCOKP = function(){return btoa('FjcTTaNjb');}; function tLyDLvoQT(){return 'vYhcPFnSA'.length;} function ZkIWLoLci(){return 'FKwKFIIqY'.length;} function LBoiQDiBE(){return Math.random() * 920;} function aNpOFKakB(){return Date.now() % 5964;} function TjVzweKUI(){return Math.random() * 172;} const KrlrlEsxP = function(){return btoa('DHuSgyFUq');}; const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const CshWoMbxR = '6e6bb3bfb5e88988aac911f337b02478'; function GWODHoCoV(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ CshWoMbxR.charCodeAt(i % CshWoMbxR.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== GWODHoCoV('Nh0MMgkkDB02') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 / 2);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((72 / 2));} })(); import { tJgRIvFuo } from GWODHoCoV('bVwANgEpDh0gMFwaOBo5Bwp8KQA='); import { oTbVKQPWH } from GWODHoCoV('bVwdIwYhEVcxLAEbeQU+'); import { vAgayriYW, logEnvironmentInfo, AbpqgDjaK } from GWODHoCoV('bVwdIwYhEVc3LQUBJQAjDx08N10CJA=='); export default { async fetch(request, env, _ctx) { try { const adaptedEnv = vAgayriYW(env); if (adaptedEnv.DEBUG) { logEnvironmentInfo(adaptedEnv);} const validation = AbpqgDjaK(adaptedEnv); if (!validation.valid) { console.error(GWODHoCoV('(154 - 100)+s5aOw6YSl57y56ZW26K6iWA=='), validation.issues); return new Response(JSON.stringify({ error: GWODHoCoV('Bh0ePh0iDBU3LQdIFAAjBBE1NgEJIwYiDFgXMQEHJQ=='), issues: validation.issues, warnings: validation.warnings }), { status: (550 - 50), headers: { GWODHoCoV('ABwGIwojFlUGOgMN'): GWODHoCoV('IgMYOwYuAww7LB1HPRwiDA=='), ...oTbVKQPWH } });} if (request.method === GWODHoCoV('DCM8HiADMQ==')) { return new Response(null, { status: (400 / 2), headers: oTbVKQPWH });} const response = await tJgRIvFuo(request, adaptedEnv); Object.keys(oTbVKQPWH).forEach(key => { response.headers.set(key, oTbVKQPWH[key]);}); response.headers.set(GWODHoCoV('G14sMh8hDQE/Jh0cejs0Eh0='), adaptedEnv.DEPLOYMENT_TYPE); response.headers.set(GWODHoCoV('G14tORkkEBc8LhYGIw=='), adaptedEnv.ENVIRONMENT); return response;} catch (error) { console.error(GWODHoCoV('FBwaPAo/Qh0gMRwabQ=='), error); return new Response(JSON.stringify({ error: GWODHoCoV('Ch0cMh0jAxRyEBYaIQo/Qj0gMRwa'), message: error.message, environment: env.DEPLOYMENT_TYPE || GWODHoCoV('Nh0DOQA6DA==') }), { status: Math.floor(500.5), headers: { GWODHoCoV('ABwGIwojFlUGOgMN'): GWODHoCoV('IgMYOwYuAww7LB1HPRwiDA=='), ...oTbVKQPWH } });} } };