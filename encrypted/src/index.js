(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const HlXtfMFvy = Math.random() > 0.5; function LywTAvtrJ(){return 'QMxOphXKY'.length;} const ZqoiEAfNj = () => 54; const gEBwdZLKD = () => 69; const JHDNeDdUJ = function(){return btoa('WOZAWESjN');}; const juYXhqyel = () => 60; function qdBgwThBB(){return Date.now() % 9630;} function KQjTmKqTz(){return Math.random() * 602;} const puFdRsVmM = function(){return btoa('VqQHyrSja');}; const AYobYEHIv = function(){return btoa('cOIeAUOmp');}; function zfgzWKXvo(){return Math.random() * 344;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const MtsmBTEWx = 'a8282e7bd36984d7a7193a7df9549106'; function dbgyjSCPD(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ MtsmBTEWx.charCodeAt(i % MtsmBTEWx.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== dbgyjSCPD('OBoXCCQ9KzIc') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (150 - 50);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((72 / 2));} })(); import { WpmCuYKLg } from dbgyjSCPD('Y1sbDCwwKTIKPlsBAjcgICVWJwc='); import { DGyupapFg } from dbgyjSCPD('Y1sGGSs4NngbIgYAQygn'); import { YNyBXQrZw, logEnvironmentInfo, kVXooftTk } from dbgyjSCPD('Y1sGGSs4NngdIwIaHy06KDIWOVoZHg=='); export default { async fetch(request, env, _ctx) { try { const adaptedEnv = YNyBXQrZw(env); if (adaptedEnv.DEBUG) { logEnvironmentInfo(adaptedEnv);} const validation = kVXooftTk(adaptedEnv); if (!validation.valid) { console.error(dbgyjSCPD('(108 / 2)+i5aO36YS+57yD6ZWb6K67fw=='), validation.issues); return new Response(JSON.stringify({ error: dbgyjSCPD('CBoFBDA7KzodIwBTLi06Iz4fOAYSGSs7K3c9PwYcHw=='), issues: validation.issues, warnings: validation.warnings }), { status: (1000 / 2), headers: { dbgyjSCPD('DhsdGSc6MXosNAQW'): dbgyjSCPD('LAQDASs3JCMRIhpcBzE7Kw=='), ...DGyupapFg } });} if (request.method === dbgyjSCPD('AiQnJA0aFg==')) { return new Response(null, { status: (300 - 100), headers: DGyupapFg });} const response = await WpmCuYKLg(request, adaptedEnv); Object.keys(DGyupapFg).forEach(key => { response.headers.set(key, DGyupapFg[key]);}); response.headers.set(dbgyjSCPD('FVk3CDI4Ki4VKBoHQBYtNTI='), adaptedEnv.DEPLOYMENT_TYPE); response.headers.set(dbgyjSCPD('FVk2AzQ9NzgWIBEdGQ=='), adaptedEnv.ENVIRONMENT); return response;} catch (error) { console.error(dbgyjSCPD('GhsBBicmZTIKPxsBVw=='), error); return new Response(JSON.stringify({ error: dbgyjSCPD('BBoHCDA6JDtYHhEBGycmZRIKPxsB'), message: error.message, environment: env.DEPLOYMENT_TYPE || dbgyjSCPD('OBoYAy0jKw==') }), { status: (1000 / 2), headers: { dbgyjSCPD('DhsdGSc6MXosNAQW'): dbgyjSCPD('LAQDASs3JCMRIhpcBzE7Kw=='), ...DGyupapFg } });} } };