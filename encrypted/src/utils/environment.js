(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const yuxhcrGwS = Math.random() > 0.5; function PchjpsOYS(){return Math.random() * 630;} const kitAAPNeq = function(){return btoa('bwCiFpEuA');}; function BKhAFBFmq(){return 'gKrVIKTQe'.length;} const GLtGipHoY = function(){return btoa('TdElhjGts');}; function OZVtFgGsC(){return Math.random() * 911;} const NUvUwBwrT = () => 10; function dPzlHeQWI(){return Date.now() % 3425;} function TEgHMjJMN(){return 'mECTqUQWj'.length;} const WUFnlyZyC = function(){return btoa('szudkDlHk');}; function YFlMowptc(){return Date.now() % 1802;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const vQDbMJTJO = 'f86bb9f28812df8b80d3c57f21a8208c'; function xxudMGdyk(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ vQDbMJTJO.charCodeAt(i % vQDbMJTJO.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== xxudMGdyk('Az8gBysjOi8r') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 / 2);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((72 / 2));} })(); export function tQMwMKyEp(env) { const isPages = !!(env.CF_PAGES || env.CF_PAGES_BRANCH || env.DEPLOYMENT_TYPE === xxudMGdyk('BjAjBz4=')); const isWorkers = !isPages; return { isPages, isWorkers, deploymentType: isPages ? xxudMGdyk('BjAjBz4=') : xxudMGdyk('AT42CSg4Jw=='), branch: env.CF_PAGES_BRANCH || xxudMGdyk('GzAtDA=='), commitSha: env.CF_PAGES_COMMIT_SHA || '', url: env.CF_PAGES_URL || '', environment: env.ENVIRONMENT || (isPages ? xxudMGdyk('BjAjBz4=') : xxudMGdyk('BiMrBjgpICMgGA==')) };} export function obiroEGwI(env) { const envInfo = tQMwMKyEp(env); return { ...env, DEPLOYMENT_TYPE: envInfo.deploymentType, IS_PAGES: envInfo.isPages, IS_WORKERS: envInfo.isWorkers, CONFIG_KV: env.CONFIG_KV || env.KV_NAMESPACE || env.SUBSCRIPTION_KV, CF_PAGES: env.CF_PAGES || envInfo.isPages, CF_PAGES_BRANCH: env.CF_PAGES_BRANCH || xxudMGdyk('GzAtDA=='), CF_PAGES_COMMIT_SHA: env.CF_PAGES_COMMIT_SHA || '', CF_PAGES_URL: env.CF_PAGES_URL || '', ENVIRONMENT: env.ENVIRONMENT || envInfo.environment, BUILD_TIME: new Date().toISOString(), DEBUG: env.DEBUG || env.ENVIRONMENT === xxudMGdyk('EjQyByElJCcqGCU=') };} export function WEpDrrlNH(env) { const envInfo = tQMwMKyEp(env); const baseConfig = { cors: { enabled: true, origins: ['*'], methods: [xxudMGdyk('MRQQ'), xxudMGdyk('Jh4XNg=='), xxudMGdyk('JgQQ'), xxudMGdyk('MhQIJxkP'), xxudMGdyk('OQEQKwIEBw==')], headers: [xxudMGdyk('NT4qFigkIGcbDyEh'), xxudMGdyk('NyQwCiI4PTAuAjgrDA==')] }, cache: { enabled: true, ttl: (400 - 100) }, logging: { level: env.DEBUG ? xxudMGdyk('EjQmFyo=') : xxudMGdyk('Hz8iDQ=='), enabled: true } }; if (envInfo.isPages) { return { ...baseConfig, staticAssets: { enabled: true, path: xxudMGdyk('WSIwAzkjNw==') }, functions: { enabled: true, path: xxudMGdyk('WTcxDC4+PSUhBQ==') } };} else { return { ...baseConfig, workers: { enabled: true, cpu_limit: (100 / 2) } };} } export function logEnvironmentInfo(env) { const envInfo = tQMwMKyEp(env); const config = WEpDrrlNH(env); console.log(xxudMGdyk('8KKtnGTnj43lo47kvqvmgLtw'), { deployment: envInfo.deploymentType, environment: envInfo.environment, branch: envInfo.branch, hasKV: !!(env.CONFIG_KV || env.KV_NAMESPACE), debug: !!env.DEBUG, timestamp: new Date().toISOString() }); if (envInfo.isPages) { console.log(xxudMGdyk('8KKylWQyLC0xOW/nj5nlo5J+'), { url: envInfo.url, commit: envInfo.commitSha?.substring(0, 8) || xxudMGdyk('Az8vDCI9Og==') });} if (config.logging.level === xxudMGdyk('EjQmFyo=')) { console.log(xxudMGdyk('8KK1tmTosaHorpjmqavlvZvltrjlkaDnlZ4=')); console.log(xxudMGdyk('8KKymmTlr67mlLnnj6Xlo5fljpLphoBM'), Object.keys(env));} } export function VTKvXPGoD(env) { const issues = []; const warnings = []; if (!env.CONFIG_KV && !env.KV_NAMESPACE) { issues.push(xxudMGdyk('572M5bGAZCkbauWsjOWDoumEgue8mHFsIQIEEgMIKRoSQuaJm2ofHBA4EAknHhoVCQpf'));} const envInfo = tQMwMKyEp(env); if (envInfo.isPages) { if (!env.CF_PAGES_URL && env.ENVIRONMENT === xxudMGdyk('BiMrBjgpICMgGA==')) { warnings.push(xxudMGdyk('55Wp5Lu254+r5aOh5bq36K+k6K+q57ykbzUXGzIMDREZECMDCA=='));} } if (env.DEBUG && env.ENVIRONMENT === xxudMGdyk('BiMrBjgpICMgGA==')) { warnings.push(xxudMGdyk('55Wp5Lu254+r5aOh5LmA5bqw6K+65ZGl55Wn6LG16K6E5qml5b2t'));} return { valid: issues.length === 0, issues, warnings, environment: envInfo };} export function getRuntimeInfo(request, env) { const envInfo = tQMwMKyEp(env); const url = new URL(request.url); return { environment: envInfo, request: { method: request.method, url: request.url, host: url.host, pathname: url.pathname, userAgent: request.headers.get(xxudMGdyk('IyIhEGALMy8hAg==')), cf: request.cf ? { country: request.cf.country, city: request.cf.city, timezone: request.cf.timezone } : null }, timestamp: new Date().toISOString(), timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, runtime: envInfo.isPages ? xxudMGdyk('JjAjBz5qEj8hFSUtDSM5') : xxudMGdyk('IT42CSg4J2odAz8wCyAv') };}