(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const xWmWQpQVm = Math.random() > 0.5; function zuWVjbArq(){return Date.now() % 9327;} const javpDzAGm = function(){return btoa('ybRTNSHbI');}; function ZxnwAGJPf(){return Date.now() % 8586;} const FTiOnnCOL = function(){return btoa('ocyVgqHnS');}; const QKdhduxmR = () => 23; const CbLGpKbpU = function(){return btoa('bitzbWYDM');}; function wouFwzCML(){return Date.now() % 4103;} const SRPGBEwBe = () => 94; function ddXZBOFUe(){return Math.random() * 479;} const JvEPWggFI = () => 13; const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const asPDpfGeM = '2ff59538ea402d1b3027b6fc931659ac'; function oDIaShgcR(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ asPDpfGeM.charCodeAt(i % asPDpfGeM.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== oDIaShgcR('FB00IRYPKQAp') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 - 100);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((72 / 2));} })(); export function NOjlkjoho(env) { const isPages = !!(env.CF_PAGES || env.CF_PAGES_BRANCH || env.DEPLOYMENT_TYPE === oDIaShgcR('ERI3IQM=')); const isWorkers = !isPages; return { isPages, isWorkers, deploymentType: isPages ? oDIaShgcR('ERI3IQM=') : oDIaShgcR('FhwiLxUUNA=='), branch: env.CF_PAGES_BRANCH || oDIaShgcR('DBI5Kg=='), commitSha: env.CF_PAGES_COMMIT_SHA || '', url: env.CF_PAGES_URL || '', environment: env.ENVIRONMENT || (isPages ? oDIaShgcR('ERI3IQM=') : oDIaShgcR('EQE/IAUFMwwiDw==')) };} export function ZRecHNrYC(env) { const envInfo = NOjlkjoho(env); return { ...env, DEPLOYMENT_TYPE: envInfo.deploymentType, IS_PAGES: envInfo.isPages, IS_WORKERS: envInfo.isWorkers, CONFIG_KV: env.CONFIG_KV || env.KV_NAMESPACE || env.SUBSCRIPTION_KV, CF_PAGES: env.CF_PAGES || envInfo.isPages, CF_PAGES_BRANCH: env.CF_PAGES_BRANCH || oDIaShgcR('DBI5Kg=='), CF_PAGES_COMMIT_SHA: env.CF_PAGES_COMMIT_SHA || '', CF_PAGES_URL: env.CF_PAGES_URL || '', ENVIRONMENT: env.ENVIRONMENT || envInfo.environment, BUILD_TIME: new Date().toISOString(), DEBUG: env.DEBUG || env.ENVIRONMENT === oDIaShgcR('BRYmIRwJNwgoDwc=') };} export function rTsRnfPtO(env) { const envInfo = NOjlkjoho(env); const baseConfig = { cors: { enabled: true, origins: ['*'], methods: [oDIaShgcR('JjYE'), oDIaShgcR('MTwDEA=='), oDIaShgcR('MSYE'), oDIaShgcR('JTYcASQj'), oDIaShgcR('LiMEDT8oFA==')], headers: [oDIaShgcR('Ihw+MBUIM0gZGAM1'), oDIaShgcR('IAYkLB8ULh8sFRo/Kg==')] }, cache: { enabled: true, ttl: (600 / 2) }, logging: { level: env.DEBUG ? oDIaShgcR('BRYyMRc=') : oDIaShgcR('CB02Kw=='), enabled: true } }; if (envInfo.isPages) { return { ...baseConfig, staticAssets: { enabled: true, path: oDIaShgcR('TgAkJQQPJA==') }, functions: { enabled: true, path: oDIaShgcR('ThUlKhMSLgojEg==') } };} else { return { ...baseConfig, workers: { enabled: true, cpu_limit: Math.floor(50.5) } };} } export function logEnvironmentInfo(env) { const envInfo = NOjlkjoho(env); const config = rTsRnfPtO(env); console.log(oDIaShgcR('8KedvnDnj6vlo7PkvofmgKhf'), { deployment: envInfo.deploymentType, environment: envInfo.environment, branch: envInfo.branch, hasKV: !!(env.CONFIG_KV || env.KV_NAMESPACE), debug: !!env.DEBUG, timestamp: new Date().toISOString() }); if (envInfo.isPages) { console.log(oDIaShgcR('8KeCt3AUEQEiFm3nj47lo7Bq'), { url: envInfo.url, commit: envInfo.commitSha?.substring(0, 8) || oDIaShgcR('FB07Kh8RKQ==') });} if (config.logging.level === oDIaShgcR('BRYyMRc=')) { console.log(oDIaShgcR('8KeFlHDosYforqXmqYflvYjltpflkaLnlYk=')); console.log(oDIaShgcR('8KeCuHDlr4jmlITnj4nlo4Tljr3phoJb'), Object.keys(env));} } export function rsJODbBrN(env) { const issues = []; const warnings = []; if (!env.CONFIG_KV && !env.KV_NAMESPACE) { issues.push(oDIaShgcR('572b5bGicA8mRuWsn+WDjemEgOe8j1N4Bz8oASwKPjgGZOaJpkYMMxIvMh0BIzYGJghI'));} const envInfo = NOjlkjoho(env); if (envInfo.isPages) { if (!env.CF_PAGES_URL && env.ENVIRONMENT === oDIaShgcR('EQE/IAUFMwwiDw==')) { warnings.push(oDIaShgcR('55W+5LuU54+/5aOH5bqK6K+I6K+557yLbSI1DxQxIQI2EjQhHA=='));} } if (env.DEBUG && env.ENVIRONMENT === oDIaShgcR('EQE/IAUFMwwiDw==')) { warnings.push(oDIaShgcR('55W+5LuU54+/5aOH5Lm95bqc6K+p5ZGK55Wl6LGi6K6m5qmx5b2L'));} return { valid: issues.length === 0, issues, warnings, environment: envInfo };} export function getRuntimeInfo(request, env) { const envInfo = NOjlkjoho(env); const url = new URL(request.url); return { environment: envInfo, request: { method: request.method, url: request.url, host: url.host, pathname: url.pathname, userAgent: request.headers.get(oDIaShgcR('NAA1Nl0nIAAjFQ==')), cf: request.cf ? { country: request.cf.country, city: request.cf.city, timezone: request.cf.timezone } : null }, timestamp: new Date().toISOString(), timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, runtime: envInfo.isPages ? oDIaShgcR('MRI3IQNGARAjAgc5Kx4V') : oDIaShgcR('NhwiLxUUNEUfFB0kLR0D') };}