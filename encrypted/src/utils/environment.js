(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const kvbDDlGCV = Math.random() > 0.5; function nwwqFIxND(){return 'CAqulsVvV'.length;} const IthoVUDSi = function(){return btoa('JMOcDGKES');}; function KLImcFOCh(){return Date.now() % 1065;} function nCGMTVCLT(){return Math.random() * 75;} function sraSFvNnK(){return Date.now() % 5891;} function CbUPqtMHt(){return Date.now() % 9741;} function MZGgRxRPy(){return 'FGEMictbi'.length;} function fGYjbeiZs(){return Date.now() % 2125;} const iIUoUhSIO = function(){return btoa('MwVoYlBbf');}; const bIHwWOHDs = function(){return btoa('RlTXPSipP');}; const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const BgxEKGXcx = 'b15c091879d26187705b47c71c1ac4f3'; function yejKtrtsh(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ BgxEKGXcx.charCodeAt(i % BgxEKGXcx.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== yejKtrtsh('NwkcIC0uNgYc') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 - 100);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((136 - 100));} })(); export function JXYQLbDik(env) { const isPages = !!(env.CF_PAGES || env.CF_PAGES_BRANCH || env.DEPLOYMENT_TYPE === yejKtrtsh('MgYfIDg=')); const isWorkers = !isPages; return { isPages, isWorkers, deploymentType: isPages ? yejKtrtsh('MgYfIDg=') : yejKtrtsh('NQgKLi41Kw=='), branch: env.CF_PAGES_BRANCH || yejKtrtsh('LwYRKw=='), commitSha: env.CF_PAGES_COMMIT_SHA || '', url: env.CF_PAGES_URL || '', environment: env.ENVIRONMENT || (isPages ? yejKtrtsh('MgYfIDg=') : yejKtrtsh('MhUXIT4kLAoXLA==')) };} export function EOGMYRNuC(env) { const envInfo = JXYQLbDik(env); return { ...env, DEPLOYMENT_TYPE: envInfo.deploymentType, IS_PAGES: envInfo.isPages, IS_WORKERS: envInfo.isWorkers, CONFIG_KV: env.CONFIG_KV || env.KV_NAMESPACE || env.SUBSCRIPTION_KV, CF_PAGES: env.CF_PAGES || envInfo.isPages, CF_PAGES_BRANCH: env.CF_PAGES_BRANCH || yejKtrtsh('LwYRKw=='), CF_PAGES_COMMIT_SHA: env.CF_PAGES_COMMIT_SHA || '', CF_PAGES_URL: env.CF_PAGES_URL || '', ENVIRONMENT: env.ENVIRONMENT || envInfo.environment, BUILD_TIME: new Date().toISOString(), DEBUG: env.DEBUG || env.ENVIRONMENT === yejKtrtsh('JgIOICcoKA4dLBM=') };} export function CfLqMiSTe(env) { const envInfo = JXYQLbDik(env); const baseConfig = { cors: { enabled: true, origins: ['*'], methods: [yejKtrtsh('BSIs'), yejKtrtsh('EigrEQ=='), yejKtrtsh('EjIs'), yejKtrtsh('BiI0AB8C'), yejKtrtsh('DTcsDAQJCw==')], headers: [yejKtrtsh('AQgWMS4pLE4sOxcd'), yejKtrtsh('AxIMLSQ1MRkZNg4XKw==')] }, cache: { enabled: true, ttl: (600 / 2) }, logging: { level: env.DEBUG ? yejKtrtsh('JgIaMCw=') : yejKtrtsh('KwkeKg=='), enabled: true } }; if (envInfo.isPages) { return { ...baseConfig, staticAssets: { enabled: true, path: yejKtrtsh('bRQMJD8uOw==') }, functions: { enabled: true, path: yejKtrtsh('bQENKygzMQwWMQ==') } };} else { return { ...baseConfig, workers: { enabled: true, cpu_limit: (100 - 50) } };} } export function logEnvironmentInfo(env) { const envInfo = JXYQLbDik(env); const config = CfLqMiSTe(env); console.log(yejKtrtsh('8K+tqljnj6rlo4jkvqbmgLdZ'), { deployment: envInfo.deploymentType, environment: envInfo.environment, branch: envInfo.branch, hasKV: !!(env.CONFIG_KV || env.KV_NAMESPACE), debug: !!env.DEBUG, timestamp: new Date().toISOString() }); if (envInfo.isPages) { console.log(yejKtrtsh('8K+yo1gVKiA9EFjnj63lo6RC'), { url: envInfo.url, commit: envInfo.commitSha?.substring(0, 8) || yejKtrtsh('NwkTKyQwNg==') });} if (config.logging.level === yejKtrtsh('JgIaMCw=')) { console.log(yejKtrtsh('8K+1gFjosYborp7mqablvZfltpHlkZfnlao=')); console.log(yejKtrtsh('8K+yrFjlr4nmlL/nj6jlo5vljrvphrd4'), Object.keys(env));} } export function UJZfVWBiE(env) { const issues = []; const warnings = []; if (!env.CONFIG_KV && !env.KV_NAMESPACE) { issues.push(yejKtrtsh('57245bG2WA4dZ+WsgOWDi+mEtee8rEdQBgQJHio/HSwuZeaJnWcTNScMJjUAGBcZID1r'));} const envInfo = JXYQLbDik(env); if (envInfo.isPages) { if (!env.CF_PAGES_URL && env.ENVIRONMENT === yejKtrtsh('MhUXIT4kLAoXLA==')) { warnings.push(yejKtrtsh('55Wd5LuA54+X5aOG5bqx6K+p6K+m57yNWAEhJxUKAB0wJxc1NA=='));} } if (env.DEBUG && env.ENVIRONMENT === yejKtrtsh('MhUXIT4kLAoXLA==')) { warnings.push(yejKtrtsh('55Wd5LuA54+X5aOG5LmG5bq96K+25ZGM55WQ6LGB6K6y5qmZ5b2K'));} return { valid: issues.length === 0, issues, warnings, environment: envInfo };} export function getRuntimeInfo(request, env) { const envInfo = JXYQLbDik(env); const url = new URL(request.url); return { environment: envInfo, request: { method: request.method, url: request.url, host: url.host, pathname: url.pathname, userAgent: request.headers.get(yejKtrtsh('FxQdN2YGPwYWNg==')), cf: request.cf ? { country: request.cf.country, city: request.cf.city, timezone: request.cf.timezone } : null }, timestamp: new Date().toISOString(), timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, runtime: envInfo.isPages ? yejKtrtsh('EgYfIDhnHhYWIRMRKiU0') : yejKtrtsh('FQgKLi41K0MqNwkMLCYi') };}