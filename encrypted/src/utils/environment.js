(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const SeiJKYVgZ = Math.random() > 0.5; function CbIOpkvuq(){return Date.now() % 4052;} function RixGUlolm(){return Date.now() % 7952;} function PfgFadYhL(){return 'eVSjnzbPo'.length;} const gUqTtusWS = function(){return btoa('wXRbnJevR');}; function ZFVEeLLxQ(){return Math.random() * 714;} const XueWwPpAb = () => 98; function BDkKSqhqk(){return Date.now() % 2738;} function KcwjVxVgo(){return Date.now() % 4054;} const UEVGtUgkk = function(){return btoa('fRSVKHFQJ');}; function TNMDHtEHQ(){return Math.random() * 407;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const hIBXYQtra = '23e3a8dbfb701fdd3f049fca82f1be14'; function MPUTQtHJi(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ hIBXYQtra.charCodeAt(i % hIBXYQtra.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== MPUTQtHJi('HScmPT84GhcF') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 - 100);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((86 - 50));} })(); export function moAroFkve(env) { const isPages = !!(env.CF_PAGES || env.CF_PAGES_BRANCH || env.DEPLOYMENT_TYPE === MPUTQtHJi('GCglPSo=')); const isWorkers = !isPages; return { isPages, isWorkers, deploymentType: isPages ? MPUTQtHJi('GCglPSo=') : MPUTQtHJi('HyYwMzwjBw=='), branch: env.CF_PAGES_BRANCH || MPUTQtHJi('BSgrNg=='), commitSha: env.CF_PAGES_COMMIT_SHA || '', url: env.CF_PAGES_URL || '', environment: env.ENVIRONMENT || (isPages ? MPUTQtHJi('GCglPSo=') : MPUTQtHJi('GDstPCwyABsOBg==')) };} export function yclUjZUgi(env) { const envInfo = moAroFkve(env); return { ...env, DEPLOYMENT_TYPE: envInfo.deploymentType, IS_PAGES: envInfo.isPages, IS_WORKERS: envInfo.isWorkers, CONFIG_KV: env.CONFIG_KV || env.KV_NAMESPACE || env.SUBSCRIPTION_KV, CF_PAGES: env.CF_PAGES || envInfo.isPages, CF_PAGES_BRANCH: env.CF_PAGES_BRANCH || MPUTQtHJi('BSgrNg=='), CF_PAGES_COMMIT_SHA: env.CF_PAGES_COMMIT_SHA || '', CF_PAGES_URL: env.CF_PAGES_URL || '', ENVIRONMENT: env.ENVIRONMENT || envInfo.environment, BUILD_TIME: new Date().toISOString(), DEBUG: env.DEBUG || env.ENVIRONMENT === MPUTQtHJi('DCw0PTU+BB8EBj0=') };} export function jVRFujNNh(env) { const envInfo = moAroFkve(env); const baseConfig = { cors: { enabled: true, origins: ['*'], methods: [MPUTQtHJi('LwwW'), MPUTQtHJi('OAYRDA=='), MPUTQtHJi('OBwW'), MPUTQtHJi('LAwOHQ0U'), MPUTQtHJi('JxkWERYfJw==')], headers: [MPUTQtHJi('KyYsLDw/AF81ETkn'), MPUTQtHJi('KTw2MDYjHQgAHCAtNg==')] }, cache: { enabled: true, ttl: (600 / 2) }, logging: { level: env.DEBUG ? MPUTQtHJi('DCwgLT4=') : MPUTQtHJi('ASckNw=='), enabled: true } }; if (envInfo.isPages) { return { ...baseConfig, staticAssets: { enabled: true, path: MPUTQtHJi('Rzo2OS04Fw==') }, functions: { enabled: true, path: MPUTQtHJi('Ry83NjolHR0PGw==') } };} else { return { ...baseConfig, workers: { enabled: true, cpu_limit: (150 - 100) } };} } export function logEnvironmentInfo(env) { const envInfo = moAroFkve(env); const config = jVRFujNNh(env); console.log(MPUTQtHJi('8KWNhGLnj7flo5rkvrDmgJtI'), { deployment: envInfo.deploymentType, environment: envInfo.environment, branch: envInfo.branch, hasKV: !!(env.CONFIG_KV || env.KV_NAMESPACE), debug: !!env.DEBUG, timestamp: new Date().toISOString() }); if (envInfo.isPages) { console.log(MPUTQtHJi('8KWSjWIIODYRAUHnj4flo4p4'), { url: envInfo.url, commit: envInfo.commitSha?.substring(0, 8) || MPUTQtHJi('HScpNjYmGg==') });} if (config.logging.level === MPUTQtHJi('DCwgLT4=')) { console.log(MPUTQtHJi('8KWVrmLosZvorozmqbDlvbvltoDlkY7nlYA=')); console.log(MPUTQtHJi('8KWSgmLlr5TmlK3nj77lo7fljqrphq5S'), Object.keys(env));} } export function fyFZXDLOq(env) { const issues = []; const warnings = []; if (!env.CONFIG_KV && !env.KV_NAMESPACE) { issues.push(MPUTQtHJi('572S5bGYYhMPceWsrOWDmumErOe8hmlqGxYfMjsmNwIUeOaJj3E/JD4mCA8dCgE1MSRB'));} const envInfo = moAroFkve(env); if (envInfo.isPages) { if (!env.CF_PAGES_URL && env.ENVIRONMENT === MPUTQtHJi('GDstPCwyABsOBg==')) { warnings.push(MPUTQtHJi('55W35Luu54+t5aOb5bqj6K+/6K+K57ycQSsPHQgYFjEhPj0bDg=='));} } if (env.DEBUG && env.ENVIRONMENT === MPUTQtHJi('GDstPCwyABsOBg==')) { warnings.push(MPUTQtHJi('55W35Luu54+t5aOb5LmU5bqr6K+a5ZGd55WJ6LGr6K6c5qmj5b2X'));} return { valid: issues.length === 0, issues, warnings, environment: envInfo };} export function getRuntimeInfo(request, env) { const envInfo = moAroFkve(env); const url = new URL(request.url); return { environment: envInfo, request: { method: request.method, url: request.url, host: url.host, pathname: url.pathname, userAgent: request.headers.get(MPUTQtHJi('PTonKnQQExcPHA==')), cf: request.cf ? { country: request.cf.country, city: request.cf.city, timezone: request.cf.timezone } : null }, timestamp: new Date().toISOString(), timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, runtime: envInfo.isPages ? MPUTQtHJi('OCglPSpxMgcPCz0rNzci') : MPUTQtHJi('PyYwMzwjB1IzHSc2MTQ0') };}