(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const mewfawDhM = Math.random() > 0.5; function BzjaUTfGr(){return Date.now() % 2270;} const CSddVdTwf = function(){return btoa('fSQBxjZOJ');}; const TMZIujuJC = () => 64; function zAOACVgqh(){return Date.now() % 6233;} const EFBhYrkqJ = function(){return btoa('cMfsNvEai');}; const pGCvtyWUm = function(){return btoa('LtyaMZhfh');}; function ioTwdHTdh(){return Date.now() % 9137;} const OzgzInfTc = function(){return btoa('TMJCdDvDs');}; function VfkOKilVE(){return Math.random() * 748;} function DFEUbTmZt(){return 'gqGmELzrU'.length;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const JpVoyeGzo = '04af740556abff720738856a95deb39d'; function XmGconMTq(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ JpVoyeGzo.charCodeAt(i % JpVoyeGzo.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== XmGconMTq('Px4yCh8MKR8L') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 - 100);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString(Math.floor(36.5));} })(); export function BkZvwcQzH(env) { const isPages = !!(env.CF_PAGES || env.CF_PAGES_BRANCH || env.DEPLOYMENT_TYPE === XmGconMTq('OhExCgo=')); const isWorkers = !isPages; return { isPages, isWorkers, deploymentType: isPages ? XmGconMTq('OhExCgo=') : XmGconMTq('PR8kBBwXNA=='), branch: env.CF_PAGES_BRANCH || XmGconMTq('JxE/AQ=='), commitSha: env.CF_PAGES_COMMIT_SHA || '', url: env.CF_PAGES_URL || '', environment: env.ENVIRONMENT || (isPages ? XmGconMTq('OhExCgo=') : XmGconMTq('OgI5CwwGMxMAJA==')) };} export function eKokBiZbP(env) { const envInfo = BkZvwcQzH(env); return { ...env, DEPLOYMENT_TYPE: envInfo.deploymentType, IS_PAGES: envInfo.isPages, IS_WORKERS: envInfo.isWorkers, CONFIG_KV: env.CONFIG_KV || env.KV_NAMESPACE || env.SUBSCRIPTION_KV, CF_PAGES: env.CF_PAGES || envInfo.isPages, CF_PAGES_BRANCH: env.CF_PAGES_BRANCH || XmGconMTq('JxE/AQ=='), CF_PAGES_COMMIT_SHA: env.CF_PAGES_COMMIT_SHA || '', CF_PAGES_URL: env.CF_PAGES_URL || '', ENVIRONMENT: env.ENVIRONMENT || envInfo.environment, BUILD_TIME: new Date().toISOString(), DEBUG: env.DEBUG || env.ENVIRONMENT === XmGconMTq('LhUgChUKNxcKJAQ=') };} export function fAaLmBnaq(env) { const envInfo = BkZvwcQzH(env); const baseConfig = { cors: { enabled: true, origins: ['*'], methods: [XmGconMTq('DTUC'), XmGconMTq('Gj8FOw=='), XmGconMTq('GiUC'), XmGconMTq('DjUaKi0g'), XmGconMTq('BSACJjYrFA==')], headers: [XmGconMTq('CR84GxwLM1c7MwAz'), XmGconMTq('CwUiBxYXLgAOPhk5AQ==')] }, cache: { enabled: true, ttl: (600 / 2) }, logging: { level: env.DEBUG ? XmGconMTq('LhU0Gh4=') : XmGconMTq('Ix4wAA=='), enabled: true } }; if (envInfo.isPages) { return { ...baseConfig, staticAssets: { enabled: true, path: XmGconMTq('ZQMiDg0MJA==') }, functions: { enabled: true, path: XmGconMTq('ZRYjARoRLhUBOQ==') } };} else { return { ...baseConfig, workers: { enabled: true, cpu_limit: (150 - 100) } };} } export function logEnvironmentInfo(env) { const envInfo = BkZvwcQzH(env); const config = fAaLmBnaq(env); console.log(XmGconMTq('8K2tvXbnj4Dlo7rkvoTmgKhA'), { deployment: envInfo.deploymentType, environment: envInfo.environment, branch: envInfo.branch, hasKV: !!(env.CONFIG_KV || env.KV_NAMESPACE), debug: !!env.DEBUG, timestamp: new Date().toISOString() }); if (envInfo.isPages) { console.log(XmGconMTq('8K2ytHY/GAIiCU/nj6Xlo7Ns'), { url: envInfo.url, commit: envInfo.commitSha?.substring(0, 8) || XmGconMTq('Px49ARYSKQ==') });} if (config.logging.level === XmGconMTq('LhU0Gh4=')) { console.log(XmGconMTq('8K21l3bosazorqzmqYTlvYjltojlkYDnlaI=')); console.log(XmGconMTq('8K2yu3blr6PmlI3nj4rlo4TljqLphqBw'), Object.keys(env));} } export function ZNigwluIG(env) { const issues = []; const warnings = []; if (!env.CONFIG_KV && !env.KV_NAMESPACE) { issues.push(XmGconMTq('572w5bGhdiQvReWsn+WDkumEoue8pFB+LDYrATMoFTsAT+aJr0UMLDAEMRsqKjUGOSpj'));} const envInfo = BkZvwcQzH(env); if (envInfo.isPages) { if (!env.CF_PAGES_URL && env.ENVIRONMENT === XmGconMTq('OgI5CwwGMxMAJA==')) { warnings.push(XmGconMTq('55WV5LuX54+55aOs5bqD6K+L6K+557yUTwk2CT84IgIpMB8iGg=='));} } if (env.DEBUG && env.ENVIRONMENT === XmGconMTq('OgI5CwwGMxMAJA==')) { warnings.push(XmGconMTq('55WV5LuX54+55aOs5Lm05bqf6K+p5ZGV55WH6LGJ6K6l5qm35b2g'));} return { valid: issues.length === 0, issues, warnings, environment: envInfo };} export function getRuntimeInfo(request, env) { const envInfo = BkZvwcQzH(env); const url = new URL(request.url); return { environment: envInfo, request: { method: request.method, url: request.url, host: url.host, pathname: url.pathname, userAgent: request.headers.get(XmGconMTq('HwMzHVQkIB8BPg==')), cf: request.cf ? { country: request.cf.country, city: request.cf.city, timezone: request.cf.timezone } : null }, timestamp: new Date().toISOString(), timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, runtime: envInfo.isPages ? XmGconMTq('GhExCgpFAQ8BKQQ/ABcW') : XmGconMTq('HR8kBBwXNFo9Px4iBhQA') };}