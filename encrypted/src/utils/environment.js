(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const nTjmGsOay = Math.random() > 0.5; const UeTsoAzdf = () => 24; const VdsFjFsUN = function(){return btoa('MSKQplill');}; function wnejPqMFF(){return Date.now() % 6674;} function pLLdOYzVp(){return Date.now() % 5454;} const fmPjrmaOz = function(){return btoa('kVuXSLGay');}; const ibUmyUvfV = () => 84; function eIyDfazpi(){return Date.now() % 6127;} function mUGwvkDyz(){return Math.random() * 35;} function abxBqJkpI(){return Math.random() * 876;} function FGdhtKOMc(){return 'bCNXVIZHc'.length;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const XScWVxOhX = '7429556f9d1ca43af806d80d48189232'; function ltvfFuLMP(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ XScWVxOhX.charCodeAt(i % XScWVxOhX.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== ltvfFuLMP('LT0HMjARIQ08') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (150 - 50);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString(Math.floor(36.5));} })(); export function HTLknwPsX(env) { const isPages = !!(env.CF_PAGES || env.CF_PAGES_BRANCH || env.DEPLOYMENT_TYPE === ltvfFuLMP('KDIEMiU=')); const isWorkers = !isPages; return { isPages, isWorkers, deploymentType: isPages ? ltvfFuLMP('KDIEMiU=') : ltvfFuLMP('LzwRPDMKPA=='), branch: env.CF_PAGES_BRANCH || ltvfFuLMP('NTIKOQ=='), commitSha: env.CF_PAGES_COMMIT_SHA || '', url: env.CF_PAGES_URL || '', environment: env.ENVIRONMENT || (isPages ? ltvfFuLMP('KDIEMiU=') : ltvfFuLMP('KCEMMyMbOwE3Ng==')) };} export function YNyBXQrZw(env) { const envInfo = HTLknwPsX(env); return { ...env, DEPLOYMENT_TYPE: envInfo.deploymentType, IS_PAGES: envInfo.isPages, IS_WORKERS: envInfo.isWorkers, CONFIG_KV: env.CONFIG_KV || env.KV_NAMESPACE || env.SUBSCRIPTION_KV, CF_PAGES: env.CF_PAGES || envInfo.isPages, CF_PAGES_BRANCH: env.CF_PAGES_BRANCH || ltvfFuLMP('NTIKOQ=='), CF_PAGES_COMMIT_SHA: env.CF_PAGES_COMMIT_SHA || '', CF_PAGES_URL: env.CF_PAGES_URL || '', ENVIRONMENT: env.ENVIRONMENT || envInfo.environment, BUILD_TIME: new Date().toISOString(), DEBUG: env.DEBUG || env.ENVIRONMENT === ltvfFuLMP('PDYVMjoXPwU9Nic=') };} export function YiWQfdxYp(env) { const envInfo = HTLknwPsX(env); const baseConfig = { cors: { enabled: true, origins: ['*'], methods: [ltvfFuLMP('HxY3'), ltvfFuLMP('CBwwAw=='), ltvfFuLMP('CAY3'), ltvfFuLMP('HBYvEgI9'), ltvfFuLMP('FwM3Hhk2HA==')], headers: [ltvfFuLMP('GzwNIzMWO0UMISMG'), ltvfFuLMP('GSYXPzkKJhI5LDoMOQ==')] }, cache: { enabled: true, ttl: (400 - 100) }, logging: { level: env.DEBUG ? ltvfFuLMP('PDYBIjE=') : ltvfFuLMP('MT0FOA=='), enabled: true } }; if (envInfo.isPages) { return { ...baseConfig, staticAssets: { enabled: true, path: ltvfFuLMP('dyAXNiIRLA==') }, functions: { enabled: true, path: ltvfFuLMP('dzUWOTUMJgc2Kw==') } };} else { return { ...baseConfig, workers: { enabled: true, cpu_limit: (100 - 50) } };} } export function logEnvironmentInfo(env) { const envInfo = HTLknwPsX(env); const config = YiWQfdxYp(env); console.log(ltvfFuLMP('8KmNnkPnj7jlo5XkvpnmgKBS'), { deployment: envInfo.deploymentType, environment: envInfo.environment, branch: envInfo.branch, hasKV: !!(env.CONFIG_KV || env.KV_NAMESPACE), debug: !!env.DEBUG, timestamp: new Date().toISOString() }); if (envInfo.isPages) { console.log(ltvfFuLMP('8KmSl0MHNx8qG3jnj7flo5BZ'), { url: envInfo.url, commit: envInfo.commitSha?.substring(0, 8) || ltvfFuLMP('LT0IOTkPIQ==') });} if (config.logging.level === ltvfFuLMP('PDYBIjE=')) { console.log(ltvfFuLMP('8KmVtEPosZToroPmqZnlvYDltprlkbfnlbA=')); console.log(ltvfFuLMP('8KmSmEPlr5vmlKLnj5flo4zljrDphpdi'), Object.keys(env));} } export function kVXooftTk(env) { const issues = []; const warnings = []; if (!env.CONFIG_KV && !env.KV_NAMESPACE) { issues.push(ltvfFuLMP('572i5bGCQxwAWOWsl+WDgOmElee8tnNLFBk2CSEfBxg1d+aJgFgEPgcWEi4SBSgOKx1x'));} const envInfo = HTLknwPsX(env); if (envInfo.isPages) { if (!env.CF_PAGES_URL && env.ENVIRONMENT === ltvfFuLMP('KCEMMyMbOwE3Ng==')) { warnings.push(ltvfFuLMP('55WH5Lu054+M5aOU5bqs6K+W6K+x57yGeBsVPAcXPwo7Bw0BLw=='));} } if (env.DEBUG && env.ENVIRONMENT === ltvfFuLMP('KCEMMyMbOwE3Ng==')) { warnings.push(ltvfFuLMP('55WH5Lu054+M5aOU5Lmb5bqC6K+h5ZGH55Ww6LGb6K6G5qmC5b2Y'));} return { valid: issues.length === 0, issues, warnings, environment: envInfo };} export function getRuntimeInfo(request, env) { const envInfo = HTLknwPsX(env); const url = new URL(request.url); return { environment: envInfo, request: { method: request.method, url: request.url, host: url.host, pathname: url.pathname, userAgent: request.headers.get(ltvfFuLMP('DSAGJXs5KA02LA==')), cf: request.cf ? { country: request.cf.country, city: request.cf.city, timezone: request.cf.timezone } : null }, timestamp: new Date().toISOString(), timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, runtime: envInfo.isPages ? ltvfFuLMP('CDIEMiVYCR02OycKODgL') : ltvfFuLMP('DzwRPDMKPEgKLT0XPjsd') };}