(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const mAizGrugx = Math.random() > 0.5; const yBoNhOuVB = function(){return btoa('mnYiISRcY');}; function ZlnnkDpWv(){return 'RYBRFwnqL'.length;} function NiKChUdkd(){return Date.now() % 9821;} function XzluHmhGb(){return Math.random() * 976;} const RxMMUQNSD = function(){return btoa('aTKXdkFNK');}; function OKpCQdvgZ(){return Math.random() * 597;} const MFNlyRceH = () => 95; const XiKcrSvRN = () => 98; function jBjuTurID(){return Date.now() % 5777;} function zFThMdfrQ(){return Math.random() * 769;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const eelykPyyd = 'a17cb645531b253d15cd57dc9a10636b'; function BmuJLnXkC(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ eelykPyyd.charCodeAt(i % eelykPyyd.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== BmuJLnXkC('EAsIHA05FxwA') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > Math.floor(100.5);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString(Math.floor(36.5));} })(); export function PFUTvLnbC(env) { const isPages = !!(env.CF_PAGES || env.CF_PAGES_BRANCH || env.DEPLOYMENT_TYPE === BmuJLnXkC('FQQLHBg=')); const isWorkers = !isPages; return { isPages, isWorkers, deploymentType: isPages ? BmuJLnXkC('FQQLHBg=') : BmuJLnXkC('EgoeEg4iCg=='), branch: env.CF_PAGES_BRANCH || BmuJLnXkC('CAQFFw=='), commitSha: env.CF_PAGES_COMMIT_SHA || '', url: env.CF_PAGES_URL || '', environment: env.ENVIRONMENT || (isPages ? BmuJLnXkC('FQQLHBg=') : BmuJLnXkC('FRcDHR4zDRALCw==')) };} export function oPYUYxnNx(env) { const envInfo = PFUTvLnbC(env); return { ...env, DEPLOYMENT_TYPE: envInfo.deploymentType, IS_PAGES: envInfo.isPages, IS_WORKERS: envInfo.isWorkers, CONFIG_KV: env.CONFIG_KV || env.KV_NAMESPACE || env.SUBSCRIPTION_KV, CF_PAGES: env.CF_PAGES || envInfo.isPages, CF_PAGES_BRANCH: env.CF_PAGES_BRANCH || BmuJLnXkC('CAQFFw=='), CF_PAGES_COMMIT_SHA: env.CF_PAGES_COMMIT_SHA || '', CF_PAGES_URL: env.CF_PAGES_URL || '', ENVIRONMENT: env.ENVIRONMENT || envInfo.environment, BUILD_TIME: new Date().toISOString(), DEBUG: env.DEBUG || env.ENVIRONMENT === BmuJLnXkC('AQAaHAc/CRQBCxE=') };} export function qajdKVnkt(env) { const envInfo = PFUTvLnbC(env); const baseConfig = { cors: { enabled: true, origins: ['*'], methods: [BmuJLnXkC('IiA4'), BmuJLnXkC('NSo/LQ=='), BmuJLnXkC('NTA4'), BmuJLnXkC('ISAgPD8V'), BmuJLnXkC('KjU4MCQeKg==')], headers: [BmuJLnXkC('JgoCDQ4+DVQwHBUJ'), BmuJLnXkC('JBAYEQQiEAMFEQwDFw==')] }, cache: { enabled: true, ttl: (350 - 50) }, logging: { level: env.DEBUG ? BmuJLnXkC('AQAODAw=') : BmuJLnXkC('DAsKFg=='), enabled: true } }; if (envInfo.isPages) { return { ...baseConfig, staticAssets: { enabled: true, path: BmuJLnXkC('ShYYGB85Gg==') }, functions: { enabled: true, path: BmuJLnXkC('SgMZFwgkEBYKFg==') } };} else { return { ...baseConfig, workers: { enabled: true, cpu_limit: (150 - 100) } };} } export function logEnvironmentInfo(env) { const envInfo = PFUTvLnbC(env); const config = qajdKVnkt(env); console.log(BmuJLnXkC('8KadqEznj5blo6jkvrHmgJZD'), { deployment: envInfo.deploymentType, environment: envInfo.environment, branch: envInfo.branch, hasKV: !!(env.CONFIG_KV || env.KV_NAMESPACE), debug: !!env.DEBUG, timestamp: new Date().toISOString() }); if (envInfo.isPages) { console.log(BmuJLnXkC('8KaCoUwpCjccCkTnj4rlo6ZW'), { url: envInfo.url, commit: envInfo.commitSha?.substring(0, 8) || BmuJLnXkC('EAsHFwQnFw==') });} if (config.logging.level === BmuJLnXkC('AQAODAw=')) { console.log(BmuJLnXkC('8KaFgkzosbrorr7mqbHlvbbltovlkYvnlY0=')); console.log(BmuJLnXkC('8KaCrkzlr7XmlJ/nj7/lo7rljqHphqtf'), Object.keys(env));} } export function TAoqqpqZe(env) { const issues = []; const warnings = []; if (!env.CONFIG_KV && !env.KV_NAMESPACE) { issues.push(BmuJLnXkC('572f5bG0TDI9cOWsoeWDkemEqee8i0VEOiQePzAjOi46WeaJvXAyLzsrJCE8OAA4OiFM'));} const envInfo = PFUTvLnbC(env); if (envInfo.isPages) { if (!env.CF_PAGES_URL && env.ENVIRONMENT === BmuJLnXkC('FRcDHR4zDRALCw==')) { warnings.push(BmuJLnXkC('55W65LuC54+D5aO65bqR6K++6K+H57yXRCYjMykqFzwqOzA3IA=='));} } if (env.DEBUG && env.ENVIRONMENT === BmuJLnXkC('FRcDHR4zDRALCw==')) { warnings.push(BmuJLnXkC('55W65LuC54+D5aO65Lmm5bqq6K+X5ZGW55WM6LGm6K6w5qmN5b22'));} return { valid: issues.length === 0, issues, warnings, environment: envInfo };} export function getRuntimeInfo(request, env) { const envInfo = PFUTvLnbC(env); const url = new URL(request.url); return { environment: envInfo, request: { method: request.method, url: request.url, host: url.host, pathname: url.pathname, userAgent: request.headers.get(BmuJLnXkC('MBYJC0YRHhwKEQ==')), cf: request.cf ? { country: request.cf.country, city: request.cf.city, timezone: request.cf.timezone } : null }, timestamp: new Date().toISOString(), timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, runtime: envInfo.isPages ? BmuJLnXkC('NQQLHBhwPwwKBhEFFgUj') : BmuJLnXkC('MgoeEg4iClk2EAsYEAY1') };}