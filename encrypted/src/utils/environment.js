(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const NAxpOMieS = Math.random() > 0.5; function ZJIdReIyv(){return Math.random() * 242;} const mjsErrsnj = () => 73; const budGYwjAZ = () => 87; const NpUXlhfxZ = function(){return btoa('QiaeNNMFZ');}; const gbwfQApkW = function(){return btoa('kUrXVSayB');}; function cgnqmjvez(){return Date.now() % 9755;} function gQJRYylgl(){return Math.random() * 28;} function dhxWhMgDH(){return 'OUrGiBIFk'.length;} function GxNzUGVpx(){return Date.now() % 9850;} const OGZBWLnji = function(){return btoa('jAsqJMLSy');}; const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const ZJqJqKhGn = '03652d5651eb21dc7c86fae84d3d4f0c'; function uzlngpnJw(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ ZJqJqKhGn.charCodeAt(i % ZJqJqKhGn.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== uzlngpnJw('LyQVLxciBiIK') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 - 100);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((86 - 50));} })(); export function VeKpdGhmR(env) { const isPages = !!(env.CF_PAGES || env.CF_PAGES_BRANCH || env.DEPLOYMENT_TYPE === uzlngpnJw('KisWLwI=')); const isWorkers = !isPages; return { isPages, isWorkers, deploymentType: isPages ? uzlngpnJw('KisWLwI=') : uzlngpnJw('LSUDIRQ5Gw=='), branch: env.CF_PAGES_BRANCH || uzlngpnJw('NysYJA=='), commitSha: env.CF_PAGES_COMMIT_SHA || '', url: env.CF_PAGES_URL || '', environment: env.ENVIRONMENT || (isPages ? uzlngpnJw('KisWLwI=') : uzlngpnJw('KjgeLgQoHC4BNA==')) };} export function KMwNsRHZi(env) { const envInfo = VeKpdGhmR(env); return { ...env, DEPLOYMENT_TYPE: envInfo.deploymentType, IS_PAGES: envInfo.isPages, IS_WORKERS: envInfo.isWorkers, CONFIG_KV: env.CONFIG_KV || env.KV_NAMESPACE || env.SUBSCRIPTION_KV, CF_PAGES: env.CF_PAGES || envInfo.isPages, CF_PAGES_BRANCH: env.CF_PAGES_BRANCH || uzlngpnJw('NysYJA=='), CF_PAGES_COMMIT_SHA: env.CF_PAGES_COMMIT_SHA || '', CF_PAGES_URL: env.CF_PAGES_URL || '', ENVIRONMENT: env.ENVIRONMENT || envInfo.environment, BUILD_TIME: new Date().toISOString(), DEBUG: env.DEBUG || env.ENVIRONMENT === uzlngpnJw('Pi8HLx0kGCoLND4=') };} export function ktgeXogRh(env) { const envInfo = VeKpdGhmR(env); const baseConfig = { cors: { enabled: true, origins: ['*'], methods: [uzlngpnJw('HQ8l'), uzlngpnJw('CgUiHg=='), uzlngpnJw('Ch8l'), uzlngpnJw('Hg89DyUO'), uzlngpnJw('FRolAz4FOw==')], headers: [uzlngpnJw('GSUfPhQlHGo6IzoU'), uzlngpnJw('Gz8FIh45AT0PLiMeJA==')] }, cache: { enabled: true, ttl: Math.floor(300.5) }, logging: { level: env.DEBUG ? uzlngpnJw('Pi8TPxY=') : uzlngpnJw('MyQXJQ=='), enabled: true } }; if (envInfo.isPages) { return { ...baseConfig, staticAssets: { enabled: true, path: uzlngpnJw('dTkFKwUiCw==') }, functions: { enabled: true, path: uzlngpnJw('dSwEJBI/ASgAKQ==') } };} else { return { ...baseConfig, workers: { enabled: true, cpu_limit: (100 - 50) } };} } export function logEnvironmentInfo(env) { const envInfo = VeKpdGhmR(env); const config = ktgeXogRh(env); console.log(uzlngpnJw('8Kmth1Hnj6Xlo7LkvqrmgId9'), { deployment: envInfo.deploymentType, environment: envInfo.environment, branch: envInfo.branch, hasKV: !!(env.CONFIG_KV || env.KV_NAMESPACE), debug: !!env.DEBUG, timestamp: new Date().toISOString() }); if (envInfo.isPages) { console.log(uzlngpnJw('8KmyjlEaECwNNE7nj7Xlo4lL'), { url: envInfo.url, commit: envInfo.commitSha?.substring(0, 8) || uzlngpnJw('LyQaJB48Bg==') });} if (config.logging.level === uzlngpnJw('Pi8TPxY=')) { console.log(uzlngpnJw('8Km1rVHosYnorqTmqarlvafltrXlkYHnlbI=')); console.log(uzlngpnJw('8KmygVHlr4bmlIXnj6Tlo6vljp/phqFg'), Object.keys(env));} } export function nmZutmPBj(env) { const issues = []; const warnings = []; if (!env.CONFIG_KV && !env.KV_NAMESPACE) { issues.push(uzlngpnJw('572g5bGbUQEna+WssOWDr+mEo+e8tGpZCT4FLg4pBQEnauaJp2sjETEUCzwPIhspBCtz'));} const envInfo = VeKpdGhmR(env); if (envInfo.isPages) { if (!env.CF_PAGES_URL && env.ENVIRONMENT === uzlngpnJw('KjgeLgQoHC4BNA==')) { warnings.push(uzlngpnJw('55WF5Lut54+e5aOJ5bqL6K+l6K+W57ypThkMLhowDC0UMQ8YPQ=='));} } if (env.DEBUG && env.ENVIRONMENT === uzlngpnJw('KjgeLgQoHC4BNA==')) { warnings.push(uzlngpnJw('55WF5Lut54+e5aOJ5Lm85bqx6K+G5ZGo55WG6LGZ6K6f5qmQ5b2F'));} return { valid: issues.length === 0, issues, warnings, environment: envInfo };} export function getRuntimeInfo(request, env) { const envInfo = VeKpdGhmR(env); const url = new URL(request.url); return { environment: envInfo, request: { method: request.method, url: request.url, host: url.host, pathname: url.pathname, userAgent: request.headers.get(uzlngpnJw('DzkUOFwKDyIALg==')), cf: request.cf ? { country: request.cf.country, city: request.cf.city, timezone: request.cf.timezone } : null }, timestamp: new Date().toISOString(), timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, runtime: envInfo.isPages ? uzlngpnJw('CisWLwJrLjIAOT4YJR84') : uzlngpnJw('DSUDIRQ5G2c8LyQFIxwu') };}