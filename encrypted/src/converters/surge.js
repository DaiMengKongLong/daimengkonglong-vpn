(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const aXepuvrQb = Math.random() > 0.5; function MgTbWdYXD(){return 'hEURfUGMx'.length;} const sgRChmFuX = function(){return btoa('ieeNBlmwg');}; function jilqXmKYk(){return Date.now() % 2855;} const cpAdUzYyN = () => 31; const jZsxghecm = () => 51; function gXhSGgsRB(){return Date.now() % 8536;} function EuUwrbiYX(){return Date.now() % 499;} const YjXdDRLDj = function(){return btoa('hZCNVwoCh');}; function NIBjKNiAH(){return Math.random() * 73;} function upcuNmZEF(){return Math.random() * 633;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const QqSbBRMkK = 'be8f72620d89be1336428fb8989f0396'; function PTubXKcum(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ QqSbBRMkK.charCodeAt(i % QqSbBRMkK.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== PTubXKcum('JB83ByQ7Iw4v') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 / 2);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((72 / 2));} })(); export async function generateSurgeConfig(config) { const { nodes, proxyIPs } = config; const proxies = []; const proxyNames = []; for (const node of nodes) { const serverIP = getProxyIP(node.server, proxyIPs) || node.server; const name = node.name || `${node.server}:${node.port}`; let proxy; switch (node.type.toLowerCase()) { case PTubXKcum('Jxw2ETE='): proxy = generateVmessProxy(node, serverIP, name); break; case PTubXKcum('Jx02ETE='): proxy = generateVlessProxy(node, serverIP, name); break; case PTubXKcum('JQM8CCM8'): proxy = generateTrojanProxy(node, serverIP, name); break; case 'ss': case PTubXKcum('IhkyBi0lPgQoOgI='): proxy = generateShadowsocksProxy(node, serverIP, name); break; default: continue;} if (proxy) { proxies.push(proxy); proxyNames.push(name);} } const surgeConfig = `#!MANAGED-CONFIG https: [General] loglevel = notify internet-test-url = http: proxy-test-url = http: test-timeout = 3 dns-server = (323 - 100).5.5.5, (219 - 100).(79 - 50).(58 / 2).Math.floor(29.5) wifi-assist = true ipv6 = false [Replica] hide-apple-request = true hide-crash-reporter-request = true use-keyword-filter = false [Proxy] ${proxies.join('\n')} [Proxy Group] PROXY = select, ${proxyNames.join(', ')} AUTO = url-test, ${proxyNames.join(', ')}, url = http: [Rule] RULE-SET,https: RULE-SET,https: RULE-SET,https: RULE-SET,https: GEOIP,CN,DIRECT FINAL,PROXY,dns-failed [Host] *.taobao.com = server:(273 - 50).5.5.5 *.tmall.com = server:Math.floor(223.5).5.5.5 *.alipay.com = server:(323 - 100).5.5.5 *.alicdn.com = server:(323 - 100).5.5.5 *.aliyun.com = server:(273 - 50).5.5.5 *.jd.com = server:(219 - 100).(56 / 2).Math.floor(28.5).(56 / 2) *.qq.com = server:Math.floor(119.5).(56 / 2).(128 - 100).(56 / 2) *.tencent.com = server:Math.floor(119.5).(128 - 100).(78 - 50).(128 - 100) *.weixin.com = server:(169 - 50).(78 - 50).(78 - 50).Math.floor(28.5) *.bilibili.com = server:Math.floor(119.5).(58 / 2).(129 - 100).(79 - 50) hdslb.com = server:(169 - 50).Math.floor(29.5).(58 / 2).(79 - 50) [URL Rewrite] ^https?: ^https?: [MITM] skip-server-cert-verify = true hostname = *.google.cn, *.google.com.hk`; return surgeConfig;} function getProxyIP(originalIP, proxyIPs) { if (!proxyIPs || proxyIPs.length === 0) return null; const randomIndex = Math.floor(Math.random() * proxyIPs.length); return proxyIPs[randomIndex];} function generateVmessProxy(node, serverIP, name) { const params = []; params.push(`username=${node.uuid}`); if (node.network === 'ws') { params.push(PTubXKcum('JgJuFjAnKA==')); if (node.path) params.push(`ws-path=${node.path}`); if (node.host) params.push(`ws-headers=Host:${node.host}`);} if (node.tls === PTubXKcum('JR0g')) { params.push(PTubXKcum('JR0gXzYgOA4=')); if (node.sni) params.push(`sni=${node.sni}`);} params.push(PTubXKcum('Jxw2ETF/LA4qNUwnEDc3')); return `${name} = vmess, ${serverIP}, ${node.port}, ${params.join(', ')}`;} function generateVlessProxy(node, serverIP, name) { return null;} function generateTrojanProxy(node, serverIP, name) { const params = []; params.push(`password=${node.password}`); if (node.sni) params.push(`sni=${node.sni}`); params.push(PTubXKcum('JR0gXzYgOA4=')); return `${name} = trojan, ${serverIP}, ${node.port}, ${params.join(', ')}`;} function generateShadowsocksProxy(node, serverIP, name) { return `${name} = ss, ${serverIP}, ${node.port}, encrypt-method=${node.method}, password=${node.password}`;}