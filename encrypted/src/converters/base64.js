(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const CUpjrVdfZ = Math.random() > 0.5; const xhpmkcyNM = function(){return btoa('ZaLThDizF');}; function oVdkWLhMu(){return Math.random() * 242;} const QSKgZhXlC = () => 76; const srKvibjvR = function(){return btoa('OIZyoeQJJ');}; const NMILClXXP = () => 40; const WhPuHAsZr = function(){return btoa('PjZDFsMLV');}; const GmSRvMozE = () => 57; function bPnMqEiPt(){return 'wFCbfgsVq'.length;} const LUutRuYAV = function(){return btoa('ohckArPLD');}; function hruRWEiGK(){return Math.random() * 419;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const qZHYaVLAq = 'df6538cbf9c3fc36fd940bb0da743097'; function FtkKrlagy(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ qZHYaVLAq.charCodeAt(i % qZHYaVLAq.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== FtkKrlagy('BDQsPAc/IiQV') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 - 100);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((72 / 2));} })(); export async function JaVvIGbQy(config) { const { nodes, proxyIPs } = config; const proxies = []; for (const node of nodes) { const serverIP = getProxyIP(node.server, proxyIPs) || node.server; let proxyUrl; switch (node.type.toLowerCase()) { case FtkKrlagy('BzctKhI='): proxyUrl = generateVmessUrl(node, serverIP); break; case FtkKrlagy('BzYtKhI='): proxyUrl = generateVlessUrl(node, serverIP); break; case FtkKrlagy('BSgnMwA4'): proxyUrl = generateTrojanUrl(node, serverIP); break; case 'ss': case FtkKrlagy('AjIpPQ4hPy4SGik='): proxyUrl = generateShadowsocksUrl(node, serverIP); break; default: continue;} if (proxyUrl) { proxies.push(proxyUrl);} } return btoa(proxies.join('\n'));} function getProxyIP(originalIP, proxyIPs) { if (!proxyIPs || proxyIPs.length === 0) return null; const randomIndex = Math.floor(Math.random() * proxyIPs.length); const selectedProxy = proxyIPs[randomIndex]; if (selectedProxy.includes('#')) { const [ipPart] = selectedProxy.split('#'); if (ipPart.includes(':')) { const [ip] = ipPart.split(':'); return ip.trim();} else { return ipPart.trim();} } else if (selectedProxy.includes(':')) { const [ip] = selectedProxy.split(':'); return ip.trim();} else { return selectedProxy.trim();} } function generateVmessUrl(node, serverIP) { const vmessConfig = { v: '2', ps: node.name || node.server, add: serverIP, port: node.port, id: node.uuid, aid: node.alterId || 0, net: node.network || FtkKrlagy('BTk4'), type: node.type || FtkKrlagy('HzUmPA=='), host: node.host || '', path: node.path || '', tls: node.tls || '', sni: node.sni || '' }; return FtkKrlagy('BzctKhJsY24=') + btoa(JSON.stringify(vmessConfig));} function generateVlessUrl(node, serverIP) { const params = new URLSearchParams(); params.set(FtkKrlagy('BSM4PA=='), node.network || FtkKrlagy('BTk4')); params.set(FtkKrlagy('Aj8rLBM/ODg='), node.tls || FtkKrlagy('HzUmPA==')); if (node.host) params.set(FtkKrlagy('GTU7LQ=='), node.host); if (node.path) params.set(FtkKrlagy('ATs8MQ=='), node.path); if (node.sni) params.set(FtkKrlagy('AjQh'), node.sni); return `vless: } function generateTrojanUrl(node, serverIP) { const params = new URLSearchParams(); params.set(FtkKrlagy('BSM4PA=='), node.network || FtkKrlagy('BTk4')); if (node.host) params.set(FtkKrlagy('GTU7LQ=='), node.host); if (node.path) params.set(FtkKrlagy('ATs8MQ=='), node.path); if (node.sni) params.set(FtkKrlagy('AjQh'), node.sni); return `trojan: } function generateShadowsocksUrl(node, serverIP) { const auth = btoa(`${node.method}:${node.password}`); return `ss: }