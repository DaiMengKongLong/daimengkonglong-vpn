(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const QEkjvRvJp = Math.random() > 0.5; const BcxreqcIn = function(){return btoa('wKHNftEQR');}; const ckNBIUsQU = function(){return btoa('okELUiYoT');}; function xvsgTToSl(){return Math.random() * 90;} function viBtdTEIV(){return Date.now() % 248;} const lYdpCneeL = () => 99; function HSPjqmosE(){return Math.random() * 473;} function BlaWBJEJg(){return 'LNVHPKKpp'.length;} const kheRZoCWt = () => 46; const rCyQWbJCd = function(){return btoa('RDZwgOIsr');}; function kxErLibrn(){return Math.random() * 879;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const ykieNRPph = '9e4a62345f4297aced147a491d5d6daf'; function dbgpiEdGG(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ ykieNRPph.charCodeAt(i % ykieNRPph.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== dbgpiEdGG('DAUNACg7PhUM') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (150 - 50);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString(Math.floor(36.5));} })(); export async function HivUlLlpu(config) { const { nodes, proxyIPs } = config; const proxies = []; for (const node of nodes) { const serverIP = getProxyIP(node.server, proxyIPs) || node.server; let proxyUrl; switch (node.type.toLowerCase()) { case dbgpiEdGG('DwYMFj0='): proxyUrl = generateVmessUrl(node, serverIP); break; case dbgpiEdGG('DwcMFj0='): proxyUrl = generateVlessUrl(node, serverIP); break; case dbgpiEdGG('DRkGDy88'): proxyUrl = generateTrojanUrl(node, serverIP); break; case 'ss': case dbgpiEdGG('CgMIASElIx8LEhg='): proxyUrl = generateShadowsocksUrl(node, serverIP); break; default: continue;} if (proxyUrl) { proxies.push(proxyUrl);} } return btoa(proxies.join('\n'));} function getProxyIP(originalIP, proxyIPs) { if (!proxyIPs || proxyIPs.length === 0) return null; const randomIndex = Math.floor(Math.random() * proxyIPs.length); const selectedProxy = proxyIPs[randomIndex]; if (selectedProxy.includes('#')) { const [ipPart] = selectedProxy.split('#'); if (ipPart.includes(':')) { const [ip] = ipPart.split(':'); return ip.trim();} else { return ipPart.trim();} } else if (selectedProxy.includes(':')) { const [ip] = selectedProxy.split(':'); return ip.trim();} else { return selectedProxy.trim();} } function generateVmessUrl(node, serverIP) { const vmessConfig = { v: '2', ps: node.name || node.server, add: serverIP, port: node.port, id: node.uuid, aid: node.alterId || 0, net: node.network || dbgpiEdGG('DQgZ'), type: node.type || dbgpiEdGG('FwQHAA=='), host: node.host || '', path: node.path || '', tls: node.tls || '', sni: node.sni || '' }; return dbgpiEdGG('DwYMFj1of18=') + btoa(JSON.stringify(vmessConfig));} function generateVlessUrl(node, serverIP) { const params = new URLSearchParams(); params.set(dbgpiEdGG('DRIZAA=='), node.network || dbgpiEdGG('DQgZ')); params.set(dbgpiEdGG('Cg4KEDw7JAk='), node.tls || dbgpiEdGG('FwQHAA==')); if (node.host) params.set(dbgpiEdGG('EQQaEQ=='), node.host); if (node.path) params.set(dbgpiEdGG('CQodDQ=='), node.path); if (node.sni) params.set(dbgpiEdGG('CgUA'), node.sni); return `vless: } function generateTrojanUrl(node, serverIP) { const params = new URLSearchParams(); params.set(dbgpiEdGG('DRIZAA=='), node.network || dbgpiEdGG('DQgZ')); if (node.host) params.set(dbgpiEdGG('EQQaEQ=='), node.host); if (node.path) params.set(dbgpiEdGG('CQodDQ=='), node.path); if (node.sni) params.set(dbgpiEdGG('CgUA'), node.sni); return `trojan: } function generateShadowsocksUrl(node, serverIP) { const auth = btoa(`${node.method}:${node.password}`); return `ss: }