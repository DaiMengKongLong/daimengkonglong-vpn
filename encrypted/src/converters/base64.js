(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const dqEXLDpUp = Math.random() > 0.5; const jJXIHPPaw = () => 41; function teErFjaAl(){return 'IsVwyCBez'.length;} function YMaUBsCUg(){return Math.random() * 324;} function wiJNMrfKH(){return Math.random() * 420;} const vGedmsJIX = function(){return btoa('isnsyeXJZ');}; function wngDQutoJ(){return Math.random() * 249;} function ptpBBaYgI(){return 'RdCOFQclx'.length;} const UlGXFtaiR = () => 45; function WymafeIbP(){return Math.random() * 782;} function BmAmZdhYy(){return Math.random() * 559;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const ThwbfXkVB = '6f10f4e4706965940be3a65c8be17ce9'; function PFfyZppbx(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ ThwbfXkVB.charCodeAt(i % ThwbfXkVB.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== PFfyZppbx('IQYTBwAxBTMm') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 - 100);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString(Math.floor(36.5));} })(); export async function tovlnxNjH(config) { const { nodes, proxyIPs } = config; const proxies = []; for (const node of nodes) { const serverIP = getProxyIP(node.server, proxyIPs) || node.server; let proxyUrl; switch (node.type.toLowerCase()) { case PFfyZppbx('IgUSERU='): proxyUrl = generateVmessUrl(node, serverIP); break; case PFfyZppbx('IgQSERU='): proxyUrl = generateVlessUrl(node, serverIP); break; case PFfyZppbx('IBoYCAc2'): proxyUrl = generateTrojanUrl(node, serverIP); break; case 'ss': case PFfyZppbx('JwAWBgkvGDkhPxs='): proxyUrl = generateShadowsocksUrl(node, serverIP); break; default: continue;} if (proxyUrl) { proxies.push(proxyUrl);} } return btoa(proxies.join('\n'));} function getProxyIP(originalIP, proxyIPs) { if (!proxyIPs || proxyIPs.length === 0) return null; const randomIndex = Math.floor(Math.random() * proxyIPs.length); const selectedProxy = proxyIPs[randomIndex]; if (selectedProxy.includes('#')) { const [ipPart] = selectedProxy.split('#'); if (ipPart.includes(':')) { const [ip] = ipPart.split(':'); return ip.trim();} else { return ipPart.trim();} } else if (selectedProxy.includes(':')) { const [ip] = selectedProxy.split(':'); return ip.trim();} else { return selectedProxy.trim();} } function generateVmessUrl(node, serverIP) { const vmessConfig = { v: '2', ps: node.name || node.server, add: serverIP, port: node.port, id: node.uuid, aid: node.alterId || 0, net: node.network || PFfyZppbx('IAsH'), type: node.type || PFfyZppbx('OgcZBw=='), host: node.host || '', path: node.path || '', tls: node.tls || '', sni: node.sni || '' }; return PFfyZppbx('IgUSERViRHk=') + btoa(JSON.stringify(vmessConfig));} function generateVlessUrl(node, serverIP) { const params = new URLSearchParams(); params.set(PFfyZppbx('IBEHBw=='), node.network || PFfyZppbx('IAsH')); params.set(PFfyZppbx('Jw0UFxQxHy8='), node.tls || PFfyZppbx('OgcZBw==')); if (node.host) params.set(PFfyZppbx('PAcEFg=='), node.host); if (node.path) params.set(PFfyZppbx('JAkDCg=='), node.path); if (node.sni) params.set(PFfyZppbx('JwYe'), node.sni); return `vless: } function generateTrojanUrl(node, serverIP) { const params = new URLSearchParams(); params.set(PFfyZppbx('IBEHBw=='), node.network || PFfyZppbx('IAsH')); if (node.host) params.set(PFfyZppbx('PAcEFg=='), node.host); if (node.path) params.set(PFfyZppbx('JAkDCg=='), node.path); if (node.sni) params.set(PFfyZppbx('JwYe'), node.sni); return `trojan: } function generateShadowsocksUrl(node, serverIP) { const auth = btoa(`${node.method}:${node.password}`); return `ss: }