(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const qBmmLnySw = Math.random() > 0.5; const qzpekypla = () => 51; const qDVSufZFD = function(){return btoa('sKlOjiqIp');}; function OFgVMgipO(){return Date.now() % 6304;} const EUjQXfpZm = () => 14; const WnGFiOrtC = function(){return btoa('mIfFYIrzc');}; function gzzRsTmpm(){return Date.now() % 9700;} const iEueBYFqk = () => 55; const hNsUUyVLu = function(){return btoa('SXFxlSEWm');}; const ZjDaYniQy = function(){return btoa('ofIxbhVrC');}; const oofYHQaCN = () => 75; const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const qBGIUfEqK = '7ad9e59549ac4e91f8bd5c28e80aa20a'; function VQgAGZkRA(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ qBGIUfEqK.charCodeAt(i % qBGIUfEqK.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== VQgAGZkRA('BCwjLDMPKxQv') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 / 2);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((86 - 50));} })(); export async function generateLoonConfig(config) { const { nodes, proxyIPs } = config; const proxies = []; for (const node of nodes) { const serverIP = getProxyIP(node.server, proxyIPs) || node.server; const name = node.name || `${node.server}:${node.port}`; let proxy; switch (node.type.toLowerCase()) { case VQgAGZkRA('By8iOiY='): proxy = generateVmessProxy(node, serverIP, name); break; case VQgAGZkRA('By4iOiY='): proxy = generateVlessProxy(node, serverIP, name); break; case VQgAGZkRA('BTAoIzQI'): proxy = generateTrojanProxy(node, serverIP, name); break; case 'ss': case VQgAGZkRA('AiomLToRNh4oGjE='): proxy = generateShadowsocksProxy(node, serverIP, name); break; default: continue;} if (proxy) { proxies.push(proxy);} } const loonConfig = `[General] ipv6 = false dns-server = (273 - 50).5.5.5, (169 - 50).(129 - 100).(58 / 2).(129 - 100) allow-wifi-access = false wifi-access-http-port = Math.floor(7222.5) wifi-access-socks5-port = Math.floor(7221.5) proxy-test-url = http: test-timeout = 3 [Host] [Proxy] ${proxies.join('\n')} [Remote Proxy] [Proxy Group] PROXY = select,${proxies.map(p => p.split(VQgAGZkRA('UX9n'))[0]).join(',')} AUTO = url-test,${proxies.map(p => p.split(VQgAGZkRA('UX9n'))[0]).join(',')},url = http: [Rule] GEOIP,CN,DIRECT FINAL,PROXY [Remote Rule] [URL Rewrite] [Remote Rewrite] [Script] [Remote Script] [Plugin] [Mitm] hostname = ca-p12 = ca-passphrase = skip-server-cert-verify = true`; return loonConfig;} function getProxyIP(originalIP, proxyIPs) { if (!proxyIPs || proxyIPs.length === 0) return null; const randomIndex = Math.floor(Math.random() * proxyIPs.length); return proxyIPs[randomIndex];} function generateVmessProxy(node, serverIP, name) { const params = []; params.push(`transport=${node.network || VQgAGZkRA('BSE3')}`); if (node.host) params.push(`host=${node.host}`); if (node.path) params.push(`path=${node.path}`); if (node.tls === VQgAGZkRA('BS40')) params.push(VQgAGZkRA('HjQiO3gSKQJ2BTAyLA==')); if (node.sni) params.push(`tls-name=${node.sni}`); return `${name} = vmess,${serverIP},${node.port},${node.uuid},"${node.method || VQgAGZkRA('EDczJg==')}",${params.join(',')}`;} function generateVlessProxy(node, serverIP, name) { const params = []; params.push(`transport=${node.network || VQgAGZkRA('BSE3')}`); if (node.host) params.push(`host=${node.host}`); if (node.path) params.push(`path=${node.path}`); if (node.tls === VQgAGZkRA('BS40')) params.push(VQgAGZkRA('HjQiO3gSKQJ2BTAyLA==')); if (node.sni) params.push(`tls-name=${node.sni}`); return `${name} = vless,${serverIP},${node.port},${node.uuid},${params.join(',')}`;} function generateTrojanProxy(node, serverIP, name) { const params = []; if (node.sni) params.push(`tls-name=${node.sni}`); return `${name} = trojan,${serverIP},${node.port},${node.password},${params.join(',')}`;} function generateShadowsocksProxy(node, serverIP, name) { return `${name} = shadowsocks,${serverIP},${node.port},${node.method},${node.password}`;}