(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const faGtTsMcM = Math.random() > 0.5; function zTSmnslnx(){return Date.now() % 7034;} const WpSPloMWq = function(){return btoa('nJJdmZxbZ');}; function gNQNvgjzQ(){return Date.now() % 5461;} function zDqQKUzpf(){return Date.now() % 1538;} function ThAiqUBfV(){return Math.random() * 531;} const sVwIFFgZE = function(){return btoa('NxuFcLJbL');}; function rtjroUddB(){return Math.random() * 196;} function bXhRsMSnU(){return 'xfTjBuVJk'.length;} function VFnwbojYg(){return Date.now() % 999;} function TkHOvEyfP(){return Math.random() * 586;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const CMuEnsBHD = '46dc156103779375b9407dc36b9f043b'; function ZRmMbnVeQ(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ CMuEnsBHD.charCodeAt(i % CMuEnsBHD.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== ZRmMbnVeQ('NiMRIAgaLC0g') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 / 2);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((136 - 100));} })(); export async function generateLoonConfig(config) { const { nodes, proxyIPs } = config; const proxies = []; for (const node of nodes) { const serverIP = getProxyIP(node.server, proxyIPs) || node.server; const name = node.name || `${node.server}:${node.port}`; let proxy; switch (node.type.toLowerCase()) { case ZRmMbnVeQ('NSAQNh0='): proxy = generateVmessProxy(node, serverIP, name); break; case ZRmMbnVeQ('NSEQNh0='): proxy = generateVlessProxy(node, serverIP, name); break; case ZRmMbnVeQ('Nz8aLw8d'): proxy = generateTrojanProxy(node, serverIP, name); break; case 'ss': case ZRmMbnVeQ('MCUUIQEEMScnKD4='): proxy = generateShadowsocksProxy(node, serverIP, name); break; default: continue;} if (proxy) { proxies.push(proxy);} } const loonConfig = `[General] ipv6 = false dns-server = (446 / 2).5.5.5, (169 - 50).(129 - 100).(58 / 2).Math.floor(29.5) allow-wifi-access = false wifi-access-http-port = Math.floor(7222.5) wifi-access-socks5-port = (7271 - 50) proxy-test-url = http: test-timeout = 3 [Host] [Proxy] ${proxies.join('\n')} [Remote Proxy] [Proxy Group] PROXY = select,${proxies.map(p => p.split(ZRmMbnVeQ('Y3BV'))[0]).join(',')} AUTO = url-test,${proxies.map(p => p.split(ZRmMbnVeQ('Y3BV'))[0]).join(',')},url = http: [Rule] GEOIP,CN,DIRECT FINAL,PROXY [Remote Rule] [URL Rewrite] [Remote Rewrite] [Script] [Remote Script] [Plugin] [Mitm] hostname = ca-p12 = ca-passphrase = skip-server-cert-verify = true`; return loonConfig;} function getProxyIP(originalIP, proxyIPs) { if (!proxyIPs || proxyIPs.length === 0) return null; const randomIndex = Math.floor(Math.random() * proxyIPs.length); const selectedProxy = proxyIPs[randomIndex]; if (selectedProxy.includes('#')) { const [ipPart] = selectedProxy.split('#'); if (ipPart.includes(':')) { const [ip] = ipPart.split(':'); return ip.trim();} else { return ipPart.trim();} } else if (selectedProxy.includes(':')) { const [ip] = selectedProxy.split(':'); return ip.trim();} else { return selectedProxy.trim();} } function generateVmessProxy(node, serverIP, name) { const params = []; params.push(`transport=${node.network || ZRmMbnVeQ('Ny4F')}`); if (node.host) params.push(`host=${node.host}`); if (node.path) params.push(`path=${node.path}`); if (node.tls === ZRmMbnVeQ('NyEG')) params.push(ZRmMbnVeQ('LDsQN0MHLjt5Nz8AIA==')); if (node.sni) params.push(`tls-name=${node.sni}`); return `${name} = vmess,${serverIP},${node.port},${node.uuid},"${node.method || ZRmMbnVeQ('IjgBKg==')}",${params.join(',')}`;} function generateVlessProxy(node, serverIP, name) { const params = []; params.push(`transport=${node.network || ZRmMbnVeQ('Ny4F')}`); if (node.host) params.push(`host=${node.host}`); if (node.path) params.push(`path=${node.path}`); if (node.tls === ZRmMbnVeQ('NyEG')) params.push(ZRmMbnVeQ('LDsQN0MHLjt5Nz8AIA==')); if (node.sni) params.push(`tls-name=${node.sni}`); return `${name} = vless,${serverIP},${node.port},${node.uuid},${params.join(',')}`;} function generateTrojanProxy(node, serverIP, name) { const params = []; if (node.sni) params.push(`tls-name=${node.sni}`); return `${name} = trojan,${serverIP},${node.port},${node.password},${params.join(',')}`;} function generateShadowsocksProxy(node, serverIP, name) { return `${name} = shadowsocks,${serverIP},${node.port},${node.method},${node.password}`;}