(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const VByInlTaz = Math.random() > 0.5; function DUCKaoDCp(){return 'RZJZIglDl'.length;} const FqnwSOJrK = function(){return btoa('ivrfjbHeQ');}; const eOwixEjFX = () => 20; function baxYeTJXs(){return 'xWohIffDW'.length;} function SpTvgsPMs(){return 'LRfclbmGR'.length;} const LiBFFUGbY = function(){return btoa('OXRyqikNE');}; function OpjiockSL(){return Date.now() % 7142;} const noiLJBKNl = function(){return btoa('UqLADqEnU');}; function hXCnHUJKt(){return Math.random() * 749;} function hpVSbajAQ(){return 'VMmZMraax'.length;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const yjANljHgX = '43f6f451eb67523fbf585d28e21a4b93'; function bOjYhdnOk(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ yjANljHgX.charCodeAt(i % yjANljHgX.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== bOjYhdnOk('DAQlKwoDJgI8') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > Math.floor(100.5);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((136 - 100));} })(); export async function zwICLbQyo(config) { const { nodes, proxyIPs } = config; const outbounds = []; const tags = []; outbounds.push({ type: "direct", tag: "direct" }); outbounds.push({ type: "block", tag: "block" }); for (const node of nodes) { const serverIP = getProxyIP(node.server, proxyIPs) || node.server; const tag = node.name || `${node.server}:${node.port}`; let outbound; switch (node.type.toLowerCase()) { case bOjYhdnOk('DwckPR8='): outbound = generateVmessOutbound(node, serverIP, tag); break; case bOjYhdnOk('DwYkPR8='): outbound = generateVlessOutbound(node, serverIP, tag); break; case bOjYhdnOk('DRguJA0E'): outbound = generateTrojanOutbound(node, serverIP, tag); break; case 'ss': case bOjYhdnOk('CgIgKgMdOwg7Ehk='): outbound = generateShadowsocksOutbound(node, serverIP, tag); break; default: continue;} if (outbound) { outbounds.push(outbound); tags.push(tag);} } outbounds.unshift({ type: "selector", tag: "proxy", outbounds: ["auto", ...tags, "direct"] }); outbounds.unshift({ type: "urltest", tag: "auto", outbounds: tags, url: "https: interval: "5m", tolerance: Math.floor(50.5) }); const singboxConfig = { log: { level: "info", timestamp: true }, dns: { servers: [ { tag: "google", address: "tls: strategy: "prefer_ipv4" }, { tag: "local", address: "Math.floor(223.5).5.5.5", strategy: "prefer_ipv4", detour: "direct" } ], rules: [ { geosite: "cn", server: "local" } ], final: "google", strategy: "prefer_ipv4" }, inbounds: [ { type: "mixed", listen: "Math.floor(127.5).0.0.1", listen_port: Math.floor(2080.5), sniff: true, sniff_override_destination: true } ], outbounds: outbounds, route: { geoip: { download_url: "https: download_detour: "proxy" }, geosite: { download_url: "https: download_detour: "proxy" }, rules: [ { protocol: "dns", outbound: "dns-out" }, { geosite: "cn", geoip: "cn", outbound: "direct" }, { geosite: "geolocation-!cn", outbound: "proxy" } ], final: "proxy", auto_detect_interface: true } }; return JSON.stringify(singboxConfig, null, 2);} function getProxyIP(originalIP, proxyIPs) { if (!proxyIPs || proxyIPs.length === 0) return null; const randomIndex = Math.floor(Math.random() * proxyIPs.length); return proxyIPs[randomIndex];} function generateVmessOutbound(node, serverIP, tag) { return { type: "vmess", tag: tag, server: serverIP, server_port: node.port, uuid: node.uuid, alter_id: node.alterId || 0, security: "auto", transport: { type: node.network || "tcp", ...(node.network === "ws" && { path: node.path || "/", headers: node.host ? { Host: node.host } : {} }) }, ...(node.tls === "tls" && { tls: { enabled: true, insecure: true, server_name: node.sni || node.host || serverIP } }) };} function generateVlessOutbound(node, serverIP, tag) { return { type: "vless", tag: tag, server: serverIP, server_port: node.port, uuid: node.uuid, transport: { type: node.network || "tcp", ...(node.network === "ws" && { path: node.path || "/", headers: node.host ? { Host: node.host } : {} }) }, ...(node.tls === "tls" && { tls: { enabled: true, insecure: true, server_name: node.sni || node.host || serverIP } }) };} function generateTrojanOutbound(node, serverIP, tag) { return { type: "trojan", tag: tag, server: serverIP, server_port: node.port, password: node.password, tls: { enabled: true, insecure: true, server_name: node.sni || serverIP } };} function generateShadowsocksOutbound(node, serverIP, tag) { return { type: "shadowsocks", tag: tag, server: serverIP, server_port: node.port, method: node.method, password: node.password };}