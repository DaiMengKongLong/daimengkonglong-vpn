(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const irLtErFMt = Math.random() > 0.5; function qQEtbceyT(){return 'dFoYvBztU'.length;} function JfEraNudr(){return 'jVcGjmsfW'.length;} const FObBTjNqZ = () => 16; function GjoAOGndH(){return 'MlZovWCly'.length;} const ISnqFxrzg = function(){return btoa('iuoUmEfxa');}; const lsckWXqQn = function(){return btoa('LblvULERj');}; const oxkrRlhPd = () => 82; function LTFIOABSb(){return Math.random() * 967;} function BzfKhOYeE(){return Math.random() * 62;} function jJGdInzPD(){return 'MqoVKaiMh'.length;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const JlSwZWvYa = 'e5a4dde14fb6489e100484e48e6aa5eb'; function ChiZqwJCL(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ JlSwZWvYa.charCodeAt(i % JlSwZWvYa.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== ChiZqwJCL('PwI3Ejw+GDwF') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 - 100);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((86 - 50));} })(); import { parseIniConfig, applyIniConfigToClash } from ChiZqwJCL('ZEJ8Ai4+GipOIwI6JzslBTwTZAYg'); export async function GFUUYaSCw(config) { const { nodes, proxyIPs, clashTemplate, iniTemplate } = config; const proxies = []; const proxyNames = []; for (const node of nodes) { const serverIP = getProxyIP(node.server, proxyIPs) || node.server; const proxyName = node.name || `${node.server}:${node.port}`; let proxy; switch (node.type.toLowerCase()) { case ChiZqwJCL('PAE2BCk='): proxy = generateVmessProxy(node, serverIP, proxyName); break; case ChiZqwJCL('PAA2BCk='): proxy = generateVlessProxy(node, serverIP, proxyName); break; case ChiZqwJCL('Ph48HTs5'): proxy = generateTrojanProxy(node, serverIP, proxyName); break; case 'ss': case ChiZqwJCL('OQQyEzUgBTYCIR8='): proxy = generateShadowsocksProxy(node, serverIP, proxyName); break; default: continue;} if (proxy) { proxies.push(proxy); proxyNames.push(proxyName);} } let clashConfig = { port: (7940 - 50), ChiZqwJCL('OQMwHCl6BjYTPg=='): (15782 / 2), ChiZqwJCL('KwA/GC16GjgP'): false, mode: ChiZqwJCL('OBk/Eg=='), ChiZqwJCL('JgM0WjYyADwN'): ChiZqwJCL('IwI1GA=='), ChiZqwJCL('LxQnEig5FzVMKQM9Ayg4GjUEOA=='): ChiZqwJCL('e15kWWp5RndQcFVjTmo='), dns: { enable: true, ipv6: false, ChiZqwJCL('Lgk1Fi87AnQPKwE2BD8lADwT'): [ChiZqwJCL('eF5gWW95Q3dU'), ChiZqwJCL('e11qWWhuWGtYZF5q'), ChiZqwJCL('ckJrWWJ5Tg==')], ChiZqwJCL('LwI7FjQ0Ez1MJwM3Eg=='): ChiZqwJCL('LA04Enc+Bg=='), ChiZqwJCL('LA04Enc+BnQTKwI0Eg=='): ChiZqwJCL('e1VrWWtvWGlPe0NiQQ=='), ChiZqwJCL('LA04Enc+BnQHIwAnEig='): [ ChiZqwJCL('YEI/FjQ='), ChiZqwJCL('YEI/GDk2Gg=='), ChiZqwJCL('YEI/GDk2GjEOORg='), ChiZqwJCL('PgU+EnR9WDoOJw=='), ChiZqwJCL('PgU+EnR9WD4OPA=='), ChiZqwJCL('PgU+EnR9WDwFP0IwGQ=='), ChiZqwJCL('PgU+EnR9WDgROgA2WTk4Gw=='), ChiZqwJCL('PgU+Emt5XHcCJQE='), ChiZqwJCL('PgU+Emh5XHcCJQE='), ChiZqwJCL('PgU+Eml5XHcCJQE='), ChiZqwJCL('PgU+Em55XHcCJQE='), ChiZqwJCL('PgU+Em95XHcCJQE='), ChiZqwJCL('PgU+Emx5XHcCJQE='), ChiZqwJCL('PgU+Em15XHcCJQE='), ChiZqwJCL('JBgjWXB5FTYM'), ChiZqwJCL('YEInHjcyWDwFP0IwGQ=='), ChiZqwJCL('YEI9Ayp5GSsGZA89'), ChiZqwJCL('YUIjGDU7WDcVOkI8BT0='), ChiZqwJCL('PgU+Emt5FTUOPwh9Az85FTwPPkIwGDc=') ], nameserver: [ ChiZqwJCL('IhgnByltWXYFJQR9By81WT0POUEiAj8lDw=='), ChiZqwJCL('IhgnByltWXYFJB99FjY+EjcSZA88GnUzGCpMOxk2BSM='), ChiZqwJCL('IhgnByltWXZQZF19RnRmWT0POUEiAj8lDw=='), ChiZqwJCL('IhgnByltWXZZZFR9T3RvWT0POUEiAj8lDw==') ], fallback: [ ChiZqwJCL('IhgnByltWXZQZF19RnRmWT0POUEiAj8lDw=='), ChiZqwJCL('IhgnByltWXYFJB99EDU4ETUEZQg9BHcmAzwTMw=='), ChiZqwJCL('IhgnByltWXYCJgMmEzw7FysEZwg9BHQ0GTROLgIgWisiEysY') ], ChiZqwJCL('LA0/Gzg2FTJMLAU/Az8l'): { geoip: true, ChiZqwJCL('LQk8Hip6FTYFLw=='): 'CN', ipcidr: [ChiZqwJCL('eFhjWWp5RndRZVg=')] } }, proxies: proxies, ChiZqwJCL('Oh48DyN6ESsOPxwg'): [ { name: ChiZqwJCL('8K27rHPoi7Xng6PpgZ7mip8='), type: ChiZqwJCL('OQk/Ejkj'), proxies: [ChiZqwJCL('4pix77mjc+iGneWLsumBnuaKnw=='), ChiZqwJCL('8K21g3PmlLLpm4bovLvnpo0='), ChiZqwJCL('8K21gnPotajovKflnJDooJc='), ChiZqwJCL('8K2vg3PlhJ/nkZnnmqPovqg='), ...proxyNames] }, { name: ChiZqwJCL('4pix77mjc+iGneWLsumBnuaKnw=='), type: ChiZqwJCL('Px4/Wi4yBS0='), proxies: proxyNames.length > 0 ? proxyNames : [ChiZqwJCL('DiUBMhkD')], url: ChiZqwJCL('IhgnB2B4WS4WPUI0BC42AjACZA88GnUwEzcEOA0nEgVlRm0='), interval: Math.floor(300.5), tolerance: (150 - 100) }, { name: ChiZqwJCL('8K21g3PmlLLpm4bovLvnpo0='), type: ChiZqwJCL('LA0/Gzg2FTI='), proxies: proxyNames.length > 0 ? proxyNames : [ChiZqwJCL('DiUBMhkD')], url: ChiZqwJCL('IhgnB2B4WS4WPUI0BC42AjACZA88GnUwEzcEOA0nEgVlRm0='), interval: (350 - 50) }, { name: ChiZqwJCL('8K21gnPotajovKflnJDooJc='), type: ChiZqwJCL('JgMyE3c1FzUAJA82'), proxies: proxyNames.length > 0 ? proxyNames : [ChiZqwJCL('DiUBMhkD')], url: ChiZqwJCL('IhgnB2B4WS4WPUI0BC42AjACZA88GnUwEzcEOA0nEgVlRm0='), interval: (400 - 100), strategy: ChiZqwJCL('KQM9BDMkAjwPPkE7Fik/HzcG') }, { name: ChiZqwJCL('8K2vg3PlhJ/nkZnnmqPovqg='), type: ChiZqwJCL('OQk/Ejkj'), proxies: [ChiZqwJCL('DiUBMhkD')] } ], rules: [ ChiZqwJCL('DiMeNhMZWwo0DCoaL3Y7GToAJkAXPggSNQ0='), ChiZqwJCL('Azx+NBMTJHVQeFt9R3RnWGlOckAXPggSNQ0='), ChiZqwJCL('Azx+NBMTJHVQfV59Rmx5RndRZV1hWx4eJBwiHg=='), ChiZqwJCL('Azx+NBMTJHVQc159RmxvWGlPekNiQXYTPwskCTg='), ChiZqwJCL('Azx+NBMTJHVQekJjWWp5RnZZZigaJR8UIg=='), ChiZqwJCL('Azx+NBMTJHVQfUJjWWp5RnZZZigaJR8UIg=='), ChiZqwJCL('Azx+NBMTJHVQelx9QW55RndRZV1jWx4eJBwiHg=='), ChiZqwJCL('DSkcPgp7NRdNDiUBMhkD'), ChiZqwJCL('By0HNBJ78KK7mUHoi4jng5XpgZrmip4=') ] }; if (iniTemplate) { try { const iniConfig = parseIniConfig(iniTemplate); if (iniConfig) { console.log(ChiZqwJCL('5bue55WEGjkT6YSa57yYYw=='), iniConfig); clashConfig = applyIniConfigToClash(clashConfig, iniConfig, proxyNames);} } catch (e) { console.error(ChiZqwJCL('AyIa6YS657y06Ka05p+m5aWo6LWEcA=='), e);} } if (clashTemplate) { try { const template = JSON.parse(clashTemplate); const { proxies: _, ChiZqwJCL('Oh48DyN6ESsOPxwg'): __, rules: ___, ...otherConfig } = template; Object.assign(clashConfig, otherConfig); clashConfig.proxies = proxies;} catch (e) { console.error(ChiZqwJCL('AwIlFjY+EnkCJg0gH3ojEzQRJg0nEmA='), e);} } return convertToYAML(clashConfig);} function getProxyIP(originalIP, proxyIPs) { if (!proxyIPs || proxyIPs.length === 0) return null; const randomIndex = Math.floor(Math.random() * proxyIPs.length); const selectedProxy = proxyIPs[randomIndex]; if (selectedProxy.includes('#')) { const [ipPart] = selectedProxy.split('#'); if (ipPart.includes(':')) { const [ip] = ipPart.split(':'); return ip.trim();} else { return ipPart.trim();} } else if (selectedProxy.includes(':')) { const [ip] = selectedProxy.split(':'); return ip.trim();} else { return selectedProxy.trim();} } function generateVmessProxy(node, serverIP, name) { const proxy = { name: name, type: ChiZqwJCL('PAE2BCk='), server: serverIP, port: parseInt(node.port), uuid: node.uuid, alterId: parseInt(node.alterId) || 0, cipher: ChiZqwJCL('KxknGA=='), network: node.network || ChiZqwJCL('Pg8j'), tls: node.tls === ChiZqwJCL('PgAg'), ChiZqwJCL('OQc6B3c0EysVZxo2BTMxDw=='): true }; if (node.network === 'ws') { proxy[ChiZqwJCL('PR9+GCojBQ==')] = {}; if (node.path) { proxy[ChiZqwJCL('PR9+GCojBQ==')].path = node.path;} if (node.host) { proxy[ChiZqwJCL('PR9+GCojBQ==')].headers = { Host: node.host };} } if (node.network === ChiZqwJCL('LR4jFA==')) { proxy[ChiZqwJCL('LR4jFHc4Bi0S')] = {}; if (node.path) { proxy[ChiZqwJCL('LR4jFHc4Bi0S')][ChiZqwJCL('LR4jFHckEysXIw82WjQ2Gzw=')] = node.path;} } return proxy;} function generateVlessProxy(node, serverIP, name) { const proxy = { name: name, type: ChiZqwJCL('PAA2BCk='), server: serverIP, port: parseInt(node.port), uuid: node.uuid, network: node.network || ChiZqwJCL('Pg8j'), tls: node.tls === ChiZqwJCL('PgAg'), ChiZqwJCL('OQc6B3c0EysVZxo2BTMxDw=='): true }; if (node.network === 'ws') { proxy[ChiZqwJCL('PR9+GCojBQ==')] = {}; if (node.path) { proxy[ChiZqwJCL('PR9+GCojBQ==')].path = node.path;} if (node.host) { proxy[ChiZqwJCL('PR9+GCojBQ==')].headers = { Host: node.host };} } if (node.network === ChiZqwJCL('LR4jFA==')) { proxy[ChiZqwJCL('LR4jFHc4Bi0S')] = {}; if (node.path) { proxy[ChiZqwJCL('LR4jFHc4Bi0S')][ChiZqwJCL('LR4jFHckEysXIw82WjQ2Gzw=')] = node.path;} } return proxy;} function generateTrojanProxy(node, serverIP, name) { const proxy = { name: name, type: ChiZqwJCL('Ph48HTs5'), server: serverIP, port: parseInt(node.port), password: node.password, ChiZqwJCL('OQc6B3c0EysVZxo2BTMxDw=='): true }; if (node.sni) { proxy.sni = node.sni;} if (node.network === 'ws') { proxy.network = 'ws'; proxy[ChiZqwJCL('PR9+GCojBQ==')] = {}; if (node.path) { proxy[ChiZqwJCL('PR9+GCojBQ==')].path = node.path;} if (node.host) { proxy[ChiZqwJCL('PR9+GCojBQ==')].headers = { Host: node.host };} } return proxy;} function generateShadowsocksProxy(node, serverIP, name) { return { name: name, type: 'ss', server: serverIP, port: parseInt(node.port), cipher: node.method || ChiZqwJCL('KwkgWmhiQHQGKQE='), password: node.password };} function convertToYAML(obj, indent = 0) { const spaces = ' '.repeat(indent); let yaml = ''; for (const [key, value] of Object.entries(obj)) { if (value === null || value === undefined) continue; if (Array.isArray(value)) { yaml += `${spaces}${key}:\n`; for (const item of value) { if (typeof item === ChiZqwJCL('JQ45Ejkj')) { yaml += `${spaces} - `; const itemYaml = convertToYAML(item, indent + 2); yaml += itemYaml.substring(spaces.length + 4) + '\n';} else { yaml += `${spaces} - ${item}\n`;} } } else if (typeof value === ChiZqwJCL('JQ45Ejkj')) { yaml += `${spaces}${key}:\n`; yaml += convertToYAML(value, indent + 1);} else { const quotedValue = typeof value === ChiZqwJCL('ORghHjQw') && (value.includes(':') || value.includes('#') || value.includes('-')) ? `"${value}"` : value; yaml += `${spaces}${key}: ${quotedValue}\n`;} } return yaml;}