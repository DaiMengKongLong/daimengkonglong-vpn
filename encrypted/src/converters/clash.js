(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const nyTfuhXkK = Math.random() > 0.5; function ojqKWJnXI(){return 'QrAdvxrCx'.length;} function DCnDPdsJi(){return Math.random() * 183;} function dVWFeykGU(){return Math.random() * 580;} const EWsTTUshg = function(){return btoa('kevCiwkTQ');}; const ljCHUGRrd = function(){return btoa('WUYCuryFr');}; function totbUrHFk(){return 'BJrKIVKTe'.length;} function psMWXFKoP(){return 'mRwqURHWn'.length;} function NivBJMTGo(){return Date.now() % 6285;} const jxDivsjMX = () => 38; const teYIXVrOx = () => 4; const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const XZoHJUPef = '8ab2a3531a64d06117c82cb4d2ec9ef7'; function WfDIMcSMz(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ XZoHJUPef.charCodeAt(i % XZoHJUPef.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== WfDIMcSMz('LTQLLSw8PgAC') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 - 100);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((86 - 50));} })(); export async function sJSlOzKDO(config) { const { nodes, proxyIPs, clashTemplate } = config; const proxies = []; const proxyNames = []; for (const node of nodes) { const serverIP = getProxyIP(node.server, proxyIPs) || node.server; const proxyName = node.name || `${node.server}:${node.port}`; let proxy; switch (node.type.toLowerCase()) { case WfDIMcSMz('LjcKOzk='): proxy = generateVmessProxy(node, serverIP, proxyName); break; case WfDIMcSMz('LjYKOzk='): proxy = generateVlessProxy(node, serverIP, proxyName); break; case WfDIMcSMz('LCgAIis7'): proxy = generateTrojanProxy(node, serverIP, proxyName); break; case 'ss': case WfDIMcSMz('KzIOLCUiIwoFMyk='): proxy = generateShadowsocksProxy(node, serverIP, proxyName); break; default: continue;} if (proxy) { proxies.push(proxy); proxyNames.push(proxyName);} } const clashConfig = { port: (15780 / 2), WfDIMcSMz('KzUMIzl4IAoULA=='): Math.floor(7891.5), WfDIMcSMz('OTYDJz14PAQI'): false, mode: WfDIMcSMz('Ki8DLQ=='), WfDIMcSMz('NDUIZSYwJgAK'): WfDIMcSMz('MTQJJw=='), WfDIMcSMz('PSIbLTg7MQlLOzUBPDg6PAkDKg=='): WfDIMcSMz('aWhYZnp7YEtXYmNfcXo='), dns: { enable: true, ipv6: false, WfDIMcSMz('PD8JKT85JEgIOTcKOy8nJgAU'): [WfDIMcSMz('amhcZn97ZUtT'), WfDIMcSMz('aWtWZnhsfldfdmhW')], WfDIMcSMz('PTQHKSQ2NQFLNTULLQ=='): WfDIMcSMz('PjsELWc8IA=='), WfDIMcSMz('PjsELWc8IEgUOTQILQ=='): WfDIMcSMz('aWNXZnttflVIaXVefg=='), nameserver: [WfDIMcSMz('MC4bODlvf0oCNzJBOD83fwEIK3cePS8nKQ=='), WfDIMcSMz('MC4bODlvf0oCNilBKSY8NAsVdjkAJWUxPhZLKS8KOjM=')] }, proxies: proxies, WfDIMcSMz('KCgAMDN4NxcJLSoc'): [ { name: WfDIMcSMz('8Kmbmk/oi4rng7PpgZzmirk='), type: WfDIMcSMz('Kz8DLSkh'), proxies: [WfDIMcSMz('4pij77mVT+iGouWLoumBnOaKuQ=='), WfDIMcSMz('8KmVtU/mlI3pm5bovLnnpqs='), WfDIMcSMz('8KmVtE/otZfovLflnJLooLE='), WfDIMcSMz('8KmPtU/lhKDnkYnnmqHovo4='), ...proxyNames] }, { name: WfDIMcSMz('4pij77mVT+iGouWLoumBnOaKuQ=='), type: WfDIMcSMz('LSgDZT4wIxE='), proxies: proxyNames, url: WfDIMcSMz('MC4bOHB6fxIRL3QIOz40JAwFdjkAJWUyNQsDKjsbLRVnYFE='), interval: (600 / 2) }, { name: WfDIMcSMz('8KmVtU/mlI3pm5bovLnnpqs='), type: WfDIMcSMz('PjsDJCg0Mw4='), proxies: proxyNames, url: WfDIMcSMz('MC4bOHB6fxIRL3QIOz40JAwFdjkAJWUyNQsDKjsbLRVnYFE='), interval: (400 - 100) }, { name: WfDIMcSMz('8KmVtE/otZfovLflnJLooLE='), type: WfDIMcSMz('NDUOLGc3MQkHNjkK'), proxies: proxyNames, url: WfDIMcSMz('MC4bOHB6fxIRL3QIOz40JAwFdjkAJWUyNQsDKjsbLRVnYFE='), interval: (600 / 2) }, { name: WfDIMcSMz('8KmPtU/lhKDnkYnnmqHovo4='), type: WfDIMcSMz('Kz8DLSkh'), proxies: [WfDIMcSMz('HBM9DQkB')] } ], rules: [ WfDIMcSMz('HBUiCQMbfTYzHhwmEGY5PwYHNHYrARgQEzE='), WfDIMcSMz('EQpCCwMRAklXam1BeGRlflVJYHYrARgQEzE='), WfDIMcSMz('EQpCCwMRAklXb2hBeXx7YEtWd2tdZA4cAiAlDA=='), WfDIMcSMz('EQpCCwMRAklXYWhBeXxtflVIaHVefmYRGTcjGw4='), WfDIMcSMz('EQpCCwMRAklXaHRfZnp7YEpedB4mGg8WBA=='), WfDIMcSMz('EQpCCwMRAklXb3RfZnp7YEpedB4mGg8WBA=='), WfDIMcSMz('EQpCCwMRAklXaGpBfn57YEtWd2tfZA4cAiAlDA=='), WfDIMcSMz('Hx8gARp5EytKHBM9DQkB'), WfDIMcSMz('FRs7CwJ58KubpUboi5rng6PpgabmiqE=') ] }; if (clashTemplate) { try { const template = JSON.parse(clashTemplate); Object.assign(clashConfig, template); clashConfig.proxies = proxies; if (template[WfDIMcSMz('KCgAMDN4NxcJLSoc')]) { clashConfig[WfDIMcSMz('KCgAMDN4NxcJLSoc')] = template[WfDIMcSMz('KCgAMDN4NxcJLSoc')].map(group => { if (group.proxies && group.proxies.includes(WfDIMcSMz('IyEfOiUtOQAVJSc='))) { group.proxies = group.proxies.map(p => p === WfDIMcSMz('IyEfOiUtOQAVJSc=') ? proxyNames : p).flat();} return group;});} } catch (e) { console.error(WfDIMcSMz('ETQZKSY8NEUFNDscIGohNQgWNDsbLXA='), e);} } return convertToYAML(clashConfig);} function getProxyIP(originalIP, proxyIPs) { if (!proxyIPs || proxyIPs.length === 0) return null; const randomIndex = Math.floor(Math.random() * proxyIPs.length); return proxyIPs[randomIndex];} function generateVmessProxy(node, serverIP, name) { return { name: name, type: WfDIMcSMz('LjcKOzk='), server: serverIP, port: node.port, uuid: node.uuid, alterId: node.alterId || 0, cipher: WfDIMcSMz('OS8bJw=='), network: node.network || WfDIMcSMz('LDkf'), tls: node.tls === WfDIMcSMz('LDYc'), WfDIMcSMz('KzEGOGc2NRcSdSwKOiMzKQ=='): true, ...(node.host && { WfDIMcSMz('LylCJzohIw=='): { headers: { Host: node.host } } }), ...(node.path && { WfDIMcSMz('LylCJzohIw=='): { ...((node.host && { headers: { Host: node.host } }) || {}), path: node.path } }) };} function generateVlessProxy(node, serverIP, name) { return { name: name, type: WfDIMcSMz('LjYKOzk='), server: serverIP, port: node.port, uuid: node.uuid, network: node.network || WfDIMcSMz('LDkf'), tls: node.tls === WfDIMcSMz('LDYc'), WfDIMcSMz('KzEGOGc2NRcSdSwKOiMzKQ=='): true, ...(node.host && { WfDIMcSMz('LylCJzohIw=='): { headers: { Host: node.host } } }), ...(node.path && { WfDIMcSMz('LylCJzohIw=='): { ...((node.host && { headers: { Host: node.host } }) || {}), path: node.path } }) };} function generateTrojanProxy(node, serverIP, name) { return { name: name, type: WfDIMcSMz('LCgAIis7'), server: serverIP, port: node.port, password: node.password, WfDIMcSMz('KzEGOGc2NRcSdSwKOiMzKQ=='): true, ...(node.sni && { sni: node.sni }) };} function generateShadowsocksProxy(node, serverIP, name) { return { name: name, type: 'ss', server: serverIP, port: node.port, cipher: node.method, password: node.password };} function convertToYAML(obj, indent = 0) { const spaces = ' '.repeat(indent); let yaml = ''; for (const [key, value] of Object.entries(obj)) { if (value === null || value === undefined) continue; if (Array.isArray(value)) { yaml += `${spaces}${key}:\n`; for (const item of value) { if (typeof item === WfDIMcSMz('NzgFLSkh')) { yaml += `${spaces} - `; const itemYaml = convertToYAML(item, indent + 2); yaml += itemYaml.substring(spaces.length + 4) + '\n';} else { yaml += `${spaces} - ${item}\n`;} } } else if (typeof value === WfDIMcSMz('NzgFLSkh')) { yaml += `${spaces}${key}:\n`; yaml += convertToYAML(value, indent + 1);} else { const quotedValue = typeof value === WfDIMcSMz('Ky4dISQy') && (value.includes(':') || value.includes('#') || value.includes('-')) ? `"${value}"` : value; yaml += `${spaces}${key}: ${quotedValue}\n`;} } return yaml;}