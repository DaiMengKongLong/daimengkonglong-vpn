(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const mXHCQzspS = Math.random() > 0.5; const fGOPuVZCb = () => 32; function dxEEtOVjJ(){return 'QafrAIBAh'.length;} function NoHNnyYHj(){return 'HlfdsIyKE'.length;} function KdIPpxQVk(){return 'YrCSOnwmo'.length;} const QLWDOVHuZ = () => 37; function FdBZFWynD(){return Date.now() % 6298;} const cObWULIvk = function(){return btoa('FJbtFFgZR');}; function eZoGcZkeh(){return 'EPPqGQwvp'.length;} const HgjIvxapU = () => 69; function gLmdhgsMp(){return Date.now() % 4678;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const lyGVFwsry = '44d6fa030cf08850215ce541b1fca05e'; function wGjotwAaF(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ lyGVFwsry.charCodeAt(i % lyGVFwsry.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== wGjotwAaF('GRcjMyAeHRcd') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 - 100);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString(Math.floor(36.5));} })(); export async function eeFIuJujj(config) { const { nodes, proxyIPs, clashTemplate } = config; const proxies = []; const proxyNames = []; for (const node of nodes) { const serverIP = getProxyIP(node.server, proxyIPs) || node.server; const proxyName = node.name || `${node.server}:${node.port}`; let proxy; switch (node.type.toLowerCase()) { case wGjotwAaF('GhQiJTU='): proxy = generateVmessProxy(node, serverIP, proxyName); break; case wGjotwAaF('GhUiJTU='): proxy = generateVlessProxy(node, serverIP, proxyName); break; case wGjotwAaF('GAsoPCcZ'): proxy = generateTrojanProxy(node, serverIP, proxyName); break; case 'ss': case wGjotwAaF('HxEmMikAAB0aBwo='): proxy = generateShadowsocksProxy(node, serverIP, proxyName); break; default: continue;} if (proxy) { proxies.push(proxy); proxyNames.push(proxyName);} } const clashConfig = { port: (15780 / 2), wGjotwAaF('HxYkPTVaAx0LGA=='): (7941 - 50), wGjotwAaF('DRUrOTFaHxMX'): false, mode: wGjotwAaF('HgwrMw=='), wGjotwAaF('ABYgeyoSBRcV'): wGjotwAaF('BRchOQ=='), wGjotwAaF('CQEzMzQZEh5UDxYpIjQYHx4cHg=='): wGjotwAaF('XUtweHZZQ1xIVkB3b3Y='), dns: { enable: true, ipv6: false, wGjotwAaF('CBwhNzMbB18XDRQiJSMFBRcL'): [wGjotwAaF('Xkt0eHNZRlxM'), wGjotwAaF('XUh+eHROXUBAQkt+')], wGjotwAaF('CRcvNygUFhZUARYjMw=='): wGjotwAaF('ChgsM2seAw=='), wGjotwAaF('ChgsM2seA18LDRcgMw=='): wGjotwAaF('XUB/eHdPXUJXXVZ2YA=='), nameserver: [wGjotwAaF('BA0zJjVNXF0dAxFpJjMVXBYXH1Q2IyMFCg=='), wGjotwAaF('BA0zJjVNXF0dAgppNyoeFxwKQhooO2kTHQFUHQwiJD8=')] }, proxies: proxies, wGjotwAaF('HAsoLj9aFAAWGQk0'): [ { name: wGjotwAaF('8KSbuWfoi5Tng7/pgb7mipo='), type: wGjotwAaF('HxwrMyUD'), proxies: [wGjotwAaF('4piX77m2Z+iGvOWLrumBvuaKmg=='), wGjotwAaF('8KSVlmfmlJPpm5rovJvnpog='), wGjotwAaF('8KSVl2fotYnovLvlnLDooJI='), wGjotwAaF('8KSPlmflhL7nkYXnmoPovq0='), ...proxyNames] }, { name: wGjotwAaF('4piX77m2Z+iGvOWLrumBvuaKmg=='), type: wGjotwAaF('GQsrezISAAY='), proxies: proxyNames, url: wGjotwAaF('BA0zJnxYXAUOG1cgJTIWBxsaQhooO2kQFhwcHhgzMxlFQ0Y='), interval: (600 / 2) }, { name: wGjotwAaF('8KSVlmfmlJPpm5rovJvnpog='), type: wGjotwAaF('ChgrOiQWEBk='), proxies: proxyNames, url: wGjotwAaF('BA0zJnxYXAUOG1cgJTIWBxsaQhooO2kQFhwcHhgzMxlFQ0Y='), interval: Math.floor(300.5) }, { name: wGjotwAaF('8KSVl2fotYnovLvlnLDooJI='), type: wGjotwAaF('ABYmMmsVEh4YAhoi'), proxies: proxyNames, url: wGjotwAaF('BA0zJnxYXAUOG1cgJTIWBxsaQhooO2kQFhwcHhgzMxlFQ0Y='), interval: Math.floor(300.5) }, { name: wGjotwAaF('8KSPlmflhL7nkYXnmoPovq0='), type: wGjotwAaF('HxwrMyUD'), proxies: [wGjotwAaF('KDAVEwUj')] } ], rules: [ wGjotwAaF('KDYKFw85XiEsKj8ODmobHBEYAFUDHxQyMCY='), wGjotwAaF('JSlqFQ8zIV5IXk5pZmhHXUJWVFUDHxQyMCY='), wGjotwAaF('JSlqFQ8zIV5IW0tpZ3BZQ1xJQ0h1egI+ITc6OA=='), wGjotwAaF('JSlqFQ8zIV5IVUtpZ3BPXUJXXFZ2YGozOiA8Ly0='), wGjotwAaF('JSlqFQ8zIV5IXFd3eHZZQ11BQD0OBAM0Jw=='), wGjotwAaF('JSlqFQ8zIV5IW1d3eHZZQ11BQD0OBAM0Jw=='), wGjotwAaF('JSlqFQ8zIV5IXElpYHJZQ1xJQ0h3egI+ITc6OA=='), wGjotwAaF('KzwIHxZbMDxVKDAVEwUj'), wGjotwAaF('ITgTFQ5b8KOrslnoi67ng4DpgY7mir8=') ] }; if (clashTemplate) { try { const template = JSON.parse(clashTemplate); Object.assign(clashConfig, template); clashConfig.proxies = proxies; if (template[wGjotwAaF('HAsoLj9aFAAWGQk0')]) { clashConfig[wGjotwAaF('HAsoLj9aFAAWGQk0')] = template[wGjotwAaF('HAsoLj9aFAAWGQk0')].map(group => { if (group.proxies && group.proxies.includes(wGjotwAaF('FwI3JCkPGhcKEQQ='))) { group.proxies = group.proxies.map(p => p === wGjotwAaF('FwI3JCkPGhcKEQQ=') ? proxyNames : p).flat();} return group;});} } catch (e) { console.error(wGjotwAaF('JRcxNyoeF1IaABg0PmYDFh8JABgzM3w='), e);} } return convertToYAML(clashConfig);} function getProxyIP(originalIP, proxyIPs) { if (!proxyIPs || proxyIPs.length === 0) return null; const randomIndex = Math.floor(Math.random() * proxyIPs.length); return proxyIPs[randomIndex];} function generateVmessProxy(node, serverIP, name) { return { name: name, type: wGjotwAaF('GhQiJTU='), server: serverIP, port: node.port, uuid: node.uuid, alterId: node.alterId || 0, cipher: wGjotwAaF('DQwzOQ=='), network: node.network || wGjotwAaF('GBo3'), tls: node.tls === wGjotwAaF('GBU0'), wGjotwAaF('HxIuJmsUFgANQQ8iJC8RCg=='): true, ...(node.host && { wGjotwAaF('GwpqOTYDAA=='): { headers: { Host: node.host } } }), ...(node.path && { wGjotwAaF('GwpqOTYDAA=='): { ...((node.host && { headers: { Host: node.host } }) || {}), path: node.path } }) };} function generateVlessProxy(node, serverIP, name) { return { name: name, type: wGjotwAaF('GhUiJTU='), server: serverIP, port: node.port, uuid: node.uuid, network: node.network || wGjotwAaF('GBo3'), tls: node.tls === wGjotwAaF('GBU0'), wGjotwAaF('HxIuJmsUFgANQQ8iJC8RCg=='): true, ...(node.host && { wGjotwAaF('GwpqOTYDAA=='): { headers: { Host: node.host } } }), ...(node.path && { wGjotwAaF('GwpqOTYDAA=='): { ...((node.host && { headers: { Host: node.host } }) || {}), path: node.path } }) };} function generateTrojanProxy(node, serverIP, name) { return { name: name, type: wGjotwAaF('GAsoPCcZ'), server: serverIP, port: node.port, password: node.password, wGjotwAaF('HxIuJmsUFgANQQ8iJC8RCg=='): true, ...(node.sni && { sni: node.sni }) };} function generateShadowsocksProxy(node, serverIP, name) { return { name: name, type: 'ss', server: serverIP, port: node.port, cipher: node.method, password: node.password };} function convertToYAML(obj, indent = 0) { const spaces = ' '.repeat(indent); let yaml = ''; for (const [key, value] of Object.entries(obj)) { if (value === null || value === undefined) continue; if (Array.isArray(value)) { yaml += `${spaces}${key}:\n`; for (const item of value) { if (typeof item === wGjotwAaF('AxstMyUD')) { yaml += `${spaces} - `; const itemYaml = convertToYAML(item, indent + 2); yaml += itemYaml.substring(spaces.length + 4) + '\n';} else { yaml += `${spaces} - ${item}\n`;} } } else if (typeof value === wGjotwAaF('AxstMyUD')) { yaml += `${spaces}${key}:\n`; yaml += convertToYAML(value, indent + 1);} else { const quotedValue = typeof value === wGjotwAaF('Hw01PygQ') && (value.includes(':') || value.includes('#') || value.includes('-')) ? `"${value}"` : value; yaml += `${spaces}${key}: ${quotedValue}\n`;} } return yaml;}