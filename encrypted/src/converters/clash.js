(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const XutSXmfiH = Math.random() > 0.5; const vBDTpUwcM = function(){return btoa('qDjgXiMlg');}; function UArdxbsNn(){return Date.now() % 2460;} function wEXYHLjON(){return Math.random() * 229;} const xTQoiKUZx = () => 97; function GbgVVbyFd(){return 'SvhXjCxsw'.length;} const rneNmQqIV = () => 29; function eSIEJnEEE(){return Date.now() % 7998;} const cCHrNsDnU = () => 44; function jLvHUnLVE(){return Date.now() % 785;} function MvEHypxjq(){return 'kjjsxlGdl'.length;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const PiIMvCypu = '8595e35f5248e9307b92fbba562b86e4'; function tYyeTRamZ(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ PiIMvCypu.charCodeAt(i % PiIMvCypu.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== tYyeTRamZ('JQctKBAqFxUR') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 / 2);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((136 - 100));} })(); export async function dAfaPEKMl(config) { const { nodes, proxyIPs, clashTemplate } = config; const proxies = []; const proxyNames = []; for (const node of nodes) { const serverIP = getProxyIP(node.server, proxyIPs) || node.server; const proxyName = node.name || `${node.server}:${node.port}`; let proxy; switch (node.type.toLowerCase()) { case tYyeTRamZ('JgQsPgU='): proxy = generateVmessProxy(node, serverIP, proxyName); break; case tYyeTRamZ('JgUsPgU='): proxy = generateVlessProxy(node, serverIP, proxyName); break; case tYyeTRamZ('JBsmJxct'): proxy = generateTrojanProxy(node, serverIP, proxyName); break; case 'ss': case tYyeTRamZ('IwEoKRk0Ch8WOxo='): proxy = generateShadowsocksProxy(node, serverIP, proxyName); break; default: continue;} if (proxy) { proxies.push(proxy); proxyNames.push(proxyName);} } const clashConfig = { port: (7990 - 100), tYyeTRamZ('IwYqJgVuCR8HJA=='): Math.floor(7891.5), tYyeTRamZ('MQUlIgFuFREb'): false, mode: tYyeTRamZ('IhwlKA=='), tYyeTRamZ('PAYuYBomDxUZ'): tYyeTRamZ('OQcvIg=='), tYyeTRamZ('NRE9KAQtGBxYMwYnOQQsFRwQIg=='): tYyeTRamZ('YVt+Y0ZtSV5EalB5dEY='), dns: { enable: true, ipv6: false, tYyeTRamZ('NAwvLAMvDV0bMQQsPhMxDxUH'): [tYyeTRamZ('Ylt6Y0NtTF5A'), tYyeTRamZ('YVhwY0R6V0JMfltw')], tYyeTRamZ('NQchLBggHBRYPQYtKA=='): tYyeTRamZ('NggiKFsqCQ=='), tYyeTRamZ('NggiKFsqCV0HMQcuKA=='): tYyeTRamZ('YVBxY0d7V0BbYUZ4ew=='), nameserver: [tYyeTRamZ('OB09PQV5Vl8RPwFnPQMhVhQbI0Q4OBMxAA=='), tYyeTRamZ('OB09PQV5Vl8RPhpnLBoqHR4GfgomIFknFwNYIRwsPw8=')] }, proxies: proxies, tYyeTRamZ('IBsmNQ9uHgIaJRk6'): [ { name: tYyeTRamZ('8KubqWnoi4/ng4/pgYrmipA='), type: tYyeTRamZ('IwwlKBU3'), proxies: [tYyeTRamZ('4pir77mmaeiGp+WLnumBiuaKkA=='), tYyeTRamZ('8KuVhmnmlIjpm6rovK/npoI='), tYyeTRamZ('8KuVh2notZLovIvlnITooJg='), tYyeTRamZ('8KuPhmnlhKXnkbXnmrfovqc='), ...proxyNames] }, { name: tYyeTRamZ('4pir77mmaeiGp+WLnumBiuaKkA=='), type: tYyeTRamZ('JRslYAImCgQ='), proxies: proxyNames, url: tYyeTRamZ('OB09PUxsVgcCJ0cuPgIiDRkWfgomIFkkHB4QIgg9KClxSUQ='), interval: Math.floor(300.5) }, { name: tYyeTRamZ('8KuVhmnmlIjpm6rovK/npoI='), type: tYyeTRamZ('NgglIRQiGhs='), proxies: proxyNames, url: tYyeTRamZ('OB09PUxsVgcCJ0cuPgIiDRkWfgomIFkkHB4QIgg9KClxSUQ='), interval: (600 / 2) }, { name: tYyeTRamZ('8KuVh2notZLovIvlnITooJg='), type: tYyeTRamZ('PAYoKVshGBwUPgos'), proxies: proxyNames, url: tYyeTRamZ('OB09PUxsVgcCJ0cuPgIiDRkWfgomIFkkHB4QIgg9KClxSUQ='), interval: Math.floor(300.5) }, { name: tYyeTRamZ('8KuPhmnlhKXnkbXnmrfovqc='), type: tYyeTRamZ('IwwlKBU3'), proxies: [tYyeTRamZ('FCAbCDUX')] } ], rules: [ tYyeTRamZ('FCYEDD8NVCMgFi8AFVovFhMUPEUNBCQGOiQ='), tYyeTRamZ('GTlkDj8HK1xEYl5nfVhzV0BaaEUNBCQGOiQ='), tYyeTRamZ('GTlkDj8HK1xEZ1tnfEBtSV5Ff1h7YTIKKzU2BA=='), tYyeTRamZ('GTlkDj8HK1xEaVtnfEB7V0BbYEZ4e1oHMCIwEz0='), tYyeTRamZ('GTlkDj8HK1xEYEd5Y0ZtSV9NfC0AHzMALQ=='), tYyeTRamZ('GTlkDj8HK1xEZ0d5Y0ZtSV9NfC0AHzMALQ=='), tYyeTRamZ('GTlkDj8HK1xEYFlne0JtSV5Ff1h5YTIKKzU2BA=='), tYyeTRamZ('FywGBCZvOj5ZFCAbCDUX'), tYyeTRamZ('HSgdDj5v8KGLsFXoi5Lng5DpgYDmiqQ=') ] }; if (clashTemplate) { try { const template = JSON.parse(clashTemplate); Object.assign(clashConfig, template); clashConfig.proxies = proxies; if (template[tYyeTRamZ('IBsmNQ9uHgIaJRk6')]) { clashConfig[tYyeTRamZ('IBsmNQ9uHgIaJRk6')] = template[tYyeTRamZ('IBsmNQ9uHgIaJRk6')].map(group => { if (group.proxies && group.proxies.includes(tYyeTRamZ('KxI5Pxk7EBUGLRQ='))) { group.proxies = group.proxies.map(p => p === tYyeTRamZ('KxI5Pxk7EBUGLRQ=') ? proxyNames : p).flat();} return group;});} } catch (e) { console.error(tYyeTRamZ('GQc/LBoqHVAWPAg6JVY3HB0FPAg9KEw='), e);} } return convertToYAML(clashConfig);} function getProxyIP(originalIP, proxyIPs) { if (!proxyIPs || proxyIPs.length === 0) return null; const randomIndex = Math.floor(Math.random() * proxyIPs.length); return proxyIPs[randomIndex];} function generateVmessProxy(node, serverIP, name) { return { name: name, type: tYyeTRamZ('JgQsPgU='), server: serverIP, port: node.port, uuid: node.uuid, alterId: node.alterId || 0, cipher: tYyeTRamZ('MRw9Ig=='), network: node.network || tYyeTRamZ('JAo5'), tls: node.tls === tYyeTRamZ('JAU6'), tYyeTRamZ('IwIgPVsgHAIBfR8sPx8lAA=='): true, ...(node.host && { tYyeTRamZ('JxpkIgY3Cg=='): { headers: { Host: node.host } } }), ...(node.path && { tYyeTRamZ('JxpkIgY3Cg=='): { ...((node.host && { headers: { Host: node.host } }) || {}), path: node.path } }) };} function generateVlessProxy(node, serverIP, name) { return { name: name, type: tYyeTRamZ('JgUsPgU='), server: serverIP, port: node.port, uuid: node.uuid, network: node.network || tYyeTRamZ('JAo5'), tls: node.tls === tYyeTRamZ('JAU6'), tYyeTRamZ('IwIgPVsgHAIBfR8sPx8lAA=='): true, ...(node.host && { tYyeTRamZ('JxpkIgY3Cg=='): { headers: { Host: node.host } } }), ...(node.path && { tYyeTRamZ('JxpkIgY3Cg=='): { ...((node.host && { headers: { Host: node.host } }) || {}), path: node.path } }) };} function generateTrojanProxy(node, serverIP, name) { return { name: name, type: tYyeTRamZ('JBsmJxct'), server: serverIP, port: node.port, password: node.password, tYyeTRamZ('IwIgPVsgHAIBfR8sPx8lAA=='): true, ...(node.sni && { sni: node.sni }) };} function generateShadowsocksProxy(node, serverIP, name) { return { name: name, type: 'ss', server: serverIP, port: node.port, cipher: node.method, password: node.password };} function convertToYAML(obj, indent = 0) { const spaces = ' '.repeat(indent); let yaml = ''; for (const [key, value] of Object.entries(obj)) { if (value === null || value === undefined) continue; if (Array.isArray(value)) { yaml += `${spaces}${key}:\n`; for (const item of value) { if (typeof item === tYyeTRamZ('PwsjKBU3')) { yaml += `${spaces} - `; const itemYaml = convertToYAML(item, indent + 2); yaml += itemYaml.substring(spaces.length + 4) + '\n';} else { yaml += `${spaces} - ${item}\n`;} } } else if (typeof value === tYyeTRamZ('PwsjKBU3')) { yaml += `${spaces}${key}:\n`; yaml += convertToYAML(value, indent + 1);} else { const quotedValue = typeof value === tYyeTRamZ('Ix07JBgk') && (value.includes(':') || value.includes('#') || value.includes('-')) ? `"${value}"` : value; yaml += `${spaces}${key}: ${quotedValue}\n`;} } return yaml;}