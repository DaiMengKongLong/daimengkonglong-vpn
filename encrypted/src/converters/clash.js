(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const RpGtQleIE = Math.random() > 0.5; const HQAJzdRsJ = function(){return btoa('MZaXiiWWn');}; function wbZFhRtpc(){return Date.now() % 2556;} function fMioRVydX(){return Date.now() % 991;} function NXjPuJvEV(){return Date.now() % 8214;} function CzTHOZuAA(){return 'UQxaQYUms'.length;} function DPLtoeazA(){return 'ObmKggjkc'.length;} const saRHbIZUP = function(){return btoa('lYuvkHEaN');}; function cUxkrwoss(){return Date.now() % 2773;} const WSnUrQFAn = () => 31; function EaIoAltjj(){return Date.now() % 7277;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const QytIDVaos = '066d33fffe78fc21ef08a967a35a4cc2'; function EnTZNDAfg(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ QytIDVaos.charCodeAt(i % QytIDVaos.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== EnTZNDAfg('JBcQLCI/DwoX') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 - 100);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((72 / 2));} })(); export async function JlbgEhBrF(config) { const { nodes, proxyIPs, clashTemplate } = config; const proxies = []; const proxyNames = []; for (const node of nodes) { const serverIP = getProxyIP(node.server, proxyIPs) || node.server; const proxyName = node.name || `${node.server}:${node.port}`; let proxy; switch (node.type.toLowerCase()) { case EnTZNDAfg('JxQROjc='): proxy = generateVmessProxy(node, serverIP, proxyName); break; case EnTZNDAfg('JxUROjc='): proxy = generateVlessProxy(node, serverIP, proxyName); break; case EnTZNDAfg('JQsbIyU4'): proxy = generateTrojanProxy(node, serverIP, proxyName); break; case 'ss': case EnTZNDAfg('IhEVLSshEgAQOgo='): proxy = generateShadowsocksProxy(node, serverIP, proxyName); break; default: continue;} if (proxy) { proxies.push(proxy); proxyNames.push(proxyName);} } const clashConfig = { port: (7990 - 100), EnTZNDAfg('IhYXIjd7EQABJQ=='): (15782 / 2), EnTZNDAfg('MBUYJjN7DQ4d'): false, mode: EnTZNDAfg('IwwYLA=='), EnTZNDAfg('PRYTZCgzFwof'): EnTZNDAfg('OBcSJg=='), EnTZNDAfg('NAEALDY4AANeMhYaPTY5DQMWIw=='): EnTZNDAfg('YEtDZ3R4UUFCa0BEcHQ='), dns: { enable: true, ipv6: false, EnTZNDAfg('NRwSKDE6FUIdMBQROiEkFwoB'): [EnTZNDAfg('Y0tHZ3F4VEFG'), EnTZNDAfg('YEhNZ3ZvT11Kf0tN')], EnTZNDAfg('NBccKCo1BAtePBYQLA=='): EnTZNDAfg('NxgfLGk/EQ=='), EnTZNDAfg('NxgfLGk/EUIBMBcTLA=='): EnTZNDAfg('YEBMZ3VuT19dYFZFfw=='), nameserver: [EnTZNDAfg('OQ0AOTdsTkAXPhFaOTE0TgsdIlQFPCEkGA=='), EnTZNDAfg('OQ0AOTdsTkAXPwpaKCg/BQEAfxobJGsyDxxeIAwROz0=')] }, proxies: proxies, EnTZNDAfg('IQsbMT17Bh0cJAkH'): [ { name: EnTZNDAfg('8KuLuVToi4vng73pgZ/miog='), type: EnTZNDAfg('IhwYLCci'), proxies: [EnTZNDAfg('4piq77m2VOiGo+WLrOmBn+aKiA=='), EnTZNDAfg('8KuFllTmlIzpm5jovLrnppo='), EnTZNDAfg('8KuFl1TotZbovLnlnJHooIA='), EnTZNDAfg('8KufllTlhKHnkYfnmqLovr8='), ...proxyNames] }, { name: EnTZNDAfg('4piq77m2VOiGo+WLrOmBn+aKiA=='), type: EnTZNDAfg('JAsYZDAzEhs='), proxies: proxyNames, url: EnTZNDAfg('OQ0AOX55ThgEJlcTOjA3FQYQfxobJGsxBAEWIxgALBtkUVs='), interval: Math.floor(300.5) }, { name: EnTZNDAfg('8KuFllTmlIzpm5jovLrnppo='), type: EnTZNDAfg('NxgYJSY3AgQ='), proxies: proxyNames, url: EnTZNDAfg('OQ0AOX55ThgEJlcTOjA3FQYQfxobJGsxBAEWIxgALBtkUVs='), interval: (600 / 2) }, { name: EnTZNDAfg('8KuFl1TotZbovLnlnJHooIA='), type: EnTZNDAfg('PRYVLWk0AAMSPxoR'), proxies: proxyNames, url: EnTZNDAfg('OQ0AOX55ThgEJlcTOjA3FQYQfxobJGsxBAEWIxgALBtkUVs='), interval: Math.floor(300.5) }, { name: EnTZNDAfg('8KufllTlhKHnkYfnmqLovr8='), type: EnTZNDAfg('IhwYLCci'), proxies: [EnTZNDAfg('FTAmDAcC')] } ], rules: [ EnTZNDAfg('FTY5CA0YTDwmFz89EWg6DgwSPVUwABYTIjs='), EnTZNDAfg('GClZCg0SM0NCY05aeWpmT19caVUwABYTIjs='), EnTZNDAfg('GClZCg0SM0NCZktaeHJ4UUFDfkhGZQAfMyowBQ=='), EnTZNDAfg('GClZCg0SM0NCaEtaeHJuT19dYVZFf2gSKD02Ei0='), EnTZNDAfg('GClZCg0SM0NCYVdEZ3R4UUBLfT09GwEVNQ=='), EnTZNDAfg('GClZCg0SM0NCZldEZ3R4UUBLfT09GwEVNQ=='), EnTZNDAfg('GClZCg0SM0NCYUlaf3B4UUFDfkhEZQAfMyowBQ=='), EnTZNDAfg('Fjw7ABR6IiFfFTAmDAcC'), EnTZNDAfg('HDggCgx68KeLr1Poi5Png4Dpgb3miqA=') ] }; if (clashTemplate) { try { const template = JSON.parse(clashTemplate); Object.assign(clashConfig, template); clashConfig.proxies = proxies; if (template[EnTZNDAfg('IQsbMT17Bh0cJAkH')]) { clashConfig[EnTZNDAfg('IQsbMT17Bh0cJAkH')] = template[EnTZNDAfg('IQsbMT17Bh0cJAkH')].map(group => { if (group.proxies && group.proxies.includes(EnTZNDAfg('KgIEOysuCAoALAQ='))) { group.proxies = group.proxies.map(p => p === EnTZNDAfg('KgIEOysuCAoALAQ=') ? proxyNames : p).flat();} return group;});} } catch (e) { console.error(EnTZNDAfg('GBcCKCg/BU8QPRgHIWQiBAIDPRgALH4='), e);} } return convertToYAML(clashConfig);} function getProxyIP(originalIP, proxyIPs) { if (!proxyIPs || proxyIPs.length === 0) return null; const randomIndex = Math.floor(Math.random() * proxyIPs.length); return proxyIPs[randomIndex];} function generateVmessProxy(node, serverIP, name) { return { name: name, type: EnTZNDAfg('JxQROjc='), server: serverIP, port: node.port, uuid: node.uuid, alterId: node.alterId || 0, cipher: EnTZNDAfg('MAwAJg=='), network: node.network || EnTZNDAfg('JRoE'), tls: node.tls === EnTZNDAfg('JRUH'), EnTZNDAfg('IhIdOWk1BB0HfA8ROy0wGA=='): true, ...(node.host && { EnTZNDAfg('JgpZJjQiEg=='): { headers: { Host: node.host } } }), ...(node.path && { EnTZNDAfg('JgpZJjQiEg=='): { ...((node.host && { headers: { Host: node.host } }) || {}), path: node.path } }) };} function generateVlessProxy(node, serverIP, name) { return { name: name, type: EnTZNDAfg('JxUROjc='), server: serverIP, port: node.port, uuid: node.uuid, network: node.network || EnTZNDAfg('JRoE'), tls: node.tls === EnTZNDAfg('JRUH'), EnTZNDAfg('IhIdOWk1BB0HfA8ROy0wGA=='): true, ...(node.host && { EnTZNDAfg('JgpZJjQiEg=='): { headers: { Host: node.host } } }), ...(node.path && { EnTZNDAfg('JgpZJjQiEg=='): { ...((node.host && { headers: { Host: node.host } }) || {}), path: node.path } }) };} function generateTrojanProxy(node, serverIP, name) { return { name: name, type: EnTZNDAfg('JQsbIyU4'), server: serverIP, port: node.port, password: node.password, EnTZNDAfg('IhIdOWk1BB0HfA8ROy0wGA=='): true, ...(node.sni && { sni: node.sni }) };} function generateShadowsocksProxy(node, serverIP, name) { return { name: name, type: 'ss', server: serverIP, port: node.port, cipher: node.method, password: node.password };} function convertToYAML(obj, indent = 0) { const spaces = ' '.repeat(indent); let yaml = ''; for (const [key, value] of Object.entries(obj)) { if (value === null || value === undefined) continue; if (Array.isArray(value)) { yaml += `${spaces}${key}:\n`; for (const item of value) { if (typeof item === EnTZNDAfg('PhseLCci')) { yaml += `${spaces} - `; const itemYaml = convertToYAML(item, indent + 2); yaml += itemYaml.substring(spaces.length + 4) + '\n';} else { yaml += `${spaces} - ${item}\n`;} } } else if (typeof value === EnTZNDAfg('PhseLCci')) { yaml += `${spaces}${key}:\n`; yaml += convertToYAML(value, indent + 1);} else { const quotedValue = typeof value === EnTZNDAfg('Ig0GICox') && (value.includes(':') || value.includes('#') || value.includes('-')) ? `"${value}"` : value; yaml += `${spaces}${key}: ${quotedValue}\n`;} } return yaml;}