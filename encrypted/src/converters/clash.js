(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const fbxhFoilJ = Math.random() > 0.5; function ikmwfgNUz(){return Date.now() % 6883;} const tAwJOnvnP = function(){return btoa('pYtQCiXWK');}; function lCFGuBdmL(){return Math.random() * 31;} function vpZQCkjRO(){return Date.now() % 5855;} function yyohyBlKF(){return Date.now() % 6707;} function JeTlPSDJY(){return 'BazIqiVAJ'.length;} function DCIBwpFPI(){return 'TYYIXRPqx'.length;} const nKdazudXA = function(){return btoa('bRRfPTPRB');}; function JdyoVdPBw(){return Math.random() * 803;} const heRHiVSsu = function(){return btoa('AmYivPAst');}; const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const yUCANMawG = '7fc7e0a1488f813552adefd3a20eb487'; function DSkkFWWWf(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ yUCANMawG.charCodeAt(i % yUCANMawG.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== DSkkFWWWf('DDsnJCgkDxIj') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 - 100);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString(Math.floor(36.5));} })(); export async function SaNPqiUKo(config) { const { nodes, proxyIPs, clashTemplate } = config; const proxies = []; const proxyNames = []; for (const node of nodes) { const serverIP = getProxyIP(node.server, proxyIPs) || node.server; const proxyName = node.name || `${node.server}:${node.port}`; let proxy; switch (node.type.toLowerCase()) { case DSkkFWWWf('DzgmMj0='): proxy = generateVmessProxy(node, serverIP, proxyName); break; case DSkkFWWWf('DzkmMj0='): proxy = generateVlessProxy(node, serverIP, proxyName); break; case DSkkFWWWf('DScsKy8j'): proxy = generateTrojanProxy(node, serverIP, proxyName); break; case 'ss': case DSkkFWWWf('Cj0iJSE6EhgkEiY='): proxy = generateShadowsocksProxy(node, serverIP, proxyName); break; default: continue;} if (proxy) { proxies.push(proxy); proxyNames.push(proxyName);} } const clashConfig = { port: Math.floor(7890.5), DSkkFWWWf('CjogKj1gERg1DQ=='): (15782 / 2), DSkkFWWWf('GDkvLjlgDRYp'): false, mode: DSkkFWWWf('CyAvJA=='), DSkkFWWWf('FTokbCIoFxIr'): DSkkFWWWf('EDslLg=='), DSkkFWWWf('HC03JDwjABtqGjotNTwiDRsiCw=='): DSkkFWWWf('SGd0b35jUVl2Q2xzeH4='), dns: { enable: true, ipv6: false, DSkkFWWWf('HTAlIDshFVopGDgmMis/FxI1'): [DSkkFWWWf('S2dwb3tjVFly'), DSkkFWWWf('SGR6b3x0T0V+V2d6')], DSkkFWWWf('HDsrICAuBBNqFDonJA=='): DSkkFWWWf('HzQoJGMkEQ=='), DSkkFWWWf('HzQoJGMkEVo1GDskJA=='): DSkkFWWWf('SGx7b391T0dpSHpydw=='), nameserver: [DSkkFWWWf('ESE3MT13TlgjFj1tMTsvThMpCngyNCs/GA=='), DSkkFWWWf('ESE3MT13TlgjFyZtICIkBRk0VzYsLGEpDwRqCCAmMzc=')] }, proxies: proxies, DSkkFWWWf('CScsOTdgBgUoDCUw'): [ { name: DSkkFWWWf('8KGLlWPoi4Png7fpgYTmiog='), type: DSkkFWWWf('CjAvJC05'), proxies: [DSkkFWWWf('4piC77maY+iGq+WLpumBhOaKiA=='), DSkkFWWWf('8KGFumPmlITpm5LovKHnppo='), DSkkFWWWf('8KGFu2PotZ7ovLPlnIrooIA='), DSkkFWWWf('8KGfumPlhKnnkY3nmrnovr8='), ...proxyNames] }, { name: DSkkFWWWf('4piC77maY+iGq+WLpumBhOaKiA=='), type: DSkkFWWWf('DCcvbDooEgM='), proxies: proxyNames, url: DSkkFWWWf('ESE3MXRiTgAwDnskMjosFR4kVzYsLGEqBBkiCzQ3JBF/UUM='), interval: (350 - 50) }, { name: DSkkFWWWf('8KGFumPmlITpm5LovKHnppo='), type: DSkkFWWWf('HzQvLSwsAhw='), proxies: proxyNames, url: DSkkFWWWf('ESE3MXRiTgAwDnskMjosFR4kVzYsLGEqBBkiCzQ3JBF/UUM='), interval: (350 - 50) }, { name: DSkkFWWWf('8KGFu2PotZ7ovLPlnIrooIA='), type: DSkkFWWWf('FToiJWMvABsmFzYm'), proxies: proxyNames, url: DSkkFWWWf('ESE3MXRiTgAwDnskMjosFR4kVzYsLGEqBBkiCzQ3JBF/UUM='), interval: (600 / 2) }, { name: DSkkFWWWf('8KGfumPlhKnnkY3nmrnovr8='), type: DSkkFWWWf('CjAvJC05'), proxies: [DSkkFWWWf('PRwRBA0Z')] } ], rules: [ DSkkFWWWf('PRoOAAcDTCQSPxMKGWIhDhQmFXkHCBwIIiM='), DSkkFWWWf('MAVuAgcJM1t2S2JtcWB9T0doQXkHCBwIIiM='), DSkkFWWWf('MAVuAgcJM1t2TmdtcHhjUVl3VmRxbQoEMzIELQ=='), DSkkFWWWf('MAVuAgcJM1t2QGdtcHh1T0dpSXpyd2IJKCUCOgE='), DSkkFWWWf('MAVuAgcJM1t2SXtzb35jUVh/VREKEwsONQ=='), DSkkFWWWf('MAVuAgcJM1t2Tntzb35jUVh/VREKEwsONQ=='), DSkkFWWWf('MAVuAgcJM1t2SWVtd3pjUVl3VmRzbQoEMzIELQ=='), DSkkFWWWf('PhAMCB5hIjlrPRwRBA0Z'), DSkkFWWWf('NBQXAgZh8KeLt2foi7vng6zpgYrmiqg=') ] }; if (clashTemplate) { try { const template = JSON.parse(clashTemplate); Object.assign(clashConfig, template); clashConfig.proxies = proxies; if (template[DSkkFWWWf('CScsOTdgBgUoDCUw')]) { clashConfig[DSkkFWWWf('CScsOTdgBgUoDCUw')] = template[DSkkFWWWf('CScsOTdgBgUoDCUw')].map(group => { if (group.proxies && group.proxies.includes(DSkkFWWWf('Ai4zMyE1CBI0BCg='))) { group.proxies = group.proxies.map(p => p === DSkkFWWWf('Ai4zMyE1CBI0BCg=') ? proxyNames : p).flat();} return group;});} } catch (e) { console.error(DSkkFWWWf('MDs1ICIkBVckFTQwKW45BBo3FTQ3JHQ='), e);} } return convertToYAML(clashConfig);} function getProxyIP(originalIP, proxyIPs) { if (!proxyIPs || proxyIPs.length === 0) return null; const randomIndex = Math.floor(Math.random() * proxyIPs.length); return proxyIPs[randomIndex];} function generateVmessProxy(node, serverIP, name) { return { name: name, type: DSkkFWWWf('DzgmMj0='), server: serverIP, port: node.port, uuid: node.uuid, alterId: node.alterId || 0, cipher: DSkkFWWWf('GCA3Lg=='), network: node.network || DSkkFWWWf('DTYz'), tls: node.tls === DSkkFWWWf('DTkw'), DSkkFWWWf('Cj4qMWMuBAUzVCMmMycrGA=='): true, ...(node.host && { DSkkFWWWf('DiZuLj45Eg=='): { headers: { Host: node.host } } }), ...(node.path && { DSkkFWWWf('DiZuLj45Eg=='): { ...((node.host && { headers: { Host: node.host } }) || {}), path: node.path } }) };} function generateVlessProxy(node, serverIP, name) { return { name: name, type: DSkkFWWWf('DzkmMj0='), server: serverIP, port: node.port, uuid: node.uuid, network: node.network || DSkkFWWWf('DTYz'), tls: node.tls === DSkkFWWWf('DTkw'), DSkkFWWWf('Cj4qMWMuBAUzVCMmMycrGA=='): true, ...(node.host && { DSkkFWWWf('DiZuLj45Eg=='): { headers: { Host: node.host } } }), ...(node.path && { DSkkFWWWf('DiZuLj45Eg=='): { ...((node.host && { headers: { Host: node.host } }) || {}), path: node.path } }) };} function generateTrojanProxy(node, serverIP, name) { return { name: name, type: DSkkFWWWf('DScsKy8j'), server: serverIP, port: node.port, password: node.password, DSkkFWWWf('Cj4qMWMuBAUzVCMmMycrGA=='): true, ...(node.sni && { sni: node.sni }) };} function generateShadowsocksProxy(node, serverIP, name) { return { name: name, type: 'ss', server: serverIP, port: node.port, cipher: node.method, password: node.password };} function convertToYAML(obj, indent = 0) { const spaces = ' '.repeat(indent); let yaml = ''; for (const [key, value] of Object.entries(obj)) { if (value === null || value === undefined) continue; if (Array.isArray(value)) { yaml += `${spaces}${key}:\n`; for (const item of value) { if (typeof item === DSkkFWWWf('FjcpJC05')) { yaml += `${spaces} - `; const itemYaml = convertToYAML(item, indent + 2); yaml += itemYaml.substring(spaces.length + 4) + '\n';} else { yaml += `${spaces} - ${item}\n`;} } } else if (typeof value === DSkkFWWWf('FjcpJC05')) { yaml += `${spaces}${key}:\n`; yaml += convertToYAML(value, indent + 1);} else { const quotedValue = typeof value === DSkkFWWWf('CiExKCAq') && (value.includes(':') || value.includes('#') || value.includes('-')) ? `"${value}"` : value; yaml += `${spaces}${key}: ${quotedValue}\n`;} } return yaml;}