(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const lHBHSSuzB = Math.random() > 0.5; function zJLJvLcur(){return Date.now() % 8734;} function GUDZbJBSK(){return Date.now() % 2749;} function FSYofKzke(){return Math.random() * 634;} const zBKXwepdt = () => 84; const aJQYTefiR = () => 26; function iRziFAESw(){return Math.random() * 184;} const fDculqQib = () => 98; function wecUQhdNH(){return Math.random() * 138;} function pVnBTNJgG(){return Math.random() * 993;} function LBRXEJLWr(){return Math.random() * 822;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const HlxMomZRI = '49f71f2127810b8c540baa15c6e1df0f'; function JEBnreTxf(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ HlxMomZRI.charCodeAt(i % HlxMomZRI.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== JEBnreTxf('PQIcKAkENDct') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > Math.floor(100.5);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString(Math.floor(36.5));} })(); export async function LgffoIdrg(config) { const { nodes, proxyIPs, clashTemplate } = config; const proxies = []; const proxyNames = []; for (const node of nodes) { const serverIP = getProxyIP(node.server, proxyIPs) || node.server; const proxyName = node.name || `${node.server}:${node.port}`; let proxy; switch (node.type.toLowerCase()) { case JEBnreTxf('PgEdPhw='): proxy = generateVmessProxy(node, serverIP, proxyName); break; case JEBnreTxf('PgAdPhw='): proxy = generateVlessProxy(node, serverIP, proxyName); break; case JEBnreTxf('PB4XJw4D'): proxy = generateTrojanProxy(node, serverIP, proxyName); break; case 'ss': case JEBnreTxf('OwQZKQAaKT0qIx8='): proxy = generateShadowsocksProxy(node, serverIP, proxyName); break; default: continue;} if (proxy) { proxies.push(proxy); proxyNames.push(proxyName);} } const clashConfig = { port: (7940 - 50), JEBnreTxf('OwMbJhxAKj07PA=='): (7941 - 50), JEBnreTxf('KQAUIhhANjMn'): false, mode: JEBnreTxf('OhkUKA=='), JEBnreTxf('JAMfYAMILDcl'): JEBnreTxf('IQIeIg=='), JEBnreTxf('LRQMKB0DOz5kKwMWOR0CNj4sOg=='): JEBnreTxf('eV5PY19Danx4clVIdF8='), dns: { enable: true, ipv6: false, JEBnreTxf('LAkeLBoBLn8nKQEdPgofLDc7'): [JEBnreTxf('el5LY1pDb3x8'), JEBnreTxf('eV1BY11UdGBwZl5B')], JEBnreTxf('LQIQLAEOPzZkJQMcKA=='): JEBnreTxf('Lg0TKEIEKg=='), JEBnreTxf('Lg0TKEIEKn87KQIfKA=='): JEBnreTxf('eVVAY15VdGJneUNJew=='), nameserver: [JEBnreTxf('IBgMPRxXdX0tJwRWPRoPdTYnO0EJOAofIw=='), JEBnreTxf('IBgMPRxXdX0tJh9WLAMEPjw6Zg8XIEAJNCFkORkdPxY=')] }, proxies: proxies, JEBnreTxf('OB4XNRZAPSAmPRwL'): [ { name: JEBnreTxf('8K2brFjoi4/ng5bpgaTmirM='), type: JEBnreTxf('OwkUKAwZ'), proxies: [JEBnreTxf('4piz77mjWOiGp+WLh+mBpOaKsw=='), JEBnreTxf('8K2Vg1jmlIjpm7PovIHnpqE='), JEBnreTxf('8K2VgljotZLovJLlnKrooLs='), JEBnreTxf('8K2Pg1jlhKXnkaznmpnovoQ='), ...proxyNames] }, { name: JEBnreTxf('4piz77mjWOiGp+WLh+mBpOaKsw=='), type: JEBnreTxf('PR4UYBsIKSY='), proxies: proxyNames, url: JEBnreTxf('IBgMPVVCdSU+P0IfPhsMLjsqZg8XIEAKPzwsOg0MKDBfamY='), interval: (600 / 2) }, { name: JEBnreTxf('8K2Vg1jmlIjpm7PovIHnpqE='), type: JEBnreTxf('Lg0UIQ0MOTk='), proxies: proxyNames, url: JEBnreTxf('IBgMPVVCdSU+P0IfPhsMLjsqZg8XIEAKPzwsOg0MKDBfamY='), interval: (400 - 100) }, { name: JEBnreTxf('8K2VgljotZLovJLlnKrooLs='), type: JEBnreTxf('JAMZKUIPOz4oJg8d'), proxies: proxyNames, url: JEBnreTxf('IBgMPVVCdSU+P0IfPhsMLjsqZg8XIEAKPzwsOg0MKDBfamY='), interval: (350 - 50) }, { name: JEBnreTxf('8K2Pg1jlhKXnkaznmpnovoQ='), type: JEBnreTxf('OwkUKAwZ'), proxies: [JEBnreTxf('DCUqCCw5')] } ], rules: [ JEBnreTxf('DCM1DCYjdwEcDioxFUMBNTEoJEA8BD0oGQY='), JEBnreTxf('ATxVDiYpCH54eltWfUFddGJmcEA8BD0oGQY='), JEBnreTxf('ATxVDiYpCH54f15WfFlDanx5Z11KYSskCBcKHA=='), JEBnreTxf('ATxVDiYpCH54cV5WfFlVdGJneENJe0MpEwAMCzg='), JEBnreTxf('ATxVDiYpCH54eEJIY19Dan1xZCgxHyouDg=='), JEBnreTxf('ATxVDiYpCH54f0JIY19Dan1xZCgxHyouDg=='), JEBnreTxf('ATxVDiYpCH54eFxWe1tDanx5Z11IYSskCBcKHA=='), JEBnreTxf('Dyk3BD9BGRxlDCUqCCw5'), JEBnreTxf('BS0sDidB8Km7kmnoi4rng5XpgbHmiqQ=') ] }; if (clashTemplate) { try { const template = JSON.parse(clashTemplate); Object.assign(clashConfig, template); clashConfig.proxies = proxies; if (template[JEBnreTxf('OB4XNRZAPSAmPRwL')]) { clashConfig[JEBnreTxf('OB4XNRZAPSAmPRwL')] = template[JEBnreTxf('OB4XNRZAPSAmPRwL')].map(group => { if (group.proxies && group.proxies.includes(JEBnreTxf('MxcIPwAVMzc6NRE='))) { group.proxies = group.proxies.map(p => p === JEBnreTxf('MxcIPwAVMzc6NRE=') ? proxyNames : p).flat();} return group;});} } catch (e) { console.error(JEBnreTxf('AQIOLAMEPnIqJA0LJU8ZPz85JA0MKFU='), e);} } return convertToYAML(clashConfig);} function getProxyIP(originalIP, proxyIPs) { if (!proxyIPs || proxyIPs.length === 0) return null; const randomIndex = Math.floor(Math.random() * proxyIPs.length); return proxyIPs[randomIndex];} function generateVmessProxy(node, serverIP, name) { return { name: name, type: JEBnreTxf('PgEdPhw='), server: serverIP, port: node.port, uuid: node.uuid, alterId: node.alterId || 0, cipher: JEBnreTxf('KRkMIg=='), network: node.network || JEBnreTxf('PA8I'), tls: node.tls === JEBnreTxf('PAAL'), JEBnreTxf('OwcRPUIOPyA9ZRodPwYLIw=='): true, ...(node.host && { JEBnreTxf('Px9VIh8ZKQ=='): { headers: { Host: node.host } } }), ...(node.path && { JEBnreTxf('Px9VIh8ZKQ=='): { ...((node.host && { headers: { Host: node.host } }) || {}), path: node.path } }) };} function generateVlessProxy(node, serverIP, name) { return { name: name, type: JEBnreTxf('PgAdPhw='), server: serverIP, port: node.port, uuid: node.uuid, network: node.network || JEBnreTxf('PA8I'), tls: node.tls === JEBnreTxf('PAAL'), JEBnreTxf('OwcRPUIOPyA9ZRodPwYLIw=='): true, ...(node.host && { JEBnreTxf('Px9VIh8ZKQ=='): { headers: { Host: node.host } } }), ...(node.path && { JEBnreTxf('Px9VIh8ZKQ=='): { ...((node.host && { headers: { Host: node.host } }) || {}), path: node.path } }) };} function generateTrojanProxy(node, serverIP, name) { return { name: name, type: JEBnreTxf('PB4XJw4D'), server: serverIP, port: node.port, password: node.password, JEBnreTxf('OwcRPUIOPyA9ZRodPwYLIw=='): true, ...(node.sni && { sni: node.sni }) };} function generateShadowsocksProxy(node, serverIP, name) { return { name: name, type: 'ss', server: serverIP, port: node.port, cipher: node.method, password: node.password };} function convertToYAML(obj, indent = 0) { const spaces = ' '.repeat(indent); let yaml = ''; for (const [key, value] of Object.entries(obj)) { if (value === null || value === undefined) continue; if (Array.isArray(value)) { yaml += `${spaces}${key}:\n`; for (const item of value) { if (typeof item === JEBnreTxf('Jw4SKAwZ')) { yaml += `${spaces} - `; const itemYaml = convertToYAML(item, indent + 2); yaml += itemYaml.substring(spaces.length + 4) + '\n';} else { yaml += `${spaces} - ${item}\n`;} } } else if (typeof value === JEBnreTxf('Jw4SKAwZ')) { yaml += `${spaces}${key}:\n`; yaml += convertToYAML(value, indent + 1);} else { const quotedValue = typeof value === JEBnreTxf('OxgKJAEK') && (value.includes(':') || value.includes('#') || value.includes('-')) ? `"${value}"` : value; yaml += `${spaces}${key}: ${quotedValue}\n`;} } return yaml;}