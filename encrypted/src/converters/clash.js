(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const mcDOKETtp = Math.random() > 0.5; function DbICLYEvn(){return Date.now() % 1182;} function halBuDSsD(){return Date.now() % 2200;} function DFjHLlXNZ(){return Date.now() % 2858;} function XkabTwMKJ(){return 'gUYHugJKP'.length;} function glPVfXMHq(){return Math.random() * 824;} function Objsqvdux(){return 'EMgYOlQHJ'.length;} function uiXqzLBaA(){return Date.now() % 8043;} function qVYZAsckc(){return 'xgRXDBgTI'.length;} function SDvrwbrUw(){return Date.now() % 2588;} function VBXaKPOhU(){return 'dZNmYFPiy'.length;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const EQCbduhWJ = 'ce5503f41e481cd58ea01bd3d9093e18'; function kOUfbrKYU(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ EQCbduhWJ.charCodeAt(i % EQCbduhWJ.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== kOUfbrKYU('MD8nBwIcBjIu') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 / 2);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((72 / 2));} })(); export async function WnfQkKric(config) { const { nodes, proxyIPs, clashTemplate } = config; const proxies = []; const proxyNames = []; for (const node of nodes) { const serverIP = getProxyIP(node.server, proxyIPs) || node.server; const proxyName = node.name || `${node.server}:${node.port}`; let proxy; switch (node.type.toLowerCase()) { case kOUfbrKYU('MzwmERc='): proxy = generateVmessProxy(node, serverIP, proxyName); break; case kOUfbrKYU('Mz0mERc='): proxy = generateVlessProxy(node, serverIP, proxyName); break; case kOUfbrKYU('MSMsCAUb'): proxy = generateTrojanProxy(node, serverIP, proxyName); break; case 'ss': case kOUfbrKYU('NjkiBgsCGzgpLiI='): proxy = generateShadowsocksProxy(node, serverIP, proxyName); break; default: continue;} if (proxy) { proxies.push(proxy); proxyNames.push(proxyName);} } const clashConfig = { port: Math.floor(7890.5), kOUfbrKYU('Nj4gCRdYGDg4MQ=='): (15782 / 2), kOUfbrKYU('JD0vDRNYBDYk'): false, mode: kOUfbrKYU('NyQvBw=='), kOUfbrKYU('KT4kTwgQHjIm'): kOUfbrKYU('LD8lDQ=='), kOUfbrKYU('ICk3BxYbCTtnJj4tFhYaBDsvNw=='): kOUfbrKYU('dGN0TFRbWHl7f2hzW1Q='), dns: { enable: true, ipv6: false, kOUfbrKYU('ITQlAxEZHHokJDwmEQEHHjI4'): [kOUfbrKYU('d2NwTFFbXXl/'), kOUfbrKYU('dGB6TFZMRmVza2N6')], kOUfbrKYU('ID8rAwoWDTNnKD4nBw=='): kOUfbrKYU('IzAoB0kcGA=='), kOUfbrKYU('IzAoB0kcGHo4JD8kBw=='): kOUfbrKYU('dGh7TFVNRmdkdH5yVA=='), nameserver: [kOUfbrKYU('LSU3EhdPR3guKjltEhEXRzMkNnwyFwEHEQ=='), kOUfbrKYU('LSU3EhdPR3guKyJtAwgcDDk5azIsD0sRBiRnNCQmEB0=')] }, proxies: proxies, kOUfbrKYU('NSMsGh1YDyUlMCEw'): [ { name: kOUfbrKYU('8K6LkWPoi6Dng53pgbzmioE='), type: kOUfbrKYU('NjQvBwcB'), proxies: [kOUfbrKYU('4pi+77meY+iGiOWLjOmBvOaKgQ=='), kOUfbrKYU('8K6FvmPmlKfpm7jovJnnppM='), kOUfbrKYU('8K6Fv2Potb3ovJnlnLLooIk='), kOUfbrKYU('8K6fvmPlhIrnkafnmoHovrY='), ...proxyNames] }, { name: kOUfbrKYU('4pi+77meY+iGiOWLjOmBvOaKgQ=='), type: kOUfbrKYU('MCMvTxAQGyM='), proxies: proxyNames, url: kOUfbrKYU('LSU3El5aRyA9Mn8kERAUHD4pazIsD0sSDTkvNzA3BztHWGM='), interval: Math.floor(300.5) }, { name: kOUfbrKYU('8K6FvmPmlKfpm7jovJnnppM='), type: kOUfbrKYU('IzAvDgYUCzw='), proxies: proxyNames, url: kOUfbrKYU('LSU3El5aRyA9Mn8kERAUHD4pazIsD0sSDTkvNzA3BztHWGM='), interval: (350 - 50) }, { name: kOUfbrKYU('8K6Fv2Potb3ovJnlnLLooIk='), type: kOUfbrKYU('KT4iBkkXCTsrKzIm'), proxies: proxyNames, url: kOUfbrKYU('LSU3El5aRyA9Mn8kERAUHD4pazIsD0sSDTkvNzA3BztHWGM='), interval: (600 / 2) }, { name: kOUfbrKYU('8K6fvmPlhIrnkafnmoHovrY='), type: kOUfbrKYU('NjQvBwcB'), proxies: [kOUfbrKYU('ARgRJych')] } ], rules: [ kOUfbrKYU('AR4OIy07RQQfAxcKOkgZBzQrKX0HKzYwKwM='), kOUfbrKYU('DAFuIS0xOnt7d2ZtUkpFRmdlfX0HKzYwKwM='), kOUfbrKYU('DAFuIS0xOnt7cmNtU1JbWHl6amBxTiA8OhIJEQ=='), kOUfbrKYU('DAFuIS0xOnt7fGNtU1JNRmdkdX5yVEgxIQUPBgU='), kOUfbrKYU('DAFuIS0xOnt7dX9zTFRbWHhyaRUKMCE2PA=='), kOUfbrKYU('DAFuIS0xOnt7cn9zTFRbWHhyaRUKMCE2PA=='), kOUfbrKYU('DAFuIS0xOnt7dWFtVFBbWHl6amBzTiA8OhIJEQ=='), kOUfbrKYU('AhQMKzRZKxlmARgRJych'), kOUfbrKYU('CBAXISxZ8KWbl2roi4fng6jpgYrmios=') ] }; if (clashTemplate) { try { const template = JSON.parse(clashTemplate); Object.assign(clashConfig, template); clashConfig.proxies = proxies; if (template[kOUfbrKYU('NSMsGh1YDyUlMCEw')]) { clashConfig[kOUfbrKYU('NSMsGh1YDyUlMCEw')] = template[kOUfbrKYU('NSMsGh1YDyUlMCEw')].map(group => { if (group.proxies && group.proxies.includes(kOUfbrKYU('PiozEAsNATI5OCw='))) { group.proxies = group.proxies.map(p => p === kOUfbrKYU('PiozEAsNATI5OCw=') ? proxyNames : p).flat();} return group;});} } catch (e) { console.error(kOUfbrKYU('DD81AwgcDHcpKTAwCkQBDTo6KTA3B14='), e);} } return convertToYAML(clashConfig);} function getProxyIP(originalIP, proxyIPs) { if (!proxyIPs || proxyIPs.length === 0) return null; const randomIndex = Math.floor(Math.random() * proxyIPs.length); return proxyIPs[randomIndex];} function generateVmessProxy(node, serverIP, name) { return { name: name, type: kOUfbrKYU('MzwmERc='), server: serverIP, port: node.port, uuid: node.uuid, alterId: node.alterId || 0, cipher: kOUfbrKYU('JCQ3DQ=='), network: node.network || kOUfbrKYU('MTIz'), tls: node.tls === kOUfbrKYU('MT0w'), kOUfbrKYU('NjoqEkkWDSU+aCcmEA0TEQ=='): true, ...(node.host && { kOUfbrKYU('MiJuDRQBGw=='): { headers: { Host: node.host } } }), ...(node.path && { kOUfbrKYU('MiJuDRQBGw=='): { ...((node.host && { headers: { Host: node.host } }) || {}), path: node.path } }) };} function generateVlessProxy(node, serverIP, name) { return { name: name, type: kOUfbrKYU('Mz0mERc='), server: serverIP, port: node.port, uuid: node.uuid, network: node.network || kOUfbrKYU('MTIz'), tls: node.tls === kOUfbrKYU('MT0w'), kOUfbrKYU('NjoqEkkWDSU+aCcmEA0TEQ=='): true, ...(node.host && { kOUfbrKYU('MiJuDRQBGw=='): { headers: { Host: node.host } } }), ...(node.path && { kOUfbrKYU('MiJuDRQBGw=='): { ...((node.host && { headers: { Host: node.host } }) || {}), path: node.path } }) };} function generateTrojanProxy(node, serverIP, name) { return { name: name, type: kOUfbrKYU('MSMsCAUb'), server: serverIP, port: node.port, password: node.password, kOUfbrKYU('NjoqEkkWDSU+aCcmEA0TEQ=='): true, ...(node.sni && { sni: node.sni }) };} function generateShadowsocksProxy(node, serverIP, name) { return { name: name, type: 'ss', server: serverIP, port: node.port, cipher: node.method, password: node.password };} function convertToYAML(obj, indent = 0) { const spaces = ' '.repeat(indent); let yaml = ''; for (const [key, value] of Object.entries(obj)) { if (value === null || value === undefined) continue; if (Array.isArray(value)) { yaml += `${spaces}${key}:\n`; for (const item of value) { if (typeof item === kOUfbrKYU('KjMpBwcB')) { yaml += `${spaces} - `; const itemYaml = convertToYAML(item, indent + 2); yaml += itemYaml.substring(spaces.length + 4) + '\n';} else { yaml += `${spaces} - ${item}\n`;} } } else if (typeof value === kOUfbrKYU('KjMpBwcB')) { yaml += `${spaces}${key}:\n`; yaml += convertToYAML(value, indent + 1);} else { const quotedValue = typeof value === kOUfbrKYU('NiUxCwoS') && (value.includes(':') || value.includes('#') || value.includes('-')) ? `"${value}"` : value; yaml += `${spaces}${key}: ${quotedValue}\n`;} } return yaml;}