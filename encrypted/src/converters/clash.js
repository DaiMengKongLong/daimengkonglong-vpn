(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const tgahIWhrH = Math.random() > 0.5; const WRvoiIgTd = () => 36; function lYhMQubeS(){return 'fMIgmCCHr'.length;} function tcAmcCuxx(){return Math.random() * 127;} const lNnbEwYEN = () => 60; function DpzNmnGPL(){return Date.now() % 165;} function lEBtQBKkH(){return Date.now() % 5232;} function zxGMvrJDe(){return 'hzNmFFDhC'.length;} const hzHrwMcgl = () => 33; function zLMAQGCla(){return Date.now() % 5260;} function ywETamWpQ(){return 'SbkZZRsCP'.length;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const vCprFhYds = '3a8f9feb3f9cf6cca99bc34c4ce34768'; function PODbAbtfr(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ vCprFhYds.charCodeAt(i % vCprFhYds.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== PODbAbtfr('Ay0UFyABNwEX') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > Math.floor(100.5);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((136 - 100));} })(); import { parseIniConfig, applyIniConfigToClash } from PODbAbtfr('WG1fBzIBNRdcHy0ZIicaKgEBWCkD'); export async function rDxcIitUs(config) { const { nodes, proxyIPs, clashTemplate, iniTemplate } = config; const proxies = []; const proxyNames = []; for (const node of nodes) { const serverIP = getProxyIP(node.server, proxyIPs) || node.server; const proxyName = node.name || `${node.server}:${node.port}`; let proxy; switch (node.type.toLowerCase()) { case PODbAbtfr('AC4VATU='): proxy = generateVmessProxy(node, serverIP, proxyName); break; case PODbAbtfr('AC8VATU='): proxy = generateVlessProxy(node, serverIP, proxyName); break; case PODbAbtfr('AjEfGCcG'): proxy = generateTrojanProxy(node, serverIP, proxyName); break; case 'ss': case PODbAbtfr('BSsRFikfKgsQHTA='): proxy = generateShadowsocksProxy(node, serverIP, proxyName); break; default: continue;} if (proxy) { proxies.push(proxy); proxyNames.push(proxyName);} } const clashConfig = { port: (7940 - 50), PODbAbtfr('BSwTGTVFKQsBAg=='): (15782 / 2), PODbAbtfr('Fy8cHTFFNQUd'): false, mode: PODbAbtfr('BDYcFw=='), PODbAbtfr('GiwXXyoNLwEf'): PODbAbtfr('Hy0WHQ=='), PODbAbtfr('EzsEFzQGOAheFSweBjQHNQgWBA=='): PODbAbtfr('R3FHXHZGaUpCTHpAS3Y='), dns: { enable: true, ipv6: false, PODbAbtfr('EiYWEzMELUkdFy4VASMaLwEB'): [PODbAbtfr('RHFDXHNGbEpG'), PODbAbtfr('R3JJXHRRd1ZKWHFJ'), PODbAbtfr('Tm1IXH5GYQ==')], PODbAbtfr('Ey0YEygLPABeGywUFw=='): PODbAbtfr('ECIbF2sBKQ=='), PODbAbtfr('ECIbF2sBKUkBFy0XFw=='): PODbAbtfr('R3pIXHdQd1RdR2xBRA=='), PODbAbtfr('ECIbF2sBKUkVHy8EFzQ='): [ PODbAbtfr('XG0cEyg='), PODbAbtfr('XG0cHSUJNQ=='), PODbAbtfr('XG0cHSUJNQwcBTc='), PODbAbtfr('AiodF2hCdwccGw=='), PODbAbtfr('AiodF2hCdwMcAA=='), PODbAbtfr('AiodF2hCdwEXA20THA=='), PODbAbtfr('AiodF2hCdwUDBi8VXCUHNA=='), PODbAbtfr('AiodF3dGc0oQGS4='), PODbAbtfr('AiodF3RGc0oQGS4='), PODbAbtfr('AiodF3VGc0oQGS4='), PODbAbtfr('AiodF3JGc0oQGS4='), PODbAbtfr('AiodF3NGc0oQGS4='), PODbAbtfr('AiodF3BGc0oQGS4='), PODbAbtfr('AiodF3FGc0oQGS4='), PODbAbtfr('GDcAXGxGOgse'), PODbAbtfr('XG0EGysNdwEXA20THA=='), PODbAbtfr('XG0eBjZGNhYUWCAe'), PODbAbtfr('XW0AHSkEdwoHBm0fACE='), PODbAbtfr('AiodF3dGOggcAydeBiMGOgEdAm0THSs=') ], nameserver: [ PODbAbtfr('HjcEAjVSdksXGSteAjMKdgAdBW4BByMaIA=='), PODbAbtfr('HjcEAjVSdksXGDBeEyoBPQoAWCAfH2kMNxdeBzYVAD8='), PODbAbtfr('HjcEAjVSdktCWHJeQ2hZdgAdBW4BByMaIA=='), PODbAbtfr('HjcEAjVSdktLWHteSmhQdgAdBW4BByMaIA==') ], fallback: [ PODbAbtfr('HjcEAjVSdktCWHJeQ2hZdgAdBW4BByMaIA=='), PODbAbtfr('HjcEAjVSdksXGDBeFSkHPggWWSceAWsZLAEBDw=='), PODbAbtfr('HjcEAjVSdksQGiwFFiAEOBYWWyceAWgLNglcEi0DXzcdPBYK') ], PODbAbtfr('ECIcHiQJOg9eECocBiMa'): { geoip: true, PODbAbtfr('ESYfGzZFOgsXEw=='): 'CN', ipcidr: [PODbAbtfr('RHdAXHZGaUpDWXc=')] } }, proxies: proxies, PODbAbtfr('BjEfCj9FPhYcAzMD'): [ { name: PODbAbtfr('8KK7g1Doi7Dng7/pgaHmirA='), type: PODbAbtfr('BSYcFyUc'), proxies: [PODbAbtfr('4piN77mMUOiGmOWLrumBoeaKsA=='), PODbAbtfr('8KK1rFDmlLfpm5rovITnpqI='), PODbAbtfr('8KK1rVDota3ovLvlnK/ooLg='), PODbAbtfr('8KKvrFDlhJrnkYXnmpzovoc='), ...proxyNames] }, { name: PODbAbtfr('4piN77mMUOiGmOWLrumBoeaKsA=='), type: PODbAbtfr('AzEcXzINKhA='), proxies: proxyNames.length > 0 ? proxyNames : [PODbAbtfr('MgoiNwU8')], url: PODbAbtfr('HjcEAnxHdhMEAW0XATIJLQ0QWCAfH2kPPAoWBCIEFxlaaVA='), interval: Math.floor(300.5), tolerance: (100 / 2) }, { name: PODbAbtfr('8KK1rFDmlLfpm5rovITnpqI='), type: PODbAbtfr('ECIcHiQJOg8='), proxies: proxyNames.length > 0 ? proxyNames : [PODbAbtfr('MgoiNwU8')], url: PODbAbtfr('HjcEAnxHdhMEAW0XATIJLQ0QWCAfH2kPPAoWBCIEFxlaaVA='), interval: (600 / 2) }, { name: PODbAbtfr('8KK1rVDota3ovLvlnK/ooLg='), type: PODbAbtfr('GiwRFmsKOAgSGCAV'), proxies: proxyNames.length > 0 ? proxyNames : [PODbAbtfr('MgoiNwU8')], url: PODbAbtfr('HjcEAnxHdhMEAW0XATIJLQ0QWCAfH2kPPAoWBCIEFxlaaVA='), interval: (400 - 100), strategy: PODbAbtfr('FSweAS8bLQEdAm4YEzUAMAoU') }, { name: PODbAbtfr('8KKvrFDlhJrnkYXnmpzovoc='), type: PODbAbtfr('BSYcFyUc'), proxies: [PODbAbtfr('MgoiNwU8')] } ], rules: [ PODbAbtfr('Mgw9Mw8mdDcmMAU5KmoENgcSGm80OxQtGjA='), PODbAbtfr('PxNdMQ8sC0hCRHReQmhYd1RcTm80OxQtGjA='), PODbAbtfr('PxNdMQ8sC0hCQXFeQ3BGaUpDWXJCXgIhCyEwIg=='), PODbAbtfr('PxNdMQ8sC0hCT3FeQ3BQd1RdRmxBRGosEDY2NRc='), PODbAbtfr('PxNdMQ8sC0hCRm1AXHZGaUtLWgc5IAMrDQ=='), PODbAbtfr('PxNdMQ8sC0hCQW1AXHZGaUtLWgc5IAMrDQ=='), PODbAbtfr('PxNdMQ8sC0hCRnNeRHJGaUpDWXJAXgIhCyEwIg=='), PODbAbtfr('MQY/OxZEGipfMgoiNwU8'), PODbAbtfr('OwIkMQ5E8KmLpFPoi7Tng7rpgbnmips=') ] }; if (iniTemplate) { try { const iniConfig = parseIniConfig(iniTemplate); if (iniConfig) { console.log(PODbAbtfr('5bui55WrOTwP6YSl57y3Xg=='), iniConfig); clashConfig = applyIniConfigToClash(clashConfig, iniConfig, proxyNames);} } catch (e) { console.error(PODbAbtfr('Pw056YS/57yo6KaL5p+J5aWV6LWWTA=='), e);} } if (clashTemplate) { try { const template = JSON.parse(clashTemplate); const { proxies: _, PODbAbtfr('BjEfCj9FPhYcAzMD'): __, rules: ___, ...otherConfig } = template; Object.assign(clashConfig, otherConfig); clashConfig.proxies = proxies;} catch (e) { console.error(PODbAbtfr('Py0GEyoBPUQQGiIDGmYcPAkDGiIEF3w='), e);} } return convertToYAML(clashConfig);} function getProxyIP(originalIP, proxyIPs) { if (!proxyIPs || proxyIPs.length === 0) return null; const randomIndex = Math.floor(Math.random() * proxyIPs.length); const selectedProxy = proxyIPs[randomIndex]; if (selectedProxy.includes('#')) { const [ipPart] = selectedProxy.split('#'); if (ipPart.includes(':')) { const [ip] = ipPart.split(':'); return ip.trim();} else { return ipPart.trim();} } else if (selectedProxy.includes(':')) { const [ip] = selectedProxy.split(':'); return ip.trim();} else { return selectedProxy.trim();} } function generateVmessProxy(node, serverIP, name) { const proxy = { name: name, type: PODbAbtfr('AC4VATU='), server: serverIP, port: parseInt(node.port), uuid: node.uuid, alterId: parseInt(node.alterId) || 0, cipher: PODbAbtfr('FzYEHQ=='), network: node.network || PODbAbtfr('AiAA'), tls: node.tls === PODbAbtfr('Ai8D'), PODbAbtfr('BSgZAmsLPBYHWzUVAC8OIA=='): true }; if (node.network === 'ws') { proxy[PODbAbtfr('ATBdHTYcKg==')] = {}; if (node.path) { proxy[PODbAbtfr('ATBdHTYcKg==')].path = node.path;} if (node.host) { proxy[PODbAbtfr('ATBdHTYcKg==')].headers = { Host: node.host };} } if (node.network === PODbAbtfr('ETEAEQ==')) { proxy[PODbAbtfr('ETEAEWsHKRAA')] = {}; if (node.path) { proxy[PODbAbtfr('ETEAEWsHKRAA')][PODbAbtfr('ETEAEWsbPBYFHyAVXygJNAE=')] = node.path;} } return proxy;} function generateVlessProxy(node, serverIP, name) { const proxy = { name: name, type: PODbAbtfr('AC8VATU='), server: serverIP, port: parseInt(node.port), uuid: node.uuid, network: node.network || PODbAbtfr('AiAA'), tls: node.tls === PODbAbtfr('Ai8D'), PODbAbtfr('BSgZAmsLPBYHWzUVAC8OIA=='): true }; if (node.network === 'ws') { proxy[PODbAbtfr('ATBdHTYcKg==')] = {}; if (node.path) { proxy[PODbAbtfr('ATBdHTYcKg==')].path = node.path;} if (node.host) { proxy[PODbAbtfr('ATBdHTYcKg==')].headers = { Host: node.host };} } if (node.network === PODbAbtfr('ETEAEQ==')) { proxy[PODbAbtfr('ETEAEWsHKRAA')] = {}; if (node.path) { proxy[PODbAbtfr('ETEAEWsHKRAA')][PODbAbtfr('ETEAEWsbPBYFHyAVXygJNAE=')] = node.path;} } return proxy;} function generateTrojanProxy(node, serverIP, name) { const proxy = { name: name, type: PODbAbtfr('AjEfGCcG'), server: serverIP, port: parseInt(node.port), password: node.password, PODbAbtfr('BSgZAmsLPBYHWzUVAC8OIA=='): true }; if (node.sni) { proxy.sni = node.sni;} if (node.network === 'ws') { proxy.network = 'ws'; proxy[PODbAbtfr('ATBdHTYcKg==')] = {}; if (node.path) { proxy[PODbAbtfr('ATBdHTYcKg==')].path = node.path;} if (node.host) { proxy[PODbAbtfr('ATBdHTYcKg==')].headers = { Host: node.host };} } return proxy;} function generateShadowsocksProxy(node, serverIP, name) { return { name: name, type: 'ss', server: serverIP, port: parseInt(node.port), cipher: node.method || PODbAbtfr('FyYDX3Rdb0kUFS4='), password: node.password };} function convertToYAML(obj, indent = 0) { const spaces = ' '.repeat(indent); let yaml = ''; for (const [key, value] of Object.entries(obj)) { if (value === null || value === undefined) continue; if (Array.isArray(value)) { yaml += `${spaces}${key}:\n`; for (const item of value) { if (typeof item === PODbAbtfr('GSEaFyUc')) { yaml += `${spaces} - `; const itemYaml = convertToYAML(item, indent + 2); yaml += itemYaml.substring(spaces.length + 4) + '\n';} else { yaml += `${spaces} - ${item}\n`;} } } else if (typeof value === PODbAbtfr('GSEaFyUc')) { yaml += `${spaces}${key}:\n`; yaml += convertToYAML(value, indent + 1);} else { const quotedValue = typeof value === PODbAbtfr('BTcCGygP') && (value.includes(':') || value.includes('#') || value.includes('-')) ? `"${value}"` : value; yaml += `${spaces}${key}: ${quotedValue}\n`;} } return yaml;}