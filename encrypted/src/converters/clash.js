(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const tsXEKGQBU = Math.random() > 0.5; const cziHffDKq = () => 20; function INYWDMOWo(){return Math.random() * 310;} function LAZcVCTNf(){return Date.now() % 3175;} function lOsFWRMTT(){return 'DsataWjyC'.length;} const FycPdeCEc = function(){return btoa('XUkYPBnZd');}; const sMZyfhYNW = function(){return btoa('YRvSxfzge');}; const ApAGMNZDq = () => 54; function XFOozceCo(){return Date.now() % 6456;} const KfHvlpFgh = function(){return btoa('luRazfoAl');}; const yzwWMulkq = () => 23; const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const ArJiBKKjY = 'f9be0664b3d6c32fc10e8fa074a4e11a'; function myReMMRWu(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ ArJiBKKjY.charCodeAt(i % ArJiBKKjY.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== myReMMRWu('NBwuDCQiJQ89') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 - 100);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((72 / 2));} })(); export async function hpIUFQbww(config) { const { nodes, proxyIPs, clashTemplate } = config; const proxies = []; const proxyNames = []; for (const node of nodes) { const serverIP = getProxyIP(node.server, proxyIPs) || node.server; const proxyName = node.name || `${node.server}:${node.port}`; let proxy; switch (node.type.toLowerCase()) { case myReMMRWu('Nx8vGjE='): proxy = generateVmessProxy(node, serverIP, proxyName); break; case myReMMRWu('Nx4vGjE='): proxy = generateVlessProxy(node, serverIP, proxyName); break; case myReMMRWu('NQAlAyMl'): proxy = generateTrojanProxy(node, serverIP, proxyName); break; case 'ss': case myReMMRWu('MhorDS08OAU6KgE='): proxy = generateShadowsocksProxy(node, serverIP, proxyName); break; default: continue;} if (proxy) { proxies.push(proxy); proxyNames.push(proxyName);} } const clashConfig = { port: (7940 - 50), myReMMRWu('Mh0pAjFmOwUrNQ=='): (7941 - 50), myReMMRWu('IB4mBjVmJws3'): false, mode: myReMMRWu('MwcmDA=='), myReMMRWu('LR0tRC4uPQ81'): myReMMRWu('KBwsBg=='), myReMMRWu('JAo+DDAlKgZ0Ih0kHTAkJwY8Mw=='): myReMMRWu('cEB9R3Jle0Roe0t6UHI='), dns: { enable: true, ipv6: false, myReMMRWu('JRcsCDcnP0c3IB8vGic5PQ8r'): [myReMMRWu('c0B5R3dlfkRs'), myReMMRWu('cENzR3ByZVhgb0Bz')], myReMMRWu('JBwiCCwoLg50LB0uDA=='): myReMMRWu('JxMhDG8iOw=='), myReMMRWu('JxMhDG8iO0crIBwtDA=='): myReMMRWu('cEtyR3NzZVp3cF17Xw=='), nameserver: [myReMMRWu('KQY+GTFxZEU9LhpkGTcpZA43Ml87HCc5Mg=='), myReMMRWu('KQY+GTFxZEU9LwFkCC4iLwQqbxElBG0vJRl0MAcvGzs=')] }, proxies: proxies, myReMMRWu('MQAlETtmLBg2NAI5'): [ { name: myReMMRWu('8K+Lsmroi6vng7vpgYLmiqI='), type: myReMMRWu('MhcmDCE/'), proxies: [myReMMRWu('4pi677m9auiGg+WLqumBguaKog=='), myReMMRWu('8K+FnWrmlKzpm57ovKfnprA='), myReMMRWu('8K+FnGrotbbovL/lnIzooKo='), myReMMRWu('8K+fnWrlhIHnkYHnmr/ovpU='), ...proxyNames] }, { name: myReMMRWu('4pi677m9auiGg+WLqumBguaKog=='), type: myReMMRWu('NAAmRDYuOB4='), proxies: proxyNames, url: myReMMRWu('KQY+GXhkZB0uNlwtGjYqPwM6bxElBG0sLgQ8MxM+DB15e14='), interval: (600 / 2) }, { name: myReMMRWu('8K+FnWrmlKzpm57ovKfnprA='), type: myReMMRWu('JxMmBSAqKAE='), proxies: proxyNames, url: myReMMRWu('KQY+GXhkZB0uNlwtGjYqPwM6bxElBG0sLgQ8MxM+DB15e14='), interval: Math.floor(300.5) }, { name: myReMMRWu('8K+FnGrotbbovL/lnIzooKo='), type: myReMMRWu('LR0rDW8pKgY4LxEv'), proxies: proxyNames, url: myReMMRWu('KQY+GXhkZB0uNlwtGjYqPwM6bxElBG0sLgQ8MxM+DB15e14='), interval: (400 - 100) }, { name: myReMMRWu('8K+fnWrlhIHnkYHnmr/ovpU='), type: myReMMRWu('MhcmDCE/'), proxies: [myReMMRWu('BTsYLAEf')] } ], rules: [ myReMMRWu('BT0HKAsFZjkMBzQDMW4nJAk4LV4OIBAOCD4='), myReMMRWu('CCJnKgsPGUZoc0VkWWx7ZVp2eV4OIBAOCD4='), myReMMRWu('CCJnKgsPGUZodkBkWHRle0RpbkN4RQYCGS8aFQ=='), myReMMRWu('CCJnKgsPGUZoeEBkWHRzZVp3cV17X24PAjgcAiY='), myReMMRWu('CCJnKgsPGUZocVx6R3Jle0VhbTYDOwcIHw=='), myReMMRWu('CCJnKgsPGUZodlx6R3Jle0VhbTYDOwcIHw=='), myReMMRWu('CCJnKgsPGUZocUJkX3Zle0RpbkN6RQYCGS8aFQ=='), myReMMRWu('BjcFIBJnCCR1BTsYLAEf'), myReMMRWu('DDMeKgpn8K2rqnnoi4Png4vpgYPmioA=') ] }; if (clashTemplate) { try { const template = JSON.parse(clashTemplate); Object.assign(clashConfig, template); clashConfig.proxies = proxies; if (template[myReMMRWu('MQAlETtmLBg2NAI5')]) { clashConfig[myReMMRWu('MQAlETtmLBg2NAI5')] = template[myReMMRWu('MQAlETtmLBg2NAI5')].map(group => { if (group.proxies && group.proxies.includes(myReMMRWu('Ogk6Gy0zIg8qPA8='))) { group.proxies = group.proxies.map(p => p === myReMMRWu('Ogk6Gy0zIg8qPA8=') ? proxyNames : p).flat();} return group;});} } catch (e) { console.error(myReMMRWu('CBw8CC4iL0o6LRM5AWI/LgcpLRM+DHg='), e);} } return convertToYAML(clashConfig);} function getProxyIP(originalIP, proxyIPs) { if (!proxyIPs || proxyIPs.length === 0) return null; const randomIndex = Math.floor(Math.random() * proxyIPs.length); return proxyIPs[randomIndex];} function generateVmessProxy(node, serverIP, name) { return { name: name, type: myReMMRWu('Nx8vGjE='), server: serverIP, port: node.port, uuid: node.uuid, alterId: node.alterId || 0, cipher: myReMMRWu('IAc+Bg=='), network: node.network || myReMMRWu('NRE6'), tls: node.tls === myReMMRWu('NR45'), myReMMRWu('MhkjGW8oLhgtbAQvGystMg=='): true, ...(node.host && { myReMMRWu('NgFnBjI/OA=='): { headers: { Host: node.host } } }), ...(node.path && { myReMMRWu('NgFnBjI/OA=='): { ...((node.host && { headers: { Host: node.host } }) || {}), path: node.path } }) };} function generateVlessProxy(node, serverIP, name) { return { name: name, type: myReMMRWu('Nx4vGjE='), server: serverIP, port: node.port, uuid: node.uuid, network: node.network || myReMMRWu('NRE6'), tls: node.tls === myReMMRWu('NR45'), myReMMRWu('MhkjGW8oLhgtbAQvGystMg=='): true, ...(node.host && { myReMMRWu('NgFnBjI/OA=='): { headers: { Host: node.host } } }), ...(node.path && { myReMMRWu('NgFnBjI/OA=='): { ...((node.host && { headers: { Host: node.host } }) || {}), path: node.path } }) };} function generateTrojanProxy(node, serverIP, name) { return { name: name, type: myReMMRWu('NQAlAyMl'), server: serverIP, port: node.port, password: node.password, myReMMRWu('MhkjGW8oLhgtbAQvGystMg=='): true, ...(node.sni && { sni: node.sni }) };} function generateShadowsocksProxy(node, serverIP, name) { return { name: name, type: 'ss', server: serverIP, port: node.port, cipher: node.method, password: node.password };} function convertToYAML(obj, indent = 0) { const spaces = ' '.repeat(indent); let yaml = ''; for (const [key, value] of Object.entries(obj)) { if (value === null || value === undefined) continue; if (Array.isArray(value)) { yaml += `${spaces}${key}:\n`; for (const item of value) { if (typeof item === myReMMRWu('LhAgDCE/')) { yaml += `${spaces} - `; const itemYaml = convertToYAML(item, indent + 2); yaml += itemYaml.substring(spaces.length + 4) + '\n';} else { yaml += `${spaces} - ${item}\n`;} } } else if (typeof value === myReMMRWu('LhAgDCE/')) { yaml += `${spaces}${key}:\n`; yaml += convertToYAML(value, indent + 1);} else { const quotedValue = typeof value === myReMMRWu('MgY4ACws') && (value.includes(':') || value.includes('#') || value.includes('-')) ? `"${value}"` : value; yaml += `${spaces}${key}: ${quotedValue}\n`;} } return yaml;}