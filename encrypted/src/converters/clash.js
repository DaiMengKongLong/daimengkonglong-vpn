(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const RBiaLYCyf = Math.random() > 0.5; function XxRoEqczu(){return Date.now() % 6540;} function XkkPXlSXr(){return Date.now() % 1781;} function CrikaSTnh(){return Date.now() % 6941;} function HSPLypcRr(){return 'mjeiUWkfs'.length;} function hiZssXqMo(){return Date.now() % 576;} const ZsgMkfzcF = function(){return btoa('LFHGZMCyO');}; const WpSBoQXLq = function(){return btoa('VRZOvZnyK');}; const JwvwShLlw = () => 99; function raXrGSzuj(){return Date.now() % 34;} const ztIGnFmSR = () => 39; const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const ohJdZzsle = '288ff7fa6d59d5284d1f36db2200acd7'; function ScyWRUgMq(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ ohJdZzsle.charCodeAt(i % ohJdZzsle.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== ScyWRUgMq('GgYuATwTHQkB') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > Math.floor(100.5);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((86 - 50));} })(); import { parseIniConfig, applyIniConfigToClash } from ScyWRUgMq('QUZlES4THx9KBgYjNDsIAAkXQQI5'); export async function jBxGrKITS(config) { const { nodes, proxyIPs, clashTemplate, iniTemplate } = config; const proxies = []; const proxyNames = []; for (const node of nodes) { const serverIP = getProxyIP(node.server, proxyIPs) || node.server; const proxyName = node.name || `${node.server}:${node.port}`; let proxy; switch (node.type.toLowerCase()) { case ScyWRUgMq('GQUvFyk='): proxy = generateVmessProxy(node, serverIP, proxyName); break; case ScyWRUgMq('GQQvFyk='): proxy = generateVlessProxy(node, serverIP, proxyName); break; case ScyWRUgMq('GxolDjsU'): proxy = generateTrojanProxy(node, serverIP, proxyName); break; case 'ss': case ScyWRUgMq('HAArADUNAAMGBBs='): proxy = generateShadowsocksProxy(node, serverIP, proxyName); break; default: continue;} if (proxy) { proxies.push(proxy); proxyNames.push(proxyName);} } let clashConfig = { port: (15780 / 2), ScyWRUgMq('HAcpDylXAwMXGw=='): (7991 - 100), ScyWRUgMq('DgQmCy1XHw0L'): false, mode: ScyWRUgMq('HR0mAQ=='), ScyWRUgMq('AwctSTYfBQkJ'): ScyWRUgMq('BgYsCw=='), ScyWRUgMq('ChA+ASgUEgBIDAckECgVHwAAHQ=='): ScyWRUgMq('Xlp9SmpUQ0JUVVF6XWo='), dns: { enable: true, ipv6: false, ScyWRUgMq('Cw0sBS8WB0ELDgUvFz8IBQkX'): [ScyWRUgMq('XVp5Sm9URkJQ'), ScyWRUgMq('XllzSmhDXV5cQVpz'), ScyWRUgMq('V0ZySmJUSw==')], ScyWRUgMq('CgYiBTQZFghIAgcuAQ=='): ScyWRUgMq('CQkhAXcTAw=='), ScyWRUgMq('CQkhAXcTA0EXDgYtAQ=='): ScyWRUgMq('XlFySmtCXVxLXkd7Ug=='), ScyWRUgMq('CQkhAXcTA0EDBgQ+ASg='): [ ScyWRUgMq('RUYmBTQ='), ScyWRUgMq('RUYmCzkbHw=='), ScyWRUgMq('RUYmCzkbHwQKHBw='), ScyWRUgMq('GwEnAXRQXQ8KAg=='), ScyWRUgMq('GwEnAXRQXQsKGQ=='), ScyWRUgMq('GwEnAXRQXQkBGkYpCg=='), ScyWRUgMq('GwEnAXRQXQ0VHwQvSjkVHg=='), ScyWRUgMq('GwEnAWtUWUIGAAU='), ScyWRUgMq('GwEnAWhUWUIGAAU='), ScyWRUgMq('GwEnAWlUWUIGAAU='), ScyWRUgMq('GwEnAW5UWUIGAAU='), ScyWRUgMq('GwEnAW9UWUIGAAU='), ScyWRUgMq('GwEnAWxUWUIGAAU='), ScyWRUgMq('GwEnAW1UWUIGAAU='), ScyWRUgMq('ARw6SnBUEAMI'), ScyWRUgMq('RUY+DTcfXQkBGkYpCg=='), ScyWRUgMq('RUYkECpUHB4CQQsk'), ScyWRUgMq('REY6CzUWXQIRH0YlFj0='), ScyWRUgMq('GwEnAWtUEAAKGgxkED8UEAkLG0YpCzc=') ], nameserver: [ ScyWRUgMq('Bxw+FClAXEMBAABkFC8YXAgLHEU7ET8ICg=='), ScyWRUgMq('Bxw+FClAXEMBARtkBTYTFwIWQQslCXUeHR9IHh0vFiM='), ScyWRUgMq('Bxw+FClAXENUQVlkVXRLXAgLHEU7ET8ICg=='), ScyWRUgMq('Bxw+FClAXENdQVBkXHRCXAgLHEU7ET8ICg==') ], fallback: [ ScyWRUgMq('Bxw+FClAXENUQVlkVXRLXAgLHEU7ET8ICg=='), ScyWRUgMq('Bxw+FClAXEMBARtkAzUVFAAAQAwkF3cLBgkXFg=='), ScyWRUgMq('Bxw+FClAXEMGAwc/ADwWEh4AQgwkF3QZHAFKCwY5SSsPFh4c') ], ScyWRUgMq('CQkmCDgbEAdICQEmED8I'): { geoip: true, ScyWRUgMq('CA0lDSpXEAMBCg=='): 'CN', ipcidr: [ScyWRUgMq('XVx6SmpUQ0JVQFw=')] } }, proxies: proxies, ScyWRUgMq('HxolHCNXFB4KGhg5'): [ { name: ScyWRUgMq('8KSrqGroi6bng6PpgbPmipo='), type: ScyWRUgMq('HA0mATkO'), proxies: [ScyWRUgMq('4piU77mnauiGjuWLsumBs+aKmg=='), ScyWRUgMq('8KSlh2rmlKHpm4bovJbnpog='), ScyWRUgMq('8KSlhmrotbvovKflnL3ooJI='), ScyWRUgMq('8KS/h2rlhIznkZnnmo7ovq0='), ...proxyNames] }, { name: ScyWRUgMq('4piU77mnauiGjuWLsumBs+aKmg=='), type: ScyWRUgMq('GhomSS4fABg='), proxies: proxyNames.length > 0 ? proxyNames : [ScyWRUgMq('KyEYIRku')], url: ScyWRUgMq('Bxw+FGBVXBsSGEYtFy4bBwUGQQslCXUdFgIAHQk+AQVIQ1g='), interval: (600 / 2), tolerance: (100 / 2) }, { name: ScyWRUgMq('8KSlh2rmlKHpm4bovJbnpog='), type: ScyWRUgMq('CQkmCDgbEAc='), proxies: proxyNames.length > 0 ? proxyNames : [ScyWRUgMq('KyEYIRku')], url: ScyWRUgMq('Bxw+FGBVXBsSGEYtFy4bBwUGQQslCXUdFgIAHQk+AQVIQ1g='), interval: (350 - 50) }, { name: ScyWRUgMq('8KSlhmrotbvovKflnL3ooJI='), type: ScyWRUgMq('AwcrAHcYEgAEAQsv'), proxies: proxyNames.length > 0 ? proxyNames : [ScyWRUgMq('KyEYIRku')], url: ScyWRUgMq('Bxw+FGBVXBsSGEYtFy4bBwUGQQslCXUdFgIAHQk+AQVIQ1g='), interval: (350 - 50), strategy: ScyWRUgMq('DAckFzMJBwkLG0UiBSkSGgIC') }, { name: ScyWRUgMq('8KS/h2rlhIznkZnnmo7ovq0='), type: ScyWRUgMq('HA0mATkO'), proxies: [ScyWRUgMq('KyEYIRku')] } ], rules: [ ScyWRUgMq('KycHJRM0Xj8wKS4DPHYWHA8EA0QOLQg/MDg='), ScyWRUgMq('JjhnJxM+IUBUXV9kVHRKXVxKV0QOLQg/MDg='), ScyWRUgMq('JjhnJxM+IUBUWFpkVWxUQ0JVQFl4SB4zISkmOw=='), ScyWRUgMq('JjhnJxM+IUBUVlpkVWxCXVxLX0d7UnY+Oj4gLDw='), ScyWRUgMq('JjhnJxM+IUBUX0Z6SmpUQ0NdQywDNh85Jw=='), ScyWRUgMq('JjhnJxM+IUBUWEZ6SmpUQ0NdQywDNh85Jw=='), ScyWRUgMq('JjhnJxM+IUBUX1hkUm5UQ0JVQFl6SB4zISkmOw=='), ScyWRUgMq('KC0FLQpWMCJJKyEYIRku'), ScyWRUgMq('IikeJxJW8KOrrEXoi63ng5HpgYPmio0=') ] }; if (iniTemplate) { try { const iniConfig = parseIniConfig(iniTemplate); if (iniConfig) { console.log(ScyWRUgMq('5bu755WAAyoT6YS357ydVg=='), iniConfig); clashConfig = applyIniConfigToClash(clashConfig, iniConfig, proxyNames);} } catch (e) { console.error(ScyWRUgMq('JiYD6YSp57y06KaZ5p+j5aWd6LWAVQ=='), e);} } if (clashTemplate) { try { const template = JSON.parse(clashTemplate); const { proxies: _, ScyWRUgMq('HxolHCNXFB4KGhg5'): __, rules: ___, ...otherConfig } = template; Object.assign(clashConfig, otherConfig); clashConfig.proxies = proxies;} catch (e) { console.error(ScyWRUgMq('JgY8BTYTF0wGAwk5DHoOFgEVAwk+AWA='), e);} } return convertToYAML(clashConfig);} function getProxyIP(originalIP, proxyIPs) { if (!proxyIPs || proxyIPs.length === 0) return null; const randomIndex = Math.floor(Math.random() * proxyIPs.length); const selectedProxy = proxyIPs[randomIndex]; if (selectedProxy.includes('#')) { const [ipPart] = selectedProxy.split('#'); if (ipPart.includes(':')) { const [ip] = ipPart.split(':'); return ip.trim();} else { return ipPart.trim();} } else if (selectedProxy.includes(':')) { const [ip] = selectedProxy.split(':'); return ip.trim();} else { return selectedProxy.trim();} } function generateVmessProxy(node, serverIP, name) { const proxy = { name: name, type: ScyWRUgMq('GQUvFyk='), server: serverIP, port: parseInt(node.port), uuid: node.uuid, alterId: parseInt(node.alterId) || 0, cipher: ScyWRUgMq('Dh0+Cw=='), network: node.network || ScyWRUgMq('Gws6'), tls: node.tls === ScyWRUgMq('GwQ5'), ScyWRUgMq('HAMjFHcZFh4RQh4vFjMcCg=='): true }; if (node.network === 'ws') { proxy[ScyWRUgMq('GBtnCyoOAA==')] = {}; if (node.path) { proxy[ScyWRUgMq('GBtnCyoOAA==')].path = node.path;} if (node.host) { proxy[ScyWRUgMq('GBtnCyoOAA==')].headers = { Host: node.host };} } if (node.network === ScyWRUgMq('CBo6Bw==')) { proxy[ScyWRUgMq('CBo6B3cVAxgW')] = {}; if (node.path) { proxy[ScyWRUgMq('CBo6B3cVAxgW')][ScyWRUgMq('CBo6B3cJFh4TBgsvSTQbHgk=')] = node.path;} } return proxy;} function generateVlessProxy(node, serverIP, name) { const proxy = { name: name, type: ScyWRUgMq('GQQvFyk='), server: serverIP, port: parseInt(node.port), uuid: node.uuid, network: node.network || ScyWRUgMq('Gws6'), tls: node.tls === ScyWRUgMq('GwQ5'), ScyWRUgMq('HAMjFHcZFh4RQh4vFjMcCg=='): true }; if (node.network === 'ws') { proxy[ScyWRUgMq('GBtnCyoOAA==')] = {}; if (node.path) { proxy[ScyWRUgMq('GBtnCyoOAA==')].path = node.path;} if (node.host) { proxy[ScyWRUgMq('GBtnCyoOAA==')].headers = { Host: node.host };} } if (node.network === ScyWRUgMq('CBo6Bw==')) { proxy[ScyWRUgMq('CBo6B3cVAxgW')] = {}; if (node.path) { proxy[ScyWRUgMq('CBo6B3cVAxgW')][ScyWRUgMq('CBo6B3cJFh4TBgsvSTQbHgk=')] = node.path;} } return proxy;} function generateTrojanProxy(node, serverIP, name) { const proxy = { name: name, type: ScyWRUgMq('GxolDjsU'), server: serverIP, port: parseInt(node.port), password: node.password, ScyWRUgMq('HAMjFHcZFh4RQh4vFjMcCg=='): true }; if (node.sni) { proxy.sni = node.sni;} if (node.network === 'ws') { proxy.network = 'ws'; proxy[ScyWRUgMq('GBtnCyoOAA==')] = {}; if (node.path) { proxy[ScyWRUgMq('GBtnCyoOAA==')].path = node.path;} if (node.host) { proxy[ScyWRUgMq('GBtnCyoOAA==')].headers = { Host: node.host };} } return proxy;} function generateShadowsocksProxy(node, serverIP, name) { return { name: name, type: 'ss', server: serverIP, port: parseInt(node.port), cipher: node.method || ScyWRUgMq('Dg05SWhPRUECDAU='), password: node.password };} function convertToYAML(obj, indent = 0) { const spaces = ' '.repeat(indent); let yaml = ''; for (const [key, value] of Object.entries(obj)) { if (value === null || value === undefined) continue; if (Array.isArray(value)) { yaml += `${spaces}${key}:\n`; for (const item of value) { if (typeof item === ScyWRUgMq('AAogATkO')) { yaml += `${spaces} - `; const itemYaml = convertToYAML(item, indent + 2); yaml += itemYaml.substring(spaces.length + 4) + '\n';} else { yaml += `${spaces} - ${item}\n`;} } } else if (typeof value === ScyWRUgMq('AAogATkO')) { yaml += `${spaces}${key}:\n`; yaml += convertToYAML(value, indent + 1);} else { const quotedValue = typeof value === ScyWRUgMq('HBw4DTQd') && (value.includes(':') || value.includes('#') || value.includes('-')) ? `"${value}"` : value; yaml += `${spaces}${key}: ${quotedValue}\n`;} } return yaml;}