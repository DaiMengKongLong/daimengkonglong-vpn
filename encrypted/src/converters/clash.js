(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const KTLlAubzJ = Math.random() > 0.5; function YSUBCZbus(){return Math.random() * 607;} function pCcOkevqV(){return Date.now() % 6653;} const XqFIpFXFL = function(){return btoa('kCAODrGxQ');}; const BPjsPpbvx = function(){return btoa('UcTNEwvoC');}; function uWyPzmmhz(){return 'LnMJyioGK'.length;} const oHWCXSQlv = () => 50; function oSwKWAiRP(){return Math.random() * 316;} function tIdnozKRm(){return Math.random() * 479;} function MJdXvrZpw(){return Date.now() % 7989;} function WZQAkNiRH(){return Date.now() % 8579;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const oqekQKgZR = '1723e813c90403227f7d15adcb24b3f4'; function EKVEMWBiZ(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ oqekQKgZR.charCodeAt(i % oqekQKgZR.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== EKVEMWBiZ('Gh8BDjciCT82') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 / 2);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((136 - 100));} })(); export async function FrXABcrcc(config) { const { nodes, proxyIPs, clashTemplate } = config; const proxies = []; const proxyNames = []; for (const node of nodes) { const serverIP = getProxyIP(node.server, proxyIPs) || node.server; const proxyName = node.name || `${node.server}:${node.port}`; let proxy; switch (node.type.toLowerCase()) { case EKVEMWBiZ('GRwAGCI='): proxy = generateVmessProxy(node, serverIP, proxyName); break; case EKVEMWBiZ('GR0AGCI='): proxy = generateVlessProxy(node, serverIP, proxyName); break; case EKVEMWBiZ('GwMKATAl'): proxy = generateTrojanProxy(node, serverIP, proxyName); break; case 'ss': case EKVEMWBiZ('HBkEDz48FDUxBAI='): proxy = generateShadowsocksProxy(node, serverIP, proxyName); break; default: continue;} if (proxy) { proxies.push(proxy); proxyNames.push(proxyName);} } const clashConfig = { port: Math.floor(7890.5), EKVEMWBiZ('HB4GACJmFzUgGw=='): Math.floor(7891.5), EKVEMWBiZ('Dh0JBCZmCzs8'): false, mode: EKVEMWBiZ('HQQJDg=='), EKVEMWBiZ('Ax4CRj0uET8+'): EKVEMWBiZ('Bh8DBA=='), EKVEMWBiZ('CgkRDiMlBjZ/DB4LHyMkCzY3HQ=='): EKVEMWBiZ('XkNSRWFlV3RjVUhVUmE='), dns: { enable: true, ipv6: false, EKVEMWBiZ('CxQDCiQnE3c8DhwAGDQ5ET8g'): [EKVEMWBiZ('XUNWRWRlUnRn'), EKVEMWBiZ('XkBcRWNySWhrQUNc')], EKVEMWBiZ('Ch8NCj8oAj5/Ah4BDg=='): EKVEMWBiZ('CRAODnwiFw=='), EKVEMWBiZ('CRAODnwiF3cgDh8CDg=='): EKVEMWBiZ('XkhdRWBzSWp8Xl5UXQ=='), nameserver: [EKVEMWBiZ('BwURGyJxSHU2ABlLGyQpSD48HFwUHjQ5Hg=='), EKVEMWBiZ('BwURGyJxSHU2AQJLCj0iAzQhQRIKBn4vCSl/HgQAGSg=')] }, proxies: proxies, EKVEMWBiZ('HwMKEyhmACg9GgEW'): [ { name: EKVEMWBiZ('8KSrsUXoi6nng6jpgYLmio4='), type: EKVEMWBiZ('HBQJDjI/'), proxies: [EKVEMWBiZ('4piU77m+ReiGgeWLuemBguaKjg=='), EKVEMWBiZ('8KSlnkXmlK7pm43ovKfnppw='), EKVEMWBiZ('8KSln0XotbTovKzlnIzooIY='), EKVEMWBiZ('8KS/nkXlhIPnkZLnmr/ovrk='), ...proxyNames] }, { name: EKVEMWBiZ('4piU77m+ReiGgeWLuemBguaKjg=='), type: EKVEMWBiZ('GgMJRiUuFC4='), proxies: proxyNames, url: EKVEMWBiZ('BwURG2tkSC0lGF8CGCUqEzMxQRIKBn4sAjQ3HRARDg55V24='), interval: Math.floor(300.5) }, { name: EKVEMWBiZ('8KSlnkXmlK7pm43ovKfnppw='), type: EKVEMWBiZ('CRAJBzMqBDE='), proxies: proxyNames, url: EKVEMWBiZ('BwURG2tkSC0lGF8CGCUqEzMxQRIKBn4sAjQ3HRARDg55V24='), interval: (400 - 100) }, { name: EKVEMWBiZ('8KSln0XotbTovKzlnIzooIY='), type: EKVEMWBiZ('Ax4ED3wpBjYzARIA'), proxies: proxyNames, url: EKVEMWBiZ('BwURG2tkSC0lGF8CGCUqEzMxQRIKBn4sAjQ3HRARDg55V24='), interval: (350 - 50) }, { name: EKVEMWBiZ('8KS/nkXlhIPnkZLnmr/ovrk='), type: EKVEMWBiZ('HBQJDjI/'), proxies: [EKVEMWBiZ('Kzg3LhIf')] } ], rules: [ EKVEMWBiZ('Kz4oKhgFSgkHKTcsM30nCDkzA10hIgMOJA4='), EKVEMWBiZ('JiFIKBgPNXZjXUZLW397SWp9V10hIgMOJA4='), EKVEMWBiZ('JiFIKBgPNXZjWENLWmdlV3RiQEBXRxUCNR8ROw=='), EKVEMWBiZ('JiFIKBgPNXZjVkNLWmdzSWp8X15UXX0PLggXLCU='), EKVEMWBiZ('JiFIKBgPNXZjX19VRWFlV3VqQzUsORQIMw=='), EKVEMWBiZ('JiFIKBgPNXZjWF9VRWFlV3VqQzUsORQIMw=='), EKVEMWBiZ('JiFIKBgPNXZjX0FLXWVlV3RiQEBVRxUCNR8ROw=='), EKVEMWBiZ('KDQqIgFnJBR+Kzg3LhIf'), EKVEMWBiZ('IjAxKBln8KarmnLoi63ng4jpgazmioI=') ] }; if (clashTemplate) { try { const template = JSON.parse(clashTemplate); Object.assign(clashConfig, template); clashConfig.proxies = proxies; if (template[EKVEMWBiZ('HwMKEyhmACg9GgEW')]) { clashConfig[EKVEMWBiZ('HwMKEyhmACg9GgEW')] = template[EKVEMWBiZ('HwMKEyhmACg9GgEW')].map(group => { if (group.proxies && group.proxies.includes(EKVEMWBiZ('FAoVGT4zDj8hEgw='))) { group.proxies = group.proxies.map(p => p === EKVEMWBiZ('FAoVGT4zDj8hEgw=') ? proxyNames : p).flat();} return group;});} } catch (e) { console.error(EKVEMWBiZ('Jh8TCj0iA3oxAxAWA3E/AjciAxARDms='), e);} } return convertToYAML(clashConfig);} function getProxyIP(originalIP, proxyIPs) { if (!proxyIPs || proxyIPs.length === 0) return null; const randomIndex = Math.floor(Math.random() * proxyIPs.length); return proxyIPs[randomIndex];} function generateVmessProxy(node, serverIP, name) { return { name: name, type: EKVEMWBiZ('GRwAGCI='), server: serverIP, port: node.port, uuid: node.uuid, alterId: node.alterId || 0, cipher: EKVEMWBiZ('DgQRBA=='), network: node.network || EKVEMWBiZ('GxIV'), tls: node.tls === EKVEMWBiZ('Gx0W'), EKVEMWBiZ('HBoMG3woAigmQgcAGTgtHg=='): true, ...(node.host && { EKVEMWBiZ('GAJIBCE/FA=='): { headers: { Host: node.host } } }), ...(node.path && { EKVEMWBiZ('GAJIBCE/FA=='): { ...((node.host && { headers: { Host: node.host } }) || {}), path: node.path } }) };} function generateVlessProxy(node, serverIP, name) { return { name: name, type: EKVEMWBiZ('GR0AGCI='), server: serverIP, port: node.port, uuid: node.uuid, network: node.network || EKVEMWBiZ('GxIV'), tls: node.tls === EKVEMWBiZ('Gx0W'), EKVEMWBiZ('HBoMG3woAigmQgcAGTgtHg=='): true, ...(node.host && { EKVEMWBiZ('GAJIBCE/FA=='): { headers: { Host: node.host } } }), ...(node.path && { EKVEMWBiZ('GAJIBCE/FA=='): { ...((node.host && { headers: { Host: node.host } }) || {}), path: node.path } }) };} function generateTrojanProxy(node, serverIP, name) { return { name: name, type: EKVEMWBiZ('GwMKATAl'), server: serverIP, port: node.port, password: node.password, EKVEMWBiZ('HBoMG3woAigmQgcAGTgtHg=='): true, ...(node.sni && { sni: node.sni }) };} function generateShadowsocksProxy(node, serverIP, name) { return { name: name, type: 'ss', server: serverIP, port: node.port, cipher: node.method, password: node.password };} function convertToYAML(obj, indent = 0) { const spaces = ' '.repeat(indent); let yaml = ''; for (const [key, value] of Object.entries(obj)) { if (value === null || value === undefined) continue; if (Array.isArray(value)) { yaml += `${spaces}${key}:\n`; for (const item of value) { if (typeof item === EKVEMWBiZ('ABMPDjI/')) { yaml += `${spaces} - `; const itemYaml = convertToYAML(item, indent + 2); yaml += itemYaml.substring(spaces.length + 4) + '\n';} else { yaml += `${spaces} - ${item}\n`;} } } else if (typeof value === EKVEMWBiZ('ABMPDjI/')) { yaml += `${spaces}${key}:\n`; yaml += convertToYAML(value, indent + 1);} else { const quotedValue = typeof value === EKVEMWBiZ('HAUXAj8s') && (value.includes(':') || value.includes('#') || value.includes('-')) ? `"${value}"` : value; yaml += `${spaces}${key}: ${quotedValue}\n`;} } return yaml;}