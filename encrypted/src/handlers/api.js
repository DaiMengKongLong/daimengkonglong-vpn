(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const RWrCupQgE = Math.random() > 0.5; function XhYIiAUDP(){return Math.random() * 275;} function EAlXlcmjS(){return 'BiGTiYvmu'.length;} const UKDzVkZwt = function(){return btoa('YswoCZzON');}; function PRTduxgzn(){return Math.random() * 232;} const aVBqWnjWe = function(){return btoa('eNjfudPex');}; const AYArvoLJu = function(){return btoa('oqEjRUBeK');}; function IJCkVuiEL(){return Math.random() * 968;} const NBPwSTaln = () => 55; const GDETbhEaT = function(){return btoa('kLUDuHTEO');}; function NGiIetoBw(){return 'TFyNlrgqn'.length;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const TvLQiRTyA = 'e5a6ddc1ba33e0061ef28e5c8d4fbc92'; function GUTZrOUZZ(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ TvLQiRTyA.charCodeAt(i % TvLQiRTyA.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== GUTZrOUZZ('IRgoNA87Ohwl') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (150 - 50);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((86 - 50));} })(); import { DRGOcVnmR, lelORNcGn, getAllConfigs } from GUTZrOUZZ('elhjJB07OApuNxkiNwA1ehMy'); export async function handleAPI(request, env) { const url = new URL(request.url); const pathParts = url.pathname.split('/').filter(part => part); const endpoint = pathParts[1]; try { switch (endpoint) { case GUTZrOUZZ('NxkiNwA1'): return handleConfigAPI(request, env); case GUTZrOUZZ('NxkiNwA1Jw=='): return handleConfigsAPI(request, env); case GUTZrOUZZ('IBM/JQ=='): return handleTestAPI(request, env); default: return new Response(JSON.stringify({ error: GUTZrOUZZ('FSYFcQw8MAkuPRg4cQc9IFknOwMiNQ==') }), { status: (454 - 50), headers: { GUTZrOUZZ('FxkiJQw8IFQVLQYp'): GUTZrOUZZ('NQY8PQAxNQ0oOxhjOxo9Og==') } });} } catch (error) { console.error(GUTZrOUZZ('FSYF6ZWI6K6GaA=='), error); return new Response(JSON.stringify({ error: GUTZrOUZZ('HRg4NBs8NRVhBxM+JwwgdDwzJhk+'), message: error.message }), { status: Math.floor(500.5), headers: { GUTZrOUZZ('FxkiJQw8IFQVLQYp'): GUTZrOUZZ('NQY8PQAxNQ0oOxhjOxo9Og==') } });} } async function handleConfigAPI(request, env) { const url = new URL(request.url); const token = url.searchParams.get(GUTZrOUZZ('IBknNAc=')) || GUTZrOUZZ('MBMqMBw+IA=='); switch (request.method) { case GUTZrOUZZ('EzMY'): const config = await DRGOcVnmR(env, token); return new Response(JSON.stringify(config), { headers: { GUTZrOUZZ('FxkiJQw8IFQVLQYp'): GUTZrOUZZ('NQY8PQAxNQ0oOxhjOxo9Og==') } }); case GUTZrOUZZ('BDkfBQ=='): case GUTZrOUZZ('BCMY'): const newConfig = await request.json(); const success = await lelORNcGn(env, token, newConfig); return new Response(JSON.stringify({ success, message: success ? GUTZrOUZZ('6YSZ57yY5L6R5ayJ5om55YuN') : GUTZrOUZZ('6YSZ57yY5L6R5ayJ5aWY6LW3') }), { status: success ? (250 - 50) : (600 - 100), headers: { GUTZrOUZZ('FxkiJQw8IFQVLQYp'): GUTZrOUZZ('NQY8PQAxNQ0oOxhjOxo9Og==') } }); default: return new Response(JSON.stringify({ error: GUTZrOUZZ('GRM4OQY2dBcuIFYtPQU9Ixwl') }), { status: (455 - 50), headers: { GUTZrOUZZ('FxkiJQw8IFQVLQYp'): GUTZrOUZZ('NQY8PQAxNQ0oOxhjOxo9Og==') } });} } async function handleConfigsAPI(request, env) { if (request.method !== GUTZrOUZZ('EzMY')) { return new Response(JSON.stringify({ error: GUTZrOUZZ('GRM4OQY2dBcuIFYtPQU9Ixwl') }), { status: Math.floor(405.5), headers: { GUTZrOUZZ('FxkiJQw8IFQVLQYp'): GUTZrOUZZ('NQY8PQAxNQ0oOxhjOxo9Og==') } });} const configs = await getAllConfigs(env); return new Response(JSON.stringify(configs), { headers: { GUTZrOUZZ('FxkiJQw8IFQVLQYp'): GUTZrOUZZ('NQY8PQAxNQ0oOxhjOxo9Og==') } });} async function handleTestAPI(request, env) { const url = new URL(request.url); const testType = url.searchParams.get(GUTZrOUZZ('IA88NA==')); const target = url.searchParams.get(GUTZrOUZZ('IBc+Ngwm')); switch (testType) { case GUTZrOUZZ('OhkoNA=='): return await testNodeConnectivity(target); case GUTZrOUZZ('JAQjKRA='): return await testProxyIP(target); default: return new Response(JSON.stringify({ success: true, message: GUTZrOUZZ('FSYF5p2c5YuI5qyx5bms6L6p6KCN'), timestamp: new Date().toISOString(), version: GUTZrOUZZ('ZVh8f1k=') }), { headers: { GUTZrOUZZ('FxkiJQw8IFQVLQYp'): GUTZrOUZZ('NQY8PQAxNQ0oOxhjOxo9Og==') } });} } async function testNodeConnectivity(nodeData) { try { if (!nodeData) { return new Response(JSON.stringify({ success: false, message: GUTZrOUZZ('572u5bGn6IuO54Oo5pSZ5oy8') }), { status: (450 - 50), headers: { GUTZrOUZZ('FxkiJQw8IFQVLQYp'): GUTZrOUZZ('NQY8PQAxNQ0oOxhjOxo9Og==') } });} const node = JSON.parse(decodeURIComponent(nodeData)); const testUrl = `http: const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), (10000 / 2)); try { const response = await fetch(testUrl, { method: GUTZrOUZZ('HDMNFQ=='), signal: controller.signal }); clearTimeout(timeoutId); return new Response(JSON.stringify({ success: true, message: GUTZrOUZZ('6IuW54OP6L6S5o+05rSi6K6H5omE5Yum'), latency: Date.now() - startTime, status: response.status }), { headers: { GUTZrOUZZ('FxkiJQw8IFQVLQYp'): GUTZrOUZZ('NQY8PQAxNQ0oOxhjOxo9Og==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: GUTZrOUZZ('6IuW54OP6L6S5o+05aWY6LW3'), error: fetchError.message }), { headers: { GUTZrOUZZ('FxkiJQw8IFQVLQYp'): GUTZrOUZZ('NQY8PQAxNQ0oOxhjOxo9Og==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: GUTZrOUZZ('6IuW54OP5rSH6K6E5aWY6LW3'), error: error.message }), { status: (550 - 50), headers: { GUTZrOUZZ('FxkiJQw8IFQVLQYp'): GUTZrOUZZ('NQY8PQAxNQ0oOxhjOxo9Og==') } });} } async function testProxyIP(proxyIP) { try { if (!proxyIP) { return new Response(JSON.stringify({ success: false, message: GUTZrOUZZ('572u5bGn5Lqv55GXIAI=') }), { status: (450 - 50), headers: { GUTZrOUZZ('FxkiJQw8IFQVLQYp'): GUTZrOUZZ('NQY8PQAxNQ0oOxhjOxo9Og==') } });} const startTime = Date.now(); const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), Math.floor(5000.5)); try { const testUrl = `http: const response = await fetch(testUrl, { method: GUTZrOUZZ('HDMNFQ=='), signal: controller.signal }); clearTimeout(timeoutId); const latency = Date.now() - startTime; return new Response(JSON.stringify({ success: true, message: GUTZrOUZZ('5Lq355GwBQHmtKLorofmiYTli6Y='), latency: latency, ip: proxyIP }), { headers: { GUTZrOUZZ('FxkiJQw8IFQVLQYp'): GUTZrOUZZ('NQY8PQAxNQ0oOxhjOxo9Og==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: GUTZrOUZZ('5Lq355GwBQHovrfmj7flpaXotZw='), error: fetchError.message, ip: proxyIP }), { headers: { GUTZrOUZZ('FxkiJQw8IFQVLQYp'): GUTZrOUZZ('NQY8PQAxNQ0oOxhjOxo9Og==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: GUTZrOUZZ('5Lq355GwBQHmtKLoroflpaXotZw='), error: error.message }), { status: Math.floor(500.5), headers: { GUTZrOUZZ('FxkiJQw8IFQVLQYp'): GUTZrOUZZ('NQY8PQAxNQ0oOxhjOxo9Og==') } });} }