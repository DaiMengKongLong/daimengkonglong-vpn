(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const nkumGzzcj = Math.random() > 0.5; const lfkAHnjdA = function(){return btoa('cCMQJOrFU');}; function gRbsWYOvu(){return 'UCyIRdkWI'.length;} function PfqDpyGVw(){return Math.random() * 869;} function StyuHUAbg(){return Date.now() % 2305;} const pgDjdYxDh = () => 74; const NJVqxNxnU = function(){return btoa('ynUduoiJi');}; function DiDxMTtht(){return Math.random() * 335;} function qCJgtbbjT(){return 'pMMpfZCce'.length;} function vxPBnSVWu(){return Math.random() * 314;} function HkrxKYjku(){return Math.random() * 869;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const yatHXswJm = '59c1e5cba5310f63349e8c25c9301b5e'; function IGhLznNDt(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ yatHXswJm.charCodeAt(i % yatHXswJm.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== IGhLznNDt('DA8QLT4aGS8J') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 - 100);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString(Math.floor(36.5));} })(); import { aMpbObNWS, aZFLtFpKb, getAllConfigs } from IGhLznNDt('V09bPSwaGzlCGg4aLjEUWSAe'); export async function handleAPI(request, env) { const url = new URL(request.url); const pathParts = url.pathname.split('/').filter(part => part); const endpoint = pathParts[1]; try { switch (endpoint) { case IGhLznNDt('Gg4aLjEU'): return handleConfigAPI(request, env); case IGhLznNDt('Gg4aLjEUBA=='): return handleConfigsAPI(request, env); case IGhLznNDt('DQQHPA=='): return handleTestAPI(request, env); default: return new Response(JSON.stringify({ error: IGhLznNDt('ODE9aD0dEzoCEA8AaDYcA2oLFhQaLA==') }), { status: (808 / 2), headers: { IGhLznNDt('Og4aPD0dA2c5ABER'): IGhLznNDt('GBEEJDEQFj4EFg9bIiscGQ==') } });} } catch (error) { console.error(IGhLznNDt('ODE96ZWR6K63SQ=='), error); return new Response(JSON.stringify({ error: IGhLznNDt('MA8ALSodFiZNKgQGPj0BVw8fCw4G'), message: error.message }), { status: (550 - 50), headers: { IGhLznNDt('Og4aPD0dA2c5ABER'): IGhLznNDt('GBEEJDEQFj4EFg9bIiscGQ==') } });} } async function handleConfigAPI(request, env) { const url = new URL(request.url); const token = url.searchParams.get(IGhLznNDt('DQ4fLTY=')) || IGhLznNDt('HQQSKS0fAw=='); switch (request.method) { case IGhLznNDt('PiQg'): const config = await aMpbObNWS(env, token); return new Response(JSON.stringify(config), { headers: { IGhLznNDt('Og4aPD0dA2c5ABER'): IGhLznNDt('GBEEJDEQFj4EFg9bIiscGQ==') } }); case IGhLznNDt('KS4nHA=='): case IGhLznNDt('KTQg'): const newConfig = await request.json(); const success = await aZFLtFpKb(env, token, newConfig); return new Response(JSON.stringify({ success, message: success ? IGhLznNDt('6YS057yP5L6p5ayQ5omI5Yus') : IGhLznNDt('6YS057yP5L6p5ayQ5aWp6LWW') }), { status: success ? Math.floor(200.5) : Math.floor(500.5), headers: { IGhLznNDt('Og4aPD0dA2c5ABER'): IGhLznNDt('GBEEJDEQFj4EFg9bIiscGQ==') } }); default: return new Response(JSON.stringify({ error: IGhLznNDt('NAQAIDcXVyQCDUEVJDQcAC8J') }), { status: (455 - 50), headers: { IGhLznNDt('Og4aPD0dA2c5ABER'): IGhLznNDt('GBEEJDEQFj4EFg9bIiscGQ==') } });} } async function handleConfigsAPI(request, env) { if (request.method !== IGhLznNDt('PiQg')) { return new Response(JSON.stringify({ error: IGhLznNDt('NAQAIDcXVyQCDUEVJDQcAC8J') }), { status: Math.floor(405.5), headers: { IGhLznNDt('Og4aPD0dA2c5ABER'): IGhLznNDt('GBEEJDEQFj4EFg9bIiscGQ==') } });} const configs = await getAllConfigs(env); return new Response(JSON.stringify(configs), { headers: { IGhLznNDt('Og4aPD0dA2c5ABER'): IGhLznNDt('GBEEJDEQFj4EFg9bIiscGQ==') } });} async function handleTestAPI(request, env) { const url = new URL(request.url); const testType = url.searchParams.get(IGhLznNDt('DRgELQ==')); const target = url.searchParams.get(IGhLznNDt('DQAGLz0H')); switch (testType) { case IGhLznNDt('Fw4QLQ=='): return await testNodeConnectivity(target); case IGhLznNDt('CRMbMCE='): return await testProxyIP(target); default: return new Response(JSON.stringify({ success: true, message: IGhLznNDt('ODE95p2F5Yu55qyQ5bmP6L6a6KCh'), timestamp: new Date().toISOString(), version: IGhLznNDt('SE9EZmg=') }), { headers: { IGhLznNDt('Og4aPD0dA2c5ABER'): IGhLznNDt('GBEEJDEQFj4EFg9bIiscGQ==') } });} } async function testNodeConnectivity(nodeData) { try { if (!nodeData) { return new Response(JSON.stringify({ success: false, message: IGhLznNDt('572D5bGw6Iu254Ox5pSo5oyd') }), { status: Math.floor(400.5), headers: { IGhLznNDt('Og4aPD0dA2c5ABER'): IGhLznNDt('GBEEJDEQFj4EFg9bIiscGQ==') } });} const node = JSON.parse(decodeURIComponent(nodeData)); const testUrl = `http: const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), (5050 - 50)); try { const response = await fetch(testUrl, { method: IGhLznNDt('MSQ1DA=='), signal: controller.signal }); clearTimeout(timeoutId); return new Response(JSON.stringify({ success: true, message: IGhLznNDt('6Iu754OY6L6q5o+t5rST6K6m5omn5YuV'), latency: Date.now() - startTime, status: response.status }), { headers: { IGhLznNDt('Og4aPD0dA2c5ABER'): IGhLznNDt('GBEEJDEQFj4EFg9bIiscGQ==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: IGhLznNDt('6Iu754OY6L6q5o+t5aWp6LWW'), error: fetchError.message }), { headers: { IGhLznNDt('Og4aPD0dA2c5ABER'): IGhLznNDt('GBEEJDEQFj4EFg9bIiscGQ==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: IGhLznNDt('6Iu754OY5rS/6K6d5aWp6LWW'), error: error.message }), { status: (550 - 50), headers: { IGhLznNDt('Og4aPD0dA2c5ABER'): IGhLznNDt('GBEEJDEQFj4EFg9bIiscGQ==') } });} } async function testProxyIP(proxyIP) { try { if (!proxyIP) { return new Response(JSON.stringify({ success: false, message: IGhLznNDt('572D5bGw5LqX55GOESM=') }), { status: (500 - 100), headers: { IGhLznNDt('Og4aPD0dA2c5ABER'): IGhLznNDt('GBEEJDEQFj4EFg9bIiscGQ==') } });} const startTime = Date.now(); const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), (5050 - 50)); try { const testUrl = `http: const response = await fetch(testUrl, { method: IGhLznNDt('MSQ1DA=='), signal: controller.signal }); clearTimeout(timeoutId); const latency = Date.now() - startTime; return new Response(JSON.stringify({ success: true, message: IGhLznNDt('5Lqa55GnPRjmtJPorqbmiafli5U='), latency: latency, ip: proxyIP }), { headers: { IGhLznNDt('Og4aPD0dA2c5ABER'): IGhLznNDt('GBEEJDEQFj4EFg9bIiscGQ==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: IGhLznNDt('5Lqa55GnPRjovobmj5blpYbota8='), error: fetchError.message, ip: proxyIP }), { headers: { IGhLznNDt('Og4aPD0dA2c5ABER'): IGhLznNDt('GBEEJDEQFj4EFg9bIiscGQ==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: IGhLznNDt('5Lqa55GnPRjmtJPorqblpYbota8='), error: error.message }), { status: (550 - 50), headers: { IGhLznNDt('Og4aPD0dA2c5ABER'): IGhLznNDt('GBEEJDEQFj4EFg9bIiscGQ==') } });} }