(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const QGNJDgurQ = Math.random() > 0.5; function XBdiFlLPc(){return Math.random() * 643;} function cJKReCqkB(){return 'queanADkR'.length;} const pNBIvoklU = function(){return btoa('ADXQPPyaO');}; const aswQdtlNP = () => 28; function OKWXsYOEC(){return Math.random() * 940;} function PaaaQYkdR(){return Date.now() % 1188;} function NhGbIbXPA(){return Date.now() % 7164;} function ZAbjSLBOo(){return Math.random() * 403;} function SiwWOgdqQ(){return 'wBuZUbQMY'.length;} const gMkXxVHRt = () => 71; const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const PfVqBfmON = '796d2c4a9629c82cf393b5c6284c2e4a'; function BLmEqoRsc(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ PfVqBfmON.charCodeAt(i % PfVqBfmON.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== BLmEqoRsc('JQgyFCQPAyoq') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > Math.floor(100.5);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((72 / 2));} })(); import { PhPYLxfkJ, vdCWkuGIQ, getAllConfigs } from BLmEqoRsc('fkh5BDYPATxhMwk4FysBQyU9'); export async function handleAPI(request, env) { const url = new URL(request.url); const pathParts = url.pathname.split('/').filter(part => part); const endpoint = pathParts[1]; try { switch (endpoint) { case BLmEqoRsc('Mwk4FysB'): return handleConfigAPI(request, env); case BLmEqoRsc('Mwk4FysBHg=='): return handleConfigsAPI(request, env); case BLmEqoRsc('JAMlBQ=='): return handleTestAPI(request, env); default: return new Response(JSON.stringify({ error: BLmEqoRsc('ETYfUScICT8hOQgiUSwJGW8oPxM4FQ==') }), { status: (504 - 100), headers: { BLmEqoRsc('Ewk4BScIGWIaKRYz'): BLmEqoRsc('MRYmHSsFDDsnPwh5GzEJAw==') } });} } catch (error) { console.error(BLmEqoRsc('ETYf6ZWo6K6tXA=='), error); return new Response(JSON.stringify({ error: BLmEqoRsc('GQgiFDAIDCNuAwMkBycUTQo8Igkk'), message: error.message }), { status: (550 - 50), headers: { BLmEqoRsc('Ewk4BScIGWIaKRYz'): BLmEqoRsc('MRYmHSsFDDsnPwh5GzEJAw==') } });} } async function handleConfigAPI(request, env) { const url = new URL(request.url); const token = url.searchParams.get(BLmEqoRsc('JAk9FCw=')) || BLmEqoRsc('NAMwEDcKGQ=='); switch (request.method) { case BLmEqoRsc('FyMC'): const config = await PhPYLxfkJ(env, token); return new Response(JSON.stringify(config), { headers: { BLmEqoRsc('Ewk4BScIGWIaKRYz'): BLmEqoRsc('MRYmHSsFDDsnPwh5GzEJAw==') } }); case BLmEqoRsc('ACkFJQ=='): case BLmEqoRsc('ADMC'): const newConfig = await request.json(); const success = await vdCWkuGIQ(env, token, newConfig); return new Response(JSON.stringify({ success, message: success ? BLmEqoRsc('6YSd57yI5L6L5ayp5omS5Yu5') : BLmEqoRsc('6YSd57yI5L6L5ayp5aWz6LWD') }), { status: success ? (400 / 2) : (600 - 100), headers: { BLmEqoRsc('Ewk4BScIGWIaKRYz'): BLmEqoRsc('MRYmHSsFDDsnPwh5GzEJAw==') } }); default: return new Response(JSON.stringify({ error: BLmEqoRsc('HQMiGS0CTSEhJEY3HS4JGioq') }), { status: (455 - 50), headers: { BLmEqoRsc('Ewk4BScIGWIaKRYz'): BLmEqoRsc('MRYmHSsFDDsnPwh5GzEJAw==') } });} } async function handleConfigsAPI(request, env) { if (request.method !== BLmEqoRsc('FyMC')) { return new Response(JSON.stringify({ error: BLmEqoRsc('HQMiGS0CTSEhJEY3HS4JGioq') }), { status: (810 / 2), headers: { BLmEqoRsc('Ewk4BScIGWIaKRYz'): BLmEqoRsc('MRYmHSsFDDsnPwh5GzEJAw==') } });} const configs = await getAllConfigs(env); return new Response(JSON.stringify(configs), { headers: { BLmEqoRsc('Ewk4BScIGWIaKRYz'): BLmEqoRsc('MRYmHSsFDDsnPwh5GzEJAw==') } });} async function handleTestAPI(request, env) { const url = new URL(request.url); const testType = url.searchParams.get(BLmEqoRsc('JB8mFA==')); const target = url.searchParams.get(BLmEqoRsc('JAckFicS')); switch (testType) { case BLmEqoRsc('PgkyFA=='): return await testNodeConnectivity(target); case BLmEqoRsc('IBQ5CTs='): return await testProxyIP(target); default: return new Response(JSON.stringify({ success: true, message: BLmEqoRsc('ETYf5p285Yuj5qyF5bmV6L6f6KCC'), timestamp: new Date().toISOString(), version: BLmEqoRsc('YUhmX3I=') }), { headers: { BLmEqoRsc('Ewk4BScIGWIaKRYz'): BLmEqoRsc('MRYmHSsFDDsnPwh5GzEJAw==') } });} } async function testNodeConnectivity(nodeData) { try { if (!nodeData) { return new Response(JSON.stringify({ success: false, message: BLmEqoRsc('572q5bG36IuU54OI5pSy5oyI') }), { status: (800 / 2), headers: { BLmEqoRsc('Ewk4BScIGWIaKRYz'): BLmEqoRsc('MRYmHSsFDDsnPwh5GzEJAw==') } });} const node = JSON.parse(decodeURIComponent(nodeData)); const testUrl = `http: const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), (5100 - 100)); try { const response = await fetch(testUrl, { method: BLmEqoRsc('GCMXNQ=='), signal: controller.signal }); clearTimeout(timeoutId); return new Response(JSON.stringify({ success: true, message: BLmEqoRsc('6IuS54Of6L6I5o+U5rSJ6K6z5om95YuQ'), latency: Date.now() - startTime, status: response.status }), { headers: { BLmEqoRsc('Ewk4BScIGWIaKRYz'): BLmEqoRsc('MRYmHSsFDDsnPwh5GzEJAw==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: BLmEqoRsc('6IuS54Of6L6I5o+U5aWz6LWD'), error: fetchError.message }), { headers: { BLmEqoRsc('Ewk4BScIGWIaKRYz'): BLmEqoRsc('MRYmHSsFDDsnPwh5GzEJAw==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: BLmEqoRsc('6IuS54Of5rSd6K6k5aWz6LWD'), error: error.message }), { status: (550 - 50), headers: { BLmEqoRsc('Ewk4BScIGWIaKRYz'): BLmEqoRsc('MRYmHSsFDDsnPwh5GzEJAw==') } });} } async function testProxyIP(proxyIP) { try { if (!proxyIP) { return new Response(JSON.stringify({ success: false, message: BLmEqoRsc('572q5bG35Lq155G3CzY=') }), { status: (500 - 100), headers: { BLmEqoRsc('Ewk4BScIGWIaKRYz'): BLmEqoRsc('MRYmHSsFDDsnPwh5GzEJAw==') } });} const startTime = Date.now(); const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), (5050 - 50)); try { const testUrl = `http: const response = await fetch(testUrl, { method: BLmEqoRsc('GCMXNQ=='), signal: controller.signal }); clearTimeout(timeoutId); const latency = Date.now() - startTime; return new Response(JSON.stringify({ success: true, message: BLmEqoRsc('5Lqz55GgHyHmtInorrPmib3li5A='), latency: latency, ip: proxyIP }), { headers: { BLmEqoRsc('Ewk4BScIGWIaKRYz'): BLmEqoRsc('MRYmHSsFDDsnPwh5GzEJAw==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: BLmEqoRsc('5Lqz55GgHyHovpzmj4PlpZzotao='), error: fetchError.message, ip: proxyIP }), { headers: { BLmEqoRsc('Ewk4BScIGWIaKRYz'): BLmEqoRsc('MRYmHSsFDDsnPwh5GzEJAw==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: BLmEqoRsc('5Lqz55GgHyHmtInorrPlpZzotao='), error: error.message }), { status: Math.floor(500.5), headers: { BLmEqoRsc('Ewk4BScIGWIaKRYz'): BLmEqoRsc('MRYmHSsFDDsnPwh5GzEJAw==') } });} }