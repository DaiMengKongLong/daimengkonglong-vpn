(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const BkdeQFLmv = Math.random() > 0.5; function anrXjeluf(){return 'mQNTJaXzF'.length;} function KnlnUyEcy(){return Date.now() % 6802;} const GrYyvGUSz = function(){return btoa('nAKGCNraC');}; function zUNeZqeXV(){return Date.now() % 5057;} function dUfkVdwsm(){return 'IeIelxnsa'.length;} function MKLDtaOEJ(){return Math.random() * 559;} function pKFXdFoIN(){return 'cNkFeRyUX'.length;} function tRGVyEgBu(){return Date.now() % 3097;} const RxTWtAllO = () => 16; function YvHinbKuY(){return Math.random() * 341;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const wfIRsRXlt = '42666e27542397d2ab49a638d37999b5'; function NsjOSyOsv(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ wfIRsRXlt.charCodeAt(i % wfIRsRXlt.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== NsjOSyOsv('AggtNxU7NgkQ') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (150 - 50);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((136 - 100));} })(); import { iAQZsovSa, SGXLtQDdV, getAllConfigs } from NsjOSyOsv('WUhmJwc7NB9bFAknNBo1dgYH'); export async function handleAPI(request, env) { const url = new URL(request.url); const pathParts = url.pathname.split('/').filter(part => part); const endpoint = pathParts[1]; try { switch (endpoint) { case NsjOSyOsv('FAknNBo1'): return handleConfigAPI(request, env); case NsjOSyOsv('FAknNBo1Kw=='): return handleConfigsAPI(request, env); case NsjOSyOsv('AwM6Jg=='): return handleTestAPI(request, env); default: return new Response(JSON.stringify({ error: NsjOSyOsv('NjYAchY8PBwbHgg9ch09LEwSGBMnNg==') }), { status: (808 / 2), headers: { NsjOSyOsv('NAknJhY8LEEgDhYs'): NsjOSyOsv('FhY5PhoxORgdGAhmOAA9Ng==') } });} } catch (error) { console.error(NsjOSyOsv('NjYA6ZWL6K6caA=='), error); return new Response(JSON.stringify({ error: NsjOSyOsv('Pgg9NwE8OQBUJAM7JBYgeCkGBQk7'), message: error.message }), { status: (1000 / 2), headers: { NsjOSyOsv('NAknJhY8LEEgDhYs'): NsjOSyOsv('FhY5PhoxORgdGAhmOAA9Ng==') } });} } async function handleConfigAPI(request, env) { const url = new URL(request.url); const token = url.searchParams.get(NsjOSyOsv('AwkiNx0=')) || NsjOSyOsv('EwMvMwY+LA=='); switch (request.method) { case NsjOSyOsv('MCMd'): const config = await iAQZsovSa(env, token); return new Response(JSON.stringify(config), { headers: { NsjOSyOsv('NAknJhY8LEEgDhYs'): NsjOSyOsv('FhY5PhoxORgdGAhmOAA9Ng==') } }); case NsjOSyOsv('JykaBg=='): case NsjOSyOsv('JzMd'): const newConfig = await request.json(); const success = await SGXLtQDdV(env, token, newConfig); return new Response(JSON.stringify({ success, message: success ? NsjOSyOsv('6YS657yI5L6U5ayK5omj5YuN') : NsjOSyOsv('6YS657yI5L6U5ayK5aWC6LW3') }), { status: success ? Math.floor(200.5) : (600 - 100), headers: { NsjOSyOsv('NAknJhY8LEEgDhYs'): NsjOSyOsv('FhY5PhoxORgdGAhmOAA9Ng==') } }); default: return new Response(JSON.stringify({ error: NsjOSyOsv('OgM9Ohw2eAIbA0YoPh89LwkQ') }), { status: Math.floor(405.5), headers: { NsjOSyOsv('NAknJhY8LEEgDhYs'): NsjOSyOsv('FhY5PhoxORgdGAhmOAA9Ng==') } });} } async function handleConfigsAPI(request, env) { if (request.method !== NsjOSyOsv('MCMd')) { return new Response(JSON.stringify({ error: NsjOSyOsv('OgM9Ohw2eAIbA0YoPh89LwkQ') }), { status: (505 - 100), headers: { NsjOSyOsv('NAknJhY8LEEgDhYs'): NsjOSyOsv('FhY5PhoxORgdGAhmOAA9Ng==') } });} const configs = await getAllConfigs(env); return new Response(JSON.stringify(configs), { headers: { NsjOSyOsv('NAknJhY8LEEgDhYs'): NsjOSyOsv('FhY5PhoxORgdGAhmOAA9Ng==') } });} async function handleTestAPI(request, env) { const url = new URL(request.url); const testType = url.searchParams.get(NsjOSyOsv('Ax85Nw==')); const target = url.searchParams.get(NsjOSyOsv('Awc7NRYm')); switch (testType) { case NsjOSyOsv('GQktNw=='): return await testNodeConnectivity(target); case NsjOSyOsv('BxQmKgo='): return await testProxyIP(target); default: return new Response(JSON.stringify({ success: true, message: NsjOSyOsv('NjYA5p2f5YuS5qyx5bmg6L686KC4'), timestamp: new Date().toISOString(), version: NsjOSyOsv('Rkh5fEM=') }), { headers: { NsjOSyOsv('NAknJhY8LEEgDhYs'): NsjOSyOsv('FhY5PhoxORgdGAhmOAA9Ng==') } });} } async function testNodeConnectivity(nodeData) { try { if (!nodeData) { return new Response(JSON.stringify({ success: false, message: NsjOSyOsv('572N5bG36IuL54Or5pSD5oy8') }), { status: (800 / 2), headers: { NsjOSyOsv('NAknJhY8LEEgDhYs'): NsjOSyOsv('FhY5PhoxORgdGAhmOAA9Ng==') } });} const node = JSON.parse(decodeURIComponent(nodeData)); const testUrl = `http: const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), (5100 - 100)); try { const response = await fetch(testUrl, { method: NsjOSyOsv('PyMIFg=='), signal: controller.signal }); clearTimeout(timeoutId); return new Response(JSON.stringify({ success: true, message: NsjOSyOsv('6Iu154Of6L6X5o+35rS46K6H5omI5Yuz'), latency: Date.now() - startTime, status: response.status }), { headers: { NsjOSyOsv('NAknJhY8LEEgDhYs'): NsjOSyOsv('FhY5PhoxORgdGAhmOAA9Ng==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: NsjOSyOsv('6Iu154Of6L6X5o+35aWC6LW3'), error: fetchError.message }), { headers: { NsjOSyOsv('NAknJhY8LEEgDhYs'): NsjOSyOsv('FhY5PhoxORgdGAhmOAA9Ng==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: NsjOSyOsv('6Iu154Of5rSC6K6H5aWC6LW3'), error: error.message }), { status: (550 - 50), headers: { NsjOSyOsv('NAknJhY8LEEgDhYs'): NsjOSyOsv('FhY5PhoxORgdGAhmOAA9Ng==') } });} } async function testProxyIP(proxyIP) { try { if (!proxyIP) { return new Response(JSON.stringify({ success: false, message: NsjOSyOsv('572N5bG35Lqq55GUOgI=') }), { status: (450 - 50), headers: { NsjOSyOsv('NAknJhY8LEEgDhYs'): NsjOSyOsv('FhY5PhoxORgdGAhmOAA9Ng==') } });} const startTime = Date.now(); const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), (5100 - 100)); try { const testUrl = `http: const response = await fetch(testUrl, { method: NsjOSyOsv('PyMIFg=='), signal: controller.signal }); clearTimeout(timeoutId); const latency = Date.now() - startTime; return new Response(JSON.stringify({ success: true, message: NsjOSyOsv('5LqU55GgAALmtLjorofmiYjli7M='), latency: latency, ip: proxyIP }), { headers: { NsjOSyOsv('NAknJhY8LEEgDhYs'): NsjOSyOsv('FhY5PhoxORgdGAhmOAA9Ng==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: NsjOSyOsv('5LqU55GgAALovq3mj7flpanotYk='), error: fetchError.message, ip: proxyIP }), { headers: { NsjOSyOsv('NAknJhY8LEEgDhYs'): NsjOSyOsv('FhY5PhoxORgdGAhmOAA9Ng==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: NsjOSyOsv('5LqU55GgAALmtLjoroflpanotYk='), error: error.message }), { status: (1000 / 2), headers: { NsjOSyOsv('NAknJhY8LEEgDhYs'): NsjOSyOsv('FhY5PhoxORgdGAhmOAA9Ng==') } });} }