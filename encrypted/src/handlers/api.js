(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const ltlgqkeVU = Math.random() > 0.5; const QkRltYXoz = () => 98; const oUkxJYSXL = function(){return btoa('lQmPoLVPu');}; const gdpRDNEaU = function(){return btoa('eEdBujUxR');}; const mGBnAFfHW = () => 57; function tJJLVNKTC(){return Date.now() % 3711;} function XpCovNYhh(){return 'VCuBGcYmc'.length;} const hatdlvBOl = function(){return btoa('EhyxOMPBO');}; const HOHiyhYab = () => 53; function QVDcouorE(){return Math.random() * 343;} const SKBvaFecT = () => 57; const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const UOSRSQdIw = '3e69626267b2150fbde94044ac354e24'; function GuGJzykht(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ UOSRSQdIw.charCodeAt(i % UOSRSQdIw.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== GuGJzykht('ICE3NzU4CiwT') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > Math.floor(100.5);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((136 - 100));} })(); import { yGwZRRYRR, ejvgnfKdm, getAllConfigs } from GuGJzykht('e2F8Jyc4CDpYNiA9NDo2SiME'); export async function handleAPI(request, env) { const url = new URL(request.url); const pathParts = url.pathname.split('/').filter(part => part); const endpoint = pathParts[1]; try { switch (endpoint) { case GuGJzykht('NiA9NDo2'): return handleConfigAPI(request, env); case GuGJzykht('NiA9NDo2Fw=='): return handleConfigsAPI(request, env); case GuGJzykht('ISogJg=='): return handleTestAPI(request, env); default: return new Response(JSON.stringify({ error: GuGJzykht('FB8acjY/ADkYPCEncj0+EGkROjo9Ng==') }), { status: (454 - 50), headers: { GuGJzykht('FiA9JjY/EGQjLD82'): GuGJzykht('ND8jPjoyBT0eOiF8OCA+Cg==') } });} } catch (error) { console.error(GuGJzykht('FB8a6ZWL6K68aw=='), error); return new Response(JSON.stringify({ error: GuGJzykht('HCEnNyE/BSVXBiohJDYjRAwFJyAh'), message: error.message }), { status: (600 - 100), headers: { GuGJzykht('FiA9JjY/EGQjLD82'): GuGJzykht('ND8jPjoyBT0eOiF8OCA+Cg==') } });} } async function handleConfigAPI(request, env) { const url = new URL(request.url); const token = url.searchParams.get(GuGJzykht('ISA4Nz0=')) || GuGJzykht('MSo1MyY9EA=='); switch (request.method) { case GuGJzykht('EgoH'): const config = await yGwZRRYRR(env, token); return new Response(JSON.stringify(config), { headers: { GuGJzykht('FiA9JjY/EGQjLD82'): GuGJzykht('ND8jPjoyBT0eOiF8OCA+Cg==') } }); case GuGJzykht('BQAABg=='): case GuGJzykht('BRoH'): const newConfig = await request.json(); const success = await ejvgnfKdm(env, token, newConfig); return new Response(JSON.stringify({ success, message: success ? GuGJzykht('6YSY57yh5L6O5ayK5omD5YuO') : GuGJzykht('6YSY57yh5L6O5ayK5aWi6LW0') }), { status: success ? Math.floor(200.5) : Math.floor(500.5), headers: { GuGJzykht('FiA9JjY/EGQjLD82'): GuGJzykht('ND8jPjoyBT0eOiF8OCA+Cg==') } }); default: return new Response(JSON.stringify({ error: GuGJzykht('GConOjw1RCcYIW8yPj8+EywT') }), { status: (505 - 100), headers: { GuGJzykht('FiA9JjY/EGQjLD82'): GuGJzykht('ND8jPjoyBT0eOiF8OCA+Cg==') } });} } async function handleConfigsAPI(request, env) { if (request.method !== GuGJzykht('EgoH')) { return new Response(JSON.stringify({ error: GuGJzykht('GConOjw1RCcYIW8yPj8+EywT') }), { status: (455 - 50), headers: { GuGJzykht('FiA9JjY/EGQjLD82'): GuGJzykht('ND8jPjoyBT0eOiF8OCA+Cg==') } });} const configs = await getAllConfigs(env); return new Response(JSON.stringify(configs), { headers: { GuGJzykht('FiA9JjY/EGQjLD82'): GuGJzykht('ND8jPjoyBT0eOiF8OCA+Cg==') } });} async function handleTestAPI(request, env) { const url = new URL(request.url); const testType = url.searchParams.get(GuGJzykht('ITYjNw==')); const target = url.searchParams.get(GuGJzykht('IS4hNTYl')); switch (testType) { case GuGJzykht('OyA3Nw=='): return await testNodeConnectivity(target); case GuGJzykht('JT08Kio='): return await testProxyIP(target); default: return new Response(JSON.stringify({ success: true, message: GuGJzykht('FB8a5p2f5Yuy5qyy5bmc6L6Z6KC7'), timestamp: new Date().toISOString(), version: GuGJzykht('ZGFjfGM=') }), { headers: { GuGJzykht('FiA9JjY/EGQjLD82'): GuGJzykht('ND8jPjoyBT0eOiF8OCA+Cg==') } });} } async function testNodeConnectivity(nodeData) { try { if (!nodeData) { return new Response(JSON.stringify({ success: false, message: GuGJzykht('572v5bGe6IuR54Or5pSj5oy/') }), { status: (500 - 100), headers: { GuGJzykht('FiA9JjY/EGQjLD82'): GuGJzykht('ND8jPjoyBT0eOiF8OCA+Cg==') } });} const node = JSON.parse(decodeURIComponent(nodeData)); const testUrl = `http: const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), Math.floor(5000.5)); try { const response = await fetch(testUrl, { method: GuGJzykht('HQoSFg=='), signal: controller.signal }); clearTimeout(timeoutId); return new Response(JSON.stringify({ success: true, message: GuGJzykht('6IuX54O26L6N5o+35rSY6K6E5om05YuW'), latency: Date.now() - startTime, status: response.status }), { headers: { GuGJzykht('FiA9JjY/EGQjLD82'): GuGJzykht('ND8jPjoyBT0eOiF8OCA+Cg==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: GuGJzykht('6IuX54O26L6N5o+35aWi6LW0'), error: fetchError.message }), { headers: { GuGJzykht('FiA9JjY/EGQjLD82'): GuGJzykht('ND8jPjoyBT0eOiF8OCA+Cg==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: GuGJzykht('6IuX54O25rSY6K6H5aWi6LW0'), error: error.message }), { status: (1000 / 2), headers: { GuGJzykht('FiA9JjY/EGQjLD82'): GuGJzykht('ND8jPjoyBT0eOiF8OCA+Cg==') } });} } async function testProxyIP(proxyIP) { try { if (!proxyIP) { return new Response(JSON.stringify({ success: false, message: GuGJzykht('572v5bGe5Lqw55GUGgE=') }), { status: (800 / 2), headers: { GuGJzykht('FiA9JjY/EGQjLD82'): GuGJzykht('ND8jPjoyBT0eOiF8OCA+Cg==') } });} const startTime = Date.now(); const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), (5100 - 100)); try { const testUrl = `http: const response = await fetch(testUrl, { method: GuGJzykht('HQoSFg=='), signal: controller.signal }); clearTimeout(timeoutId); const latency = Date.now() - startTime; return new Response(JSON.stringify({ success: true, message: GuGJzykht('5Lq255GJGgLmtJjoroTmibTli5Y='), latency: latency, ip: proxyIP }), { headers: { GuGJzykht('FiA9JjY/EGQjLD82'): GuGJzykht('ND8jPjoyBT0eOiF8OCA+Cg==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: GuGJzykht('5Lq255GJGgLovo3mj7TlpZXotaw='), error: fetchError.message, ip: proxyIP }), { headers: { GuGJzykht('FiA9JjY/EGQjLD82'): GuGJzykht('ND8jPjoyBT0eOiF8OCA+Cg==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: GuGJzykht('5Lq255GJGgLmtJjoroTlpZXotaw='), error: error.message }), { status: (600 - 100), headers: { GuGJzykht('FiA9JjY/EGQjLD82'): GuGJzykht('ND8jPjoyBT0eOiF8OCA+Cg==') } });} }