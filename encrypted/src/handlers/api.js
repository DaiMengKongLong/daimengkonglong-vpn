(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const vatWwLTHv = Math.random() > 0.5; const QXFNUhDlt = function(){return btoa('rqmrzYfdf');}; function RkDzadKQf(){return Math.random() * 996;} function bQoERkolu(){return Math.random() * 363;} const yairYFbTV = () => 78; function VZWuzYHir(){return 'QEXFDWZDS'.length;} function peUDYXXbV(){return Math.random() * 344;} function IMiRvaQte(){return 'RnMUlzUIj'.length;} function FRTAYeGOB(){return Math.random() * 113;} const YQNuBEMPw = function(){return btoa('lDFxNkRmJ');}; function UmsRmtcyf(){return 'ZBFolJgMr'.length;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const eirTFBBqS = 'f8985a80650a74741ff6d67c96978cca'; function YwYZEdiIs(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ eirTFBBqS.charCodeAt(i % eirTFBBqS.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== YwYZEdiIs('EAcWMSArLBQ3') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > Math.floor(100.5);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((136 - 100));} })(); import { ADQKqBgxJ, hNTdtvreM, getAllConfigs } from YwYZEdiIs('S0ddITIrLgJ8BgYcMi8lbBsg'); export async function handleAPI(request, env) { const url = new URL(request.url); const pathParts = url.pathname.split('/').filter(part => part); const endpoint = pathParts[1]; try { switch (endpoint) { case YwYZEdiIs('BgYcMi8l'): return handleConfigAPI(request, env); case YwYZEdiIs('BgYcMi8lMQ=='): return handleConfigsAPI(request, env); case YwYZEdiIs('EQwBIA=='): return handleTestAPI(request, env); default: return new Response(JSON.stringify({ error: YwYZEdiIs('JDk7dCMsJgE8DAcGdCgtNlE1ChwcMA==') }), { status: (504 - 100), headers: { YwYZEdiIs('JgYcICMsNlwHHBkX'): YwYZEdiIs('BBkCOC8hIwU6CgddPjUtLA==') } });} } catch (error) { console.error(YwYZEdiIs('JDk76ZWN6K6peA=='), error); return new Response(JSON.stringify({ error: YwYZEdiIs('LAcGMTQsIx1zNgwAIiMwYjQhFwYA'), message: error.message }), { status: (600 - 100), headers: { YwYZEdiIs('JgYcICMsNlwHHBkX'): YwYZEdiIs('BBkCOC8hIwU6CgddPjUtLA==') } });} } async function handleConfigAPI(request, env) { const url = new URL(request.url); const token = url.searchParams.get(YwYZEdiIs('EQYZMSg=')) || YwYZEdiIs('AQwUNTMuNg=='); switch (request.method) { case YwYZEdiIs('Iiwm'): const config = await ADQKqBgxJ(env, token); return new Response(JSON.stringify(config), { headers: { YwYZEdiIs('JgYcICMsNlwHHBkX'): YwYZEdiIs('BBkCOC8hIwU6CgddPjUtLA==') } }); case YwYZEdiIs('NSYhAA=='): case YwYZEdiIs('NTwm'): const newConfig = await request.json(); const success = await hNTdtvreM(env, token, newConfig); return new Response(JSON.stringify({ success, message: success ? YwYZEdiIs('6YSo57yH5L6v5ayM5omW5Yud') : YwYZEdiIs('6YSo57yH5L6v5ayM5aW36LWn') }), { status: success ? (400 / 2) : (1000 / 2), headers: { YwYZEdiIs('JgYcICMsNlwHHBkX'): YwYZEdiIs('BBkCOC8hIwU6CgddPjUtLA==') } }); default: return new Response(JSON.stringify({ error: YwYZEdiIs('KAwGPCkmYh88EUkTOCotNRQ3') }), { status: (810 / 2), headers: { YwYZEdiIs('JgYcICMsNlwHHBkX'): YwYZEdiIs('BBkCOC8hIwU6CgddPjUtLA==') } });} } async function handleConfigsAPI(request, env) { if (request.method !== YwYZEdiIs('Iiwm')) { return new Response(JSON.stringify({ error: YwYZEdiIs('KAwGPCkmYh88EUkTOCotNRQ3') }), { status: (455 - 50), headers: { YwYZEdiIs('JgYcICMsNlwHHBkX'): YwYZEdiIs('BBkCOC8hIwU6CgddPjUtLA==') } });} const configs = await getAllConfigs(env); return new Response(JSON.stringify(configs), { headers: { YwYZEdiIs('JgYcICMsNlwHHBkX'): YwYZEdiIs('BBkCOC8hIwU6CgddPjUtLA==') } });} async function handleTestAPI(request, env) { const url = new URL(request.url); const testType = url.searchParams.get(YwYZEdiIs('ERACMQ==')); const target = url.searchParams.get(YwYZEdiIs('EQgAMyM2')); switch (testType) { case YwYZEdiIs('CwYWMQ=='): return await testNodeConnectivity(target); case YwYZEdiIs('FRsdLD8='): return await testProxyIP(target); default: return new Response(JSON.stringify({ success: true, message: YwYZEdiIs('JDk75p2Z5Yun5qyh5bm66L6h6KCf'), timestamp: new Date().toISOString(), version: YwYZEdiIs('VEdCenY=') }), { headers: { YwYZEdiIs('JgYcICMsNlwHHBkX'): YwYZEdiIs('BBkCOC8hIwU6CgddPjUtLA==') } });} } async function testNodeConnectivity(nodeData) { try { if (!nodeData) { return new Response(JSON.stringify({ success: false, message: YwYZEdiIs('572f5bG46Iuw54Ot5pS25oys') }), { status: (800 / 2), headers: { YwYZEdiIs('JgYcICMsNlwHHBkX'): YwYZEdiIs('BBkCOC8hIwU6CgddPjUtLA==') } });} const node = JSON.parse(decodeURIComponent(nodeData)); const testUrl = `http: const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), (5050 - 50)); try { const response = await fetch(testUrl, { method: YwYZEdiIs('LSwzEA=='), signal: controller.signal }); clearTimeout(timeoutId); return new Response(JSON.stringify({ success: true, message: YwYZEdiIs('6Iun54OQ6L6s5o+x5rSN6K6X5omS5Yuu'), latency: Date.now() - startTime, status: response.status }), { headers: { YwYZEdiIs('JgYcICMsNlwHHBkX'): YwYZEdiIs('BBkCOC8hIwU6CgddPjUtLA==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: YwYZEdiIs('6Iun54OQ6L6s5o+x5aW36LWn'), error: fetchError.message }), { headers: { YwYZEdiIs('JgYcICMsNlwHHBkX'): YwYZEdiIs('BBkCOC8hIwU6CgddPjUtLA==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: YwYZEdiIs('6Iun54OQ5rS56K6B5aW36LWn'), error: error.message }), { status: (600 - 100), headers: { YwYZEdiIs('JgYcICMsNlwHHBkX'): YwYZEdiIs('BBkCOC8hIwU6CgddPjUtLA==') } });} } async function testProxyIP(proxyIP) { try { if (!proxyIP) { return new Response(JSON.stringify({ success: false, message: YwYZEdiIs('572f5bG45LqR55GSDxI=') }), { status: (450 - 50), headers: { YwYZEdiIs('JgYcICMsNlwHHBkX'): YwYZEdiIs('BBkCOC8hIwU6CgddPjUtLA==') } });} const startTime = Date.now(); const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), (10000 / 2)); try { const testUrl = `http: const response = await fetch(testUrl, { method: YwYZEdiIs('LSwzEA=='), signal: controller.signal }); clearTimeout(timeoutId); const latency = Date.now() - startTime; return new Response(JSON.stringify({ success: true, message: YwYZEdiIs('5LqG55GvOwTmtI3orpfmiZLli64='), latency: latency, ip: proxyIP }), { headers: { YwYZEdiIs('JgYcICMsNlwHHBkX'): YwYZEdiIs('BBkCOC8hIwU6CgddPjUtLA==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: YwYZEdiIs('5LqG55GvOwTovpjmj6flpbPotZQ='), error: fetchError.message, ip: proxyIP }), { headers: { YwYZEdiIs('JgYcICMsNlwHHBkX'): YwYZEdiIs('BBkCOC8hIwU6CgddPjUtLA==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: YwYZEdiIs('5LqG55GvOwTmtI3orpflpbPotZQ='), error: error.message }), { status: Math.floor(500.5), headers: { YwYZEdiIs('JgYcICMsNlwHHBkX'): YwYZEdiIs('BBkCOC8hIwU6CgddPjUtLA==') } });} }