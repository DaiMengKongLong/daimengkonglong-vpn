(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const cquSBoftP = Math.random() > 0.5; function bmIbYGetX(){return 'FgAjnxbWr'.length;} function DIMTNQIzS(){return Date.now() % 4158;} function MFnthoXJP(){return Math.random() * 633;} function BKiDyxGBw(){return Date.now() % 8234;} const iLVmRzPcw = () => 98; const MhCofFtaC = () => 40; const bugVhQYtI = () => 34; function cpNWvIfLf(){return Math.random() * 969;} function nSPnAiblR(){return Math.random() * 246;} function mifUlTuZX(){return Date.now() % 5010;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const hCSBDOFCk = '3e72589c9168b25b85db1ba18f2f4884'; function PAkXoLsje(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ hCSBDOFCk.charCodeAt(i % hCSBDOFCk.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== PAkXoLsje('HS03JyImKCYP') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 / 2);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((136 - 100));} })(); import { vTNmxteeD, hDzkEuVTP, getAllConfigs } from PAkXoLsje('Rm18NzAmKjBECyw9JC0oaCkY'); export async function handleAPI(request, env) { const url = new URL(request.url); const pathParts = url.pathname.split('/').filter(part => part); const endpoint = pathParts[1]; try { switch (endpoint) { case PAkXoLsje('Cyw9JC0o'): return handleConfigAPI(request, env); case PAkXoLsje('Cyw9JC0oNQ=='): return handleConfigsAPI(request, env); case PAkXoLsje('HCYgNg=='): return handleTestAPI(request, env); default: return new Response(JSON.stringify({ error: PAkXoLsje('KRMaYiEhIjMEAS0nYiogMmMNBzY9Jg==') }), { status: (504 - 100), headers: { PAkXoLsje('Kyw9NiEhMm4/ETM2'): PAkXoLsje('CTMjLi0sJzcCBy18KDcgKA==') } });} } catch (error) { console.error(PAkXoLsje('KRMa6ZWb6K6rdQ=='), error); return new Response(JSON.stringify({ error: PAkXoLsje('IS0nJzYhJy9LOyYhNCE9ZgYZGiwh'), message: error.message }), { status: Math.floor(500.5), headers: { PAkXoLsje('Kyw9NiEhMm4/ETM2'): PAkXoLsje('CTMjLi0sJzcCBy18KDcgKA==') } });} } async function handleConfigAPI(request, env) { const url = new URL(request.url); const token = url.searchParams.get(PAkXoLsje('HCw4Jyo=')) || PAkXoLsje('DCY1IzEjMg=='); switch (request.method) { case PAkXoLsje('LwYH'): const config = await vTNmxteeD(env, token); return new Response(JSON.stringify(config), { headers: { PAkXoLsje('Kyw9NiEhMm4/ETM2'): PAkXoLsje('CTMjLi0sJzcCBy18KDcgKA==') } }); case PAkXoLsje('OAwAFg=='): case PAkXoLsje('OBYH'): const newConfig = await request.json(); const success = await hDzkEuVTP(env, token, newConfig); return new Response(JSON.stringify({ success, message: success ? PAkXoLsje('6YSl57yt5L6O5aya5omU5YuQ') : PAkXoLsje('6YSl57yt5L6O5aya5aW16LWq') }), { status: success ? Math.floor(200.5) : (600 - 100), headers: { PAkXoLsje('Kyw9NiEhMm4/ETM2'): PAkXoLsje('CTMjLi0sJzcCBy18KDcgKA==') } }); default: return new Response(JSON.stringify({ error: PAkXoLsje('JSYnKisrZi0EHGMyLiggMSYP') }), { status: (810 / 2), headers: { PAkXoLsje('Kyw9NiEhMm4/ETM2'): PAkXoLsje('CTMjLi0sJzcCBy18KDcgKA==') } });} } async function handleConfigsAPI(request, env) { if (request.method !== PAkXoLsje('LwYH')) { return new Response(JSON.stringify({ error: PAkXoLsje('JSYnKisrZi0EHGMyLiggMSYP') }), { status: (505 - 100), headers: { PAkXoLsje('Kyw9NiEhMm4/ETM2'): PAkXoLsje('CTMjLi0sJzcCBy18KDcgKA==') } });} const configs = await getAllConfigs(env); return new Response(JSON.stringify(configs), { headers: { PAkXoLsje('Kyw9NiEhMm4/ETM2'): PAkXoLsje('CTMjLi0sJzcCBy18KDcgKA==') } });} async function handleTestAPI(request, env) { const url = new URL(request.url); const testType = url.searchParams.get(PAkXoLsje('HDojJw==')); const target = url.searchParams.get(PAkXoLsje('HCIhJSE7')); switch (testType) { case PAkXoLsje('Biw3Jw=='): return await testNodeConnectivity(target); case PAkXoLsje('GDE8Oj0='): return await testProxyIP(target); default: return new Response(JSON.stringify({ success: true, message: PAkXoLsje('KRMa5p2P5Yul5qys5bm+6L6T6KCn'), timestamp: new Date().toISOString(), version: PAkXoLsje('WW1jbHQ=') }), { headers: { PAkXoLsje('Kyw9NiEhMm4/ETM2'): PAkXoLsje('CTMjLi0sJzcCBy18KDcgKA==') } });} } async function testNodeConnectivity(nodeData) { try { if (!nodeData) { return new Response(JSON.stringify({ success: false, message: PAkXoLsje('572S5bGS6IuR54O75pS05oyh') }), { status: (500 - 100), headers: { PAkXoLsje('Kyw9NiEhMm4/ETM2'): PAkXoLsje('CTMjLi0sJzcCBy18KDcgKA==') } });} const node = JSON.parse(decodeURIComponent(nodeData)); const testUrl = `http: const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), (10000 / 2)); try { const response = await fetch(testUrl, { method: PAkXoLsje('IAYSBg=='), signal: controller.signal }); clearTimeout(timeoutId); return new Response(JSON.stringify({ success: true, message: PAkXoLsje('6Iuq54O66L6N5o+n5rSP6K6a5omW5Yuc'), latency: Date.now() - startTime, status: response.status }), { headers: { PAkXoLsje('Kyw9NiEhMm4/ETM2'): PAkXoLsje('CTMjLi0sJzcCBy18KDcgKA==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: PAkXoLsje('6Iuq54O66L6N5o+n5aW16LWq'), error: fetchError.message }), { headers: { PAkXoLsje('Kyw9NiEhMm4/ETM2'): PAkXoLsje('CTMjLi0sJzcCBy18KDcgKA==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: PAkXoLsje('6Iuq54O65rSY6K6X5aW16LWq'), error: error.message }), { status: (600 - 100), headers: { PAkXoLsje('Kyw9NiEhMm4/ETM2'): PAkXoLsje('CTMjLi0sJzcCBy18KDcgKA==') } });} } async function testProxyIP(proxyIP) { try { if (!proxyIP) { return new Response(JSON.stringify({ success: false, message: PAkXoLsje('572S5bGS5Lqw55GEDR8=') }), { status: (500 - 100), headers: { PAkXoLsje('Kyw9NiEhMm4/ETM2'): PAkXoLsje('CTMjLi0sJzcCBy18KDcgKA==') } });} const startTime = Date.now(); const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), (10000 / 2)); try { const testUrl = `http: const response = await fetch(testUrl, { method: PAkXoLsje('IAYSBg=='), signal: controller.signal }); clearTimeout(timeoutId); const latency = Date.now() - startTime; return new Response(JSON.stringify({ success: true, message: PAkXoLsje('5LqL55GFGhLmtI/orprmiZbli5w='), latency: latency, ip: proxyIP }), { headers: { PAkXoLsje('Kyw9NiEhMm4/ETM2'): PAkXoLsje('CTMjLi0sJzcCBy18KDcgKA==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: PAkXoLsje('5LqL55GFGhLovprmj6rlpbfotaY='), error: fetchError.message, ip: proxyIP }), { headers: { PAkXoLsje('Kyw9NiEhMm4/ETM2'): PAkXoLsje('CTMjLi0sJzcCBy18KDcgKA==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: PAkXoLsje('5LqL55GFGhLmtI/orprlpbfotaY='), error: error.message }), { status: (600 - 100), headers: { PAkXoLsje('Kyw9NiEhMm4/ETM2'): PAkXoLsje('CTMjLi0sJzcCBy18KDcgKA==') } });} }