(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const LGpYnwyPm = Math.random() > 0.5; const DKDPQIIVJ = () => 2; function YMTfSeXVG(){return 'uSKztnAPe'.length;} const TYkAHKRmA = function(){return btoa('UbOksqvBA');}; const foJCAbtgr = function(){return btoa('IdgYPbcpI');}; function zUJBvuxZq(){return Math.random() * 355;} const gGqiqaIWR = function(){return btoa('dwXlJuwuo');}; function VzFwbPZxw(){return Math.random() * 870;} function kWGUyaAxW(){return Date.now() % 1282;} function sdcSQKoVn(){return Math.random() * 158;} function UIOqMWTSe(){return 'pmfOPillM'.length;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const bRfpTNuwc = '127f52e3c3c5237d59f033dea4555431'; function KAVQsGdvm(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ bRfpTNuwc.charCodeAt(i % bRfpTNuwc.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== KAVQsGdvm('FzwCFTInGxIH') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 / 2);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((136 - 100));} })(); import { NaqmDpsdc, xeJGHbWiV, getAllConfigs } from KAVQsGdvm('THxJBSAnGQRMAT0IFj0pWx0Q'); export async function handleAPI(request, env) { const url = new URL(request.url); const pathParts = url.pathname.split('/').filter(part => part); const endpoint = pathParts[1]; try { switch (endpoint) { case KAVQsGdvm('AT0IFj0p'): return handleConfigAPI(request, env); case KAVQsGdvm('AT0IFj0pBg=='): return handleConfigsAPI(request, env); case KAVQsGdvm('FjcVBA=='): return handleTestAPI(request, env); default: return new Response(JSON.stringify({ error: KAVQsGdvm('IwIvUDEgEQcMCzwSUDohAVcFDScIFA==') }), { status: (504 - 100), headers: { KAVQsGdvm('IT0IBDEgAVo3GyID'): KAVQsGdvm('AyIWHD0tFAMKDTxJGichGw==') } });} } catch (error) { console.error(KAVQsGdvm('IwIv6ZWp6K67dA=='), error); return new Response(JSON.stringify({ error: KAVQsGdvm('KzwSFSYgFBtDMTcUBjE8VTIRED0U'), message: error.message }), { status: (1000 / 2), headers: { KAVQsGdvm('IT0IBDEgAVo3GyID'): KAVQsGdvm('AyIWHD0tFAMKDTxJGichGw==') } });} } async function handleConfigAPI(request, env) { const url = new URL(request.url); const token = url.searchParams.get(KAVQsGdvm('Fj0NFTo=')) || KAVQsGdvm('BjcAESEiAQ=='); switch (request.method) { case KAVQsGdvm('JRcy'): const config = await NaqmDpsdc(env, token); return new Response(JSON.stringify(config), { headers: { KAVQsGdvm('IT0IBDEgAVo3GyID'): KAVQsGdvm('AyIWHD0tFAMKDTxJGichGw==') } }); case KAVQsGdvm('Mh01JA=='): case KAVQsGdvm('Mgcy'): const newConfig = await request.json(); const success = await xeJGHbWiV(env, token, newConfig); return new Response(JSON.stringify({ success, message: success ? KAVQsGdvm('6YSv57y85L675ayo5omE5YuR') : KAVQsGdvm('6YSv57y85L675ayo5aWl6LWr') }), { status: success ? Math.floor(200.5) : (550 - 50), headers: { KAVQsGdvm('IT0IBDEgAVo3GyID'): KAVQsGdvm('AyIWHD0tFAMKDTxJGichGw==') } }); default: return new Response(JSON.stringify({ error: KAVQsGdvm('LzcSGDsqVRkMFnIHHDghAhIH') }), { status: (810 / 2), headers: { KAVQsGdvm('IT0IBDEgAVo3GyID'): KAVQsGdvm('AyIWHD0tFAMKDTxJGichGw==') } });} } async function handleConfigsAPI(request, env) { if (request.method !== KAVQsGdvm('JRcy')) { return new Response(JSON.stringify({ error: KAVQsGdvm('LzcSGDsqVRkMFnIHHDghAhIH') }), { status: (455 - 50), headers: { KAVQsGdvm('IT0IBDEgAVo3GyID'): KAVQsGdvm('AyIWHD0tFAMKDTxJGichGw==') } });} const configs = await getAllConfigs(env); return new Response(JSON.stringify(configs), { headers: { KAVQsGdvm('IT0IBDEgAVo3GyID'): KAVQsGdvm('AyIWHD0tFAMKDTxJGichGw==') } });} async function handleTestAPI(request, env) { const url = new URL(request.url); const testType = url.searchParams.get(KAVQsGdvm('FisWFQ==')); const target = url.searchParams.get(KAVQsGdvm('FjMUFzE6')); switch (testType) { case KAVQsGdvm('DD0CFQ=='): return await testNodeConnectivity(target); case KAVQsGdvm('EiAJCC0='): return await testProxyIP(target); default: return new Response(JSON.stringify({ success: true, message: KAVQsGdvm('IwIv5p295Yu15qyt5bmN6L6n6KCv'), timestamp: new Date().toISOString(), version: KAVQsGdvm('U3xWXmQ=') }), { headers: { KAVQsGdvm('IT0IBDEgAVo3GyID'): KAVQsGdvm('AyIWHD0tFAMKDTxJGichGw==') } });} } async function testNodeConnectivity(nodeData) { try { if (!nodeData) { return new Response(JSON.stringify({ success: false, message: KAVQsGdvm('572Y5bGD6Iuk54OJ5pSk5oyg') }), { status: Math.floor(400.5), headers: { KAVQsGdvm('IT0IBDEgAVo3GyID'): KAVQsGdvm('AyIWHD0tFAMKDTxJGichGw==') } });} const node = JSON.parse(decodeURIComponent(nodeData)); const testUrl = `http: const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), (5050 - 50)); try { const response = await fetch(testUrl, { method: KAVQsGdvm('KhcnNA=='), signal: controller.signal }); clearTimeout(timeoutId); return new Response(JSON.stringify({ success: true, message: KAVQsGdvm('6Iug54Or6L645o+V5rSf6K6b5oml5Yuo'), latency: Date.now() - startTime, status: response.status }), { headers: { KAVQsGdvm('IT0IBDEgAVo3GyID'): KAVQsGdvm('AyIWHD0tFAMKDTxJGichGw==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: KAVQsGdvm('6Iug54Or6L645o+V5aWl6LWr'), error: fetchError.message }), { headers: { KAVQsGdvm('IT0IBDEgAVo3GyID'): KAVQsGdvm('AyIWHD0tFAMKDTxJGichGw==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: KAVQsGdvm('6Iug54Or5rSt6K6l5aWl6LWr'), error: error.message }), { status: Math.floor(500.5), headers: { KAVQsGdvm('IT0IBDEgAVo3GyID'): KAVQsGdvm('AyIWHD0tFAMKDTxJGichGw==') } });} } async function testProxyIP(proxyIP) { try { if (!proxyIP) { return new Response(JSON.stringify({ success: false, message: KAVQsGdvm('572Y5bGD5LqF55G2HR4=') }), { status: (450 - 50), headers: { KAVQsGdvm('IT0IBDEgAVo3GyID'): KAVQsGdvm('AyIWHD0tFAMKDTxJGichGw==') } });} const startTime = Date.now(); const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), (5100 - 100)); try { const testUrl = `http: const response = await fetch(testUrl, { method: KAVQsGdvm('KhcnNA=='), signal: controller.signal }); clearTimeout(timeoutId); const latency = Date.now() - startTime; return new Response(JSON.stringify({ success: true, message: KAVQsGdvm('5LqB55GULyDmtJ/orpvmiaXli6g='), latency: latency, ip: proxyIP }), { headers: { KAVQsGdvm('IT0IBDEgAVo3GyID'): KAVQsGdvm('AyIWHD0tFAMKDTxJGichGw==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: KAVQsGdvm('5LqB55GULyDovormj6vlpYTotZI='), error: fetchError.message, ip: proxyIP }), { headers: { KAVQsGdvm('IT0IBDEgAVo3GyID'): KAVQsGdvm('AyIWHD0tFAMKDTxJGichGw==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: KAVQsGdvm('5LqB55GULyDmtJ/orpvlpYTotZI='), error: error.message }), { status: (1000 / 2), headers: { KAVQsGdvm('IT0IBDEgAVo3GyID'): KAVQsGdvm('AyIWHD0tFAMKDTxJGichGw==') } });} }