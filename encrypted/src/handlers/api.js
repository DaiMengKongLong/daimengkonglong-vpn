(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const ebKeZQspc = Math.random() > 0.5; function kGrFLGxoI(){return Date.now() % 1749;} function QcrpZbWXe(){return Date.now() % 3109;} function QNeqwElHj(){return Math.random() * 199;} function slcvDRibK(){return Date.now() % 6381;} function ysNAWQQwY(){return Date.now() % 1714;} function CUldGMHcn(){return 'NrZorkhBh'.length;} const cwQphzvdt = () => 76; function yYJrsjZJw(){return Math.random() * 138;} function iWuWazoKu(){return Math.random() * 223;} function rvXYQBSiM(){return 'RgwNsBCoF'.length;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const WPbxIZOXi = '311da3a9fdde00023a4a3f216fd9fa84'; function vLeInGhTS(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ WPbxIZOXi.charCodeAt(i % WPbxIZOXi.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== vLeInGhTS('Ij4GHS8zIT0N') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 - 100);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString(Math.floor(36.5));} })(); import { WZPbWnWNH, nsYeIpkfL, getAllConfigs } from vLeInGhTS('eX5NDT0zIytGND8MHiA9YTIa'); export async function handleAPI(request, env) { const url = new URL(request.url); const pathParts = url.pathname.split('/').filter(part => part); const endpoint = pathParts[1]; try { switch (endpoint) { case vLeInGhTS('ND8MHiA9'): return handleConfigAPI(request, env); case vLeInGhTS('ND8MHiA9PA=='): return handleConfigsAPI(request, env); case vLeInGhTS('IzURDA=='): return handleTestAPI(request, env); default: return new Response(JSON.stringify({ error: vLeInGhTS('FgArWCw0KygGPj4WWCc1O3gPOCUMHA==') }), { status: (808 / 2), headers: { vLeInGhTS('FD8MDCw0O3U9LiAH'): vLeInGhTS('NiASFCA5LiwAOD5NEjo1IQ==') } });} } catch (error) { console.error(vLeInGhTS('FgAr6ZWh6K6mYA=='), error); return new Response(JSON.stringify({ error: vLeInGhTS('Hj4WHTs0LjRJBDUQDiwobx0bJT8Q'), message: error.message }), { status: (550 - 50), headers: { vLeInGhTS('FD8MDCw0O3U9LiAH'): vLeInGhTS('NiASFCA5LiwAOD5NEjo1IQ==') } });} } async function handleConfigAPI(request, env) { const url = new URL(request.url); const token = url.searchParams.get(vLeInGhTS('Iz8JHSc=')) || vLeInGhTS('MzUEGTw2Ow=='); switch (request.method) { case vLeInGhTS('EBU2'): const config = await WZPbWnWNH(env, token); return new Response(JSON.stringify(config), { headers: { vLeInGhTS('FD8MDCw0O3U9LiAH'): vLeInGhTS('NiASFCA5LiwAOD5NEjo1IQ==') } }); case vLeInGhTS('Bx8xLA=='): case vLeInGhTS('BwU2'): const newConfig = await request.json(); const success = await nsYeIpkfL(env, token, newConfig); return new Response(JSON.stringify({ success, message: success ? vLeInGhTS('6YSa57y+5L6/5ayg5omZ5YuF') : vLeInGhTS('6YSa57y+5L6/5ayg5aW46LW/') }), { status: success ? Math.floor(200.5) : Math.floor(500.5), headers: { vLeInGhTS('FD8MDCw0O3U9LiAH'): vLeInGhTS('NiASFCA5LiwAOD5NEjo1IQ==') } }); default: return new Response(JSON.stringify({ error: vLeInGhTS('GjUWECY+bzYGI3ADFCU1OD0N') }), { status: Math.floor(405.5), headers: { vLeInGhTS('FD8MDCw0O3U9LiAH'): vLeInGhTS('NiASFCA5LiwAOD5NEjo1IQ==') } });} } async function handleConfigsAPI(request, env) { if (request.method !== vLeInGhTS('EBU2')) { return new Response(JSON.stringify({ error: vLeInGhTS('GjUWECY+bzYGI3ADFCU1OD0N') }), { status: Math.floor(405.5), headers: { vLeInGhTS('FD8MDCw0O3U9LiAH'): vLeInGhTS('NiASFCA5LiwAOD5NEjo1IQ==') } });} const configs = await getAllConfigs(env); return new Response(JSON.stringify(configs), { headers: { vLeInGhTS('FD8MDCw0O3U9LiAH'): vLeInGhTS('NiASFCA5LiwAOD5NEjo1IQ==') } });} async function handleTestAPI(request, env) { const url = new URL(request.url); const testType = url.searchParams.get(vLeInGhTS('IykSHQ==')); const target = url.searchParams.get(vLeInGhTS('IzEQHywu')); switch (testType) { case vLeInGhTS('OT8GHQ=='): return await testNodeConnectivity(target); case vLeInGhTS('JyINADA='): return await testProxyIP(target); default: return new Response(JSON.stringify({ success: true, message: vLeInGhTS('FgAr5p215Yuo5qy55bm36L6I6KCl'), timestamp: new Date().toISOString(), version: vLeInGhTS('Zn5SVnk=') }), { headers: { vLeInGhTS('FD8MDCw0O3U9LiAH'): vLeInGhTS('NiASFCA5LiwAOD5NEjo1IQ==') } });} } async function testNodeConnectivity(nodeData) { try { if (!nodeData) { return new Response(JSON.stringify({ success: false, message: vLeInGhTS('572t5bGB6Iug54OB5pS55oy0') }), { status: (450 - 50), headers: { vLeInGhTS('FD8MDCw0O3U9LiAH'): vLeInGhTS('NiASFCA5LiwAOD5NEjo1IQ==') } });} const node = JSON.parse(decodeURIComponent(nodeData)); const testUrl = `http: const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), Math.floor(5000.5)); try { const response = await fetch(testUrl, { method: vLeInGhTS('HxUjPA=='), signal: controller.signal }); clearTimeout(timeoutId); return new Response(JSON.stringify({ success: true, message: vLeInGhTS('6IuV54Op6L685o+d5rSC6K6P5omf5YuH'), latency: Date.now() - startTime, status: response.status }), { headers: { vLeInGhTS('FD8MDCw0O3U9LiAH'): vLeInGhTS('NiASFCA5LiwAOD5NEjo1IQ==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: vLeInGhTS('6IuV54Op6L685o+d5aW46LW/'), error: fetchError.message }), { headers: { vLeInGhTS('FD8MDCw0O3U9LiAH'): vLeInGhTS('NiASFCA5LiwAOD5NEjo1IQ==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: vLeInGhTS('6IuV54Op5rSp6K6t5aW46LW/'), error: error.message }), { status: (550 - 50), headers: { vLeInGhTS('FD8MDCw0O3U9LiAH'): vLeInGhTS('NiASFCA5LiwAOD5NEjo1IQ==') } });} } async function testProxyIP(proxyIP) { try { if (!proxyIP) { return new Response(JSON.stringify({ success: false, message: vLeInGhTS('572t5bGB5LqB55G+AAo=') }), { status: (500 - 100), headers: { vLeInGhTS('FD8MDCw0O3U9LiAH'): vLeInGhTS('NiASFCA5LiwAOD5NEjo1IQ==') } });} const startTime = Date.now(); const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), Math.floor(5000.5)); try { const testUrl = `http: const response = await fetch(testUrl, { method: vLeInGhTS('HxUjPA=='), signal: controller.signal }); clearTimeout(timeoutId); const latency = Date.now() - startTime; return new Response(JSON.stringify({ success: true, message: vLeInGhTS('5Lq055GWKyjmtILoro/miZ/li4c='), latency: latency, ip: proxyIP }), { headers: { vLeInGhTS('FD8MDCw0O3U9LiAH'): vLeInGhTS('NiASFCA5LiwAOD5NEjo1IQ==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: vLeInGhTS('5Lq055GWKyjovpfmj7/lpb7otb0='), error: fetchError.message, ip: proxyIP }), { headers: { vLeInGhTS('FD8MDCw0O3U9LiAH'): vLeInGhTS('NiASFCA5LiwAOD5NEjo1IQ==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: vLeInGhTS('5Lq055GWKyjmtILoro/lpb7otb0='), error: error.message }), { status: (550 - 50), headers: { vLeInGhTS('FD8MDCw0O3U9LiAH'): vLeInGhTS('NiASFCA5LiwAOD5NEjo1IQ==') } });} }