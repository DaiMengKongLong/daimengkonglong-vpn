(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const NnWGgtNaK = Math.random() > 0.5; const wkcIqlmwn = () => 69; const cCPddcGDO = () => 7; function VPzeQVfSi(){return Date.now() % 7529;} const bjPhmvyWp = function(){return btoa('BrJBvJznn');}; function KmAMZXdIc(){return Date.now() % 5105;} function wVsDuEVux(){return Math.random() * 161;} function hsftvCNuy(){return 'gOrndSwmo'.length;} function KZQDUlobP(){return Date.now() % 6136;} const OVPbrlBNx = () => 48; const nOxjMRkKu = () => 9; const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const jejpUphio = '3e17928177501039a9e45f3eecab4e22'; function rlLNfzMbN(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ jejpUphio.charCodeAt(i % jejpUphio.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== rlLNfzMbN('HwsOFTMZBgwL') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (150 - 50);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((136 - 100));} })(); import { fXCawkdOb, uWVTHvMdY, getAllConfigs } from rlLNfzMbN('REtFBSEZBBpACQoEFjwXRgMc'); export async function handleAPI(request, env) { const url = new URL(request.url); const pathParts = url.pathname.split('/').filter(part => part); const endpoint = pathParts[1]; try { switch (endpoint) { case rlLNfzMbN('CQoEFjwX'): return handleConfigAPI(request, env); case rlLNfzMbN('CQoEFjwXGw=='): return handleConfigsAPI(request, env); case rlLNfzMbN('HgAZBA=='): return handleTestAPI(request, env); default: return new Response(JSON.stringify({ error: rlLNfzMbN('KzUjUDAeDBkAAwseUDsfHEkJBRAEFA==') }), { status: (454 - 50), headers: { rlLNfzMbN('KQoEBDAeHEQ7ExUP'): rlLNfzMbN('CxUaHDwTCR0GBQtFGiYfBg==') } });} } catch (error) { console.error(rlLNfzMbN('KzUj6ZWp6K66Sg=='), error); return new Response(JSON.stringify({ error: rlLNfzMbN('IwseFSceCQVPOQAYBjACSCwdGAoY'), message: error.message }), { status: (600 - 100), headers: { rlLNfzMbN('KQoEBDAeHEQ7ExUP'): rlLNfzMbN('CxUaHDwTCR0GBQtFGiYfBg==') } });} } async function handleConfigAPI(request, env) { const url = new URL(request.url); const token = url.searchParams.get(rlLNfzMbN('HgoBFTs=')) || rlLNfzMbN('DgAMESAcHA=='); switch (request.method) { case rlLNfzMbN('LSA+'): const config = await fXCawkdOb(env, token); return new Response(JSON.stringify(config), { headers: { rlLNfzMbN('KQoEBDAeHEQ7ExUP'): rlLNfzMbN('CxUaHDwTCR0GBQtFGiYfBg==') } }); case rlLNfzMbN('Oio5JA=='): case rlLNfzMbN('OjA+'): const newConfig = await request.json(); const success = await uWVTHvMdY(env, token, newConfig); return new Response(JSON.stringify({ success, message: success ? rlLNfzMbN('6YSn57yL5L635ayo5omF5Yuv') : rlLNfzMbN('6YSn57yL5L635ayo5aWk6LWV') }), { status: success ? (250 - 50) : (550 - 50), headers: { rlLNfzMbN('KQoEBDAeHEQ7ExUP'): rlLNfzMbN('CxUaHDwTCR0GBQtFGiYfBg==') } }); default: return new Response(JSON.stringify({ error: rlLNfzMbN('JwAeGDoUSAcAHkULHDkfHwwL') }), { status: (810 / 2), headers: { rlLNfzMbN('KQoEBDAeHEQ7ExUP'): rlLNfzMbN('CxUaHDwTCR0GBQtFGiYfBg==') } });} } async function handleConfigsAPI(request, env) { if (request.method !== rlLNfzMbN('LSA+')) { return new Response(JSON.stringify({ error: rlLNfzMbN('JwAeGDoUSAcAHkULHDkfHwwL') }), { status: (810 / 2), headers: { rlLNfzMbN('KQoEBDAeHEQ7ExUP'): rlLNfzMbN('CxUaHDwTCR0GBQtFGiYfBg==') } });} const configs = await getAllConfigs(env); return new Response(JSON.stringify(configs), { headers: { rlLNfzMbN('KQoEBDAeHEQ7ExUP'): rlLNfzMbN('CxUaHDwTCR0GBQtFGiYfBg==') } });} async function handleTestAPI(request, env) { const url = new URL(request.url); const testType = url.searchParams.get(rlLNfzMbN('HhwaFQ==')); const target = url.searchParams.get(rlLNfzMbN('HgQYFzAE')); switch (testType) { case rlLNfzMbN('BAoOFQ=='): return await testNodeConnectivity(target); case rlLNfzMbN('GhcFCCw='): return await testProxyIP(target); default: return new Response(JSON.stringify({ success: true, message: rlLNfzMbN('KzUj5p295Yu05qyT5bmQ6L656KCj'), timestamp: new Date().toISOString(), version: rlLNfzMbN('W0taXmU=') }), { headers: { rlLNfzMbN('KQoEBDAeHEQ7ExUP'): rlLNfzMbN('CxUaHDwTCR0GBQtFGiYfBg==') } });} } async function testNodeConnectivity(nodeData) { try { if (!nodeData) { return new Response(JSON.stringify({ success: false, message: rlLNfzMbN('572Q5bG06Iuo54OJ5pSl5oye') }), { status: (450 - 50), headers: { rlLNfzMbN('KQoEBDAeHEQ7ExUP'): rlLNfzMbN('CxUaHDwTCR0GBQtFGiYfBg==') } });} const node = JSON.parse(decodeURIComponent(nodeData)); const testUrl = `http: const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), (10000 / 2)); try { const response = await fetch(testUrl, { method: rlLNfzMbN('IiArNA=='), signal: controller.signal }); clearTimeout(timeoutId); return new Response(JSON.stringify({ success: true, message: rlLNfzMbN('6Iuo54Oc6L605o+V5rSe6K6l5om45Yu2'), latency: Date.now() - startTime, status: response.status }), { headers: { rlLNfzMbN('KQoEBDAeHEQ7ExUP'): rlLNfzMbN('CxUaHDwTCR0GBQtFGiYfBg==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: rlLNfzMbN('6Iuo54Oc6L605o+V5aWk6LWV'), error: fetchError.message }), { headers: { rlLNfzMbN('KQoEBDAeHEQ7ExUP'): rlLNfzMbN('CxUaHDwTCR0GBQtFGiYfBg==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: rlLNfzMbN('6Iuo54Oc5rSh6K6l5aWk6LWV'), error: error.message }), { status: Math.floor(500.5), headers: { rlLNfzMbN('KQoEBDAeHEQ7ExUP'): rlLNfzMbN('CxUaHDwTCR0GBQtFGiYfBg==') } });} } async function testProxyIP(proxyIP) { try { if (!proxyIP) { return new Response(JSON.stringify({ success: false, message: rlLNfzMbN('572Q5bG05LqJ55G2HCA=') }), { status: (450 - 50), headers: { rlLNfzMbN('KQoEBDAeHEQ7ExUP'): rlLNfzMbN('CxUaHDwTCR0GBQtFGiYfBg==') } });} const startTime = Date.now(); const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), (5100 - 100)); try { const testUrl = `http: const response = await fetch(testUrl, { method: rlLNfzMbN('IiArNA=='), signal: controller.signal }); clearTimeout(timeoutId); const latency = Date.now() - startTime; return new Response(JSON.stringify({ success: true, message: rlLNfzMbN('5LqJ55GjIyDmtJ7orqXmibjli7Y='), latency: latency, ip: proxyIP }), { headers: { rlLNfzMbN('KQoEBDAeHEQ7ExUP'): rlLNfzMbN('CxUaHDwTCR0GBQtFGiYfBg==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: rlLNfzMbN('5LqJ55GjIyDovovmj5XlpZnotYw='), error: fetchError.message, ip: proxyIP }), { headers: { rlLNfzMbN('KQoEBDAeHEQ7ExUP'): rlLNfzMbN('CxUaHDwTCR0GBQtFGiYfBg==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: rlLNfzMbN('5LqJ55GjIyDmtJ7orqXlpZnotYw='), error: error.message }), { status: Math.floor(500.5), headers: { rlLNfzMbN('KQoEBDAeHEQ7ExUP'): rlLNfzMbN('CxUaHDwTCR0GBQtFGiYfBg==') } });} }