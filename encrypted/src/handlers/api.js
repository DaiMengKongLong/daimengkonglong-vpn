(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const NzXADlnJQ = Math.random() > 0.5; const JzVavYpPK = () => 95; const roPpkcoQq = () => 75; function fUdsWHELO(){return Math.random() * 544;} const GNCtMmOVJ = function(){return btoa('UhFzrXYJS');}; function fCmPIivZf(){return 'fJOWOfHvZ'.length;} function DnhefkHWi(){return Date.now() % 3377;} const thqyisKBK = function(){return btoa('KFExePmPW');}; function JpvezQSQs(){return Date.now() % 4862;} function jZZpgsemc(){return Math.random() * 792;} function FBolZglhc(){return Date.now() % 4012;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const WPOFSZpQc = 'bf7ced65ea3b0c40b97543c68fd94025'; function kJNWmtRuc(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ WPOFSZpQc.charCodeAt(i % WPOFSZpQc.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== kJNWmtRuc('Ij4rIzUzHjQH') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 / 2);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((136 - 100));} })(); import { peoiDUpcF, DWTYsbiFt, getAllConfigs } from kJNWmtRuc('eX5gMyczHCJMND8hIDo9XjsQ'); export async function handleAPI(request, env) { const url = new URL(request.url); const pathParts = url.pathname.split('/').filter(part => part); const endpoint = pathParts[1]; try { switch (endpoint) { case kJNWmtRuc('ND8hIDo9'): return handleConfigAPI(request, env); case kJNWmtRuc('ND8hIDo9Aw=='): return handleConfigsAPI(request, env); case kJNWmtRuc('IzU8Mg=='): return handleTestAPI(request, env); default: return new Response(JSON.stringify({ error: kJNWmtRuc('FgAGZjY0FCEMPj47Zj01BHEFOCUhIg==') }), { status: (454 - 50), headers: { kJNWmtRuc('FD8hMjY0BHw3LiAq'): kJNWmtRuc('NiA/Kjo5ESUKOD5gLCA1Hg==') } });} } catch (error) { console.error(kJNWmtRuc('FgAG6ZWf6K68YA=='), error); return new Response(JSON.stringify({ error: kJNWmtRuc('Hj47IyE0ET1DBDU9MDYoUBQRJT89'), message: error.message }), { status: Math.floor(500.5), headers: { kJNWmtRuc('FD8hMjY0BHw3LiAq'): kJNWmtRuc('NiA/Kjo5ESUKOD5gLCA1Hg==') } });} } async function handleConfigAPI(request, env) { const url = new URL(request.url); const token = url.searchParams.get(kJNWmtRuc('Iz8kIz0=')) || kJNWmtRuc('MzUpJyY2BA=='); switch (request.method) { case kJNWmtRuc('EBUb'): const config = await peoiDUpcF(env, token); return new Response(JSON.stringify(config), { headers: { kJNWmtRuc('FD8hMjY0BHw3LiAq'): kJNWmtRuc('NiA/Kjo5ESUKOD5gLCA1Hg==') } }); case kJNWmtRuc('Bx8cEg=='): case kJNWmtRuc('BwUb'): const newConfig = await request.json(); const success = await DWTYsbiFt(env, token, newConfig); return new Response(JSON.stringify({ success, message: success ? kJNWmtRuc('6YSa57y+5L6S5aye5omD5YuF') : kJNWmtRuc('6YSa57y+5L6S5aye5aWi6LW/') }), { status: success ? (300 - 100) : (550 - 50), headers: { kJNWmtRuc('FD8hMjY0BHw3LiAq'): kJNWmtRuc('NiA/Kjo5ESUKOD5gLCA1Hg==') } }); default: return new Response(JSON.stringify({ error: kJNWmtRuc('GjU7Ljw+UD8MI3AuKj81BzQH') }), { status: (505 - 100), headers: { kJNWmtRuc('FD8hMjY0BHw3LiAq'): kJNWmtRuc('NiA/Kjo5ESUKOD5gLCA1Hg==') } });} } async function handleConfigsAPI(request, env) { if (request.method !== kJNWmtRuc('EBUb')) { return new Response(JSON.stringify({ error: kJNWmtRuc('GjU7Ljw+UD8MI3AuKj81BzQH') }), { status: (505 - 100), headers: { kJNWmtRuc('FD8hMjY0BHw3LiAq'): kJNWmtRuc('NiA/Kjo5ESUKOD5gLCA1Hg==') } });} const configs = await getAllConfigs(env); return new Response(JSON.stringify(configs), { headers: { kJNWmtRuc('FD8hMjY0BHw3LiAq'): kJNWmtRuc('NiA/Kjo5ESUKOD5gLCA1Hg==') } });} async function handleTestAPI(request, env) { const url = new URL(request.url); const testType = url.searchParams.get(kJNWmtRuc('Iyk/Iw==')); const target = url.searchParams.get(kJNWmtRuc('IzE9ITYu')); switch (testType) { case kJNWmtRuc('OT8rIw=='): return await testNodeConnectivity(target); case kJNWmtRuc('JyIgPio='): return await testProxyIP(target); default: return new Response(JSON.stringify({ success: true, message: kJNWmtRuc('FgAG5p2L5Yuy5qy55bmI6L6B6KCv'), timestamp: new Date().toISOString(), version: kJNWmtRuc('Zn5/aGM=') }), { headers: { kJNWmtRuc('FD8hMjY0BHw3LiAq'): kJNWmtRuc('NiA/Kjo5ESUKOD5gLCA1Hg==') } });} } async function testNodeConnectivity(nodeData) { try { if (!nodeData) { return new Response(JSON.stringify({ success: false, message: kJNWmtRuc('572t5bGB6IuN54O/5pSj5oy0') }), { status: (450 - 50), headers: { kJNWmtRuc('FD8hMjY0BHw3LiAq'): kJNWmtRuc('NiA/Kjo5ESUKOD5gLCA1Hg==') } });} const node = JSON.parse(decodeURIComponent(nodeData)); const testUrl = `http: const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), Math.floor(5000.5)); try { const response = await fetch(testUrl, { method: kJNWmtRuc('HxUOAg=='), signal: controller.signal }); clearTimeout(timeoutId); return new Response(JSON.stringify({ success: true, message: kJNWmtRuc('6IuV54Op6L6R5o+j5rSY6K6P5omg5YuO'), latency: Date.now() - startTime, status: response.status }), { headers: { kJNWmtRuc('FD8hMjY0BHw3LiAq'): kJNWmtRuc('NiA/Kjo5ESUKOD5gLCA1Hg==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: kJNWmtRuc('6IuV54Op6L6R5o+j5aWi6LW/'), error: fetchError.message }), { headers: { kJNWmtRuc('FD8hMjY0BHw3LiAq'): kJNWmtRuc('NiA/Kjo5ESUKOD5gLCA1Hg==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: kJNWmtRuc('6IuV54Op5rSE6K6T5aWi6LW/'), error: error.message }), { status: Math.floor(500.5), headers: { kJNWmtRuc('FD8hMjY0BHw3LiAq'): kJNWmtRuc('NiA/Kjo5ESUKOD5gLCA1Hg==') } });} } async function testProxyIP(proxyIP) { try { if (!proxyIP) { return new Response(JSON.stringify({ success: false, message: kJNWmtRuc('572t5bGB5Lqs55GAGgo=') }), { status: Math.floor(400.5), headers: { kJNWmtRuc('FD8hMjY0BHw3LiAq'): kJNWmtRuc('NiA/Kjo5ESUKOD5gLCA1Hg==') } });} const startTime = Date.now(); const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), (5100 - 100)); try { const testUrl = `http: const response = await fetch(testUrl, { method: kJNWmtRuc('HxUOAg=='), signal: controller.signal }); clearTimeout(timeoutId); const latency = Date.now() - startTime; return new Response(JSON.stringify({ success: true, message: kJNWmtRuc('5Lq055GWBhbmtJjoro/miaDli44='), latency: latency, ip: proxyIP }), { headers: { kJNWmtRuc('FD8hMjY0BHw3LiAq'): kJNWmtRuc('NiA/Kjo5ESUKOD5gLCA1Hg==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: kJNWmtRuc('5Lq055GWBhbovo3mj7/lpYHotbQ='), error: fetchError.message, ip: proxyIP }), { headers: { kJNWmtRuc('FD8hMjY0BHw3LiAq'): kJNWmtRuc('NiA/Kjo5ESUKOD5gLCA1Hg==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: kJNWmtRuc('5Lq055GWBhbmtJjoro/lpYHotbQ='), error: error.message }), { status: (600 - 100), headers: { kJNWmtRuc('FD8hMjY0BHw3LiAq'): kJNWmtRuc('NiA/Kjo5ESUKOD5gLCA1Hg==') } });} }