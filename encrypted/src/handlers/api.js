(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const dBleRAGTO = Math.random() > 0.5; function MVBWqbCbo(){return Math.random() * 15;} function JdvGAFeOn(){return 'BSOPoyWCi'.length;} function APPKhLmSM(){return 'XrjXZprlk'.length;} function uVcdQzgkl(){return Date.now() % 7800;} function HwOkICrje(){return Math.random() * 895;} function bBONYIDdT(){return 'wqQFOCoYL'.length;} function xBWZVOEWx(){return 'QEQGbmEiI'.length;} function GyCRxHvvL(){return Date.now() % 9550;} const VsjCAXNJq = function(){return btoa('BXvNdMwuE');}; const TrKYjqADH = function(){return btoa('DnsBTyALO');}; const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const wTzLWGohT = 'cc7c84a13c9cecf6a3546cc21a9310d4'; function EvvGGayjd(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ wTzLWGohT.charCodeAt(i % wTzLWGohT.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== EvvGGayjd('AjoeKTEuAQ0w') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (200 / 2);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString(Math.floor(36.5));} })(); import { PfQiWoUjH, PdXxayYHf, getAllConfigs } from EvvGGayjd('WXpVOSMuAxt7FDsUKj4gQQIn'); export async function handleAPI(request, env) { const url = new URL(request.url); const pathParts = url.pathname.split('/').filter(part => part); const endpoint = pathParts[1]; try { switch (endpoint) { case EvvGGayjd('FDsUKj4g'): return handleConfigAPI(request, env); case EvvGGayjd('FDsUKj4gHA=='): return handleConfigsAPI(request, env); case EvvGGayjd('AzEJOA=='): return handleTestAPI(request, env); default: return new Response(JSON.stringify({ error: EvvGGayjd('NgQzbDIpCxg7HjoObDkoG0gyGCEUKA==') }), { status: Math.floor(404.5), headers: { EvvGGayjd('NDsUODIpG0UADiQf'): EvvGGayjd('FiQKID4kDhw9GDpVJiQoAQ==') } });} } catch (error) { console.error(EvvGGayjd('NgQz6ZWV6K64fQ=='), error); return new Response(JSON.stringify({ error: EvvGGayjd('PjoOKSUpDgR0JDEIOjI1Ty0mBTsI'), message: error.message }), { status: Math.floor(500.5), headers: { EvvGGayjd('NDsUODIpG0UADiQf'): EvvGGayjd('FiQKID4kDhw9GDpVJiQoAQ==') } });} } async function handleConfigAPI(request, env) { const url = new URL(request.url); const token = url.searchParams.get(EvvGGayjd('AzsRKTk=')) || EvvGGayjd('EzEcLSIrGw=='); switch (request.method) { case EvvGGayjd('MBEu'): const config = await PfQiWoUjH(env, token); return new Response(JSON.stringify(config), { headers: { EvvGGayjd('NDsUODIpG0UADiQf'): EvvGGayjd('FiQKID4kDhw9GDpVJiQoAQ==') } }); case EvvGGayjd('JxspGA=='): case EvvGGayjd('JwEu'): const newConfig = await request.json(); const success = await PdXxayYHf(env, token, newConfig); return new Response(JSON.stringify({ success, message: success ? EvvGGayjd('6YS657y65L6n5ayU5omH5YuY') : EvvGGayjd('6YS657y65L6n5ayU5aWm6LWi') }), { status: success ? Math.floor(200.5) : (1000 / 2), headers: { EvvGGayjd('NDsUODIpG0UADiQf'): EvvGGayjd('FiQKID4kDhw9GDpVJiQoAQ==') } }); default: return new Response(JSON.stringify({ error: EvvGGayjd('OjEOJDgjTwY7A3QbIDsoGA0w') }), { status: (505 - 100), headers: { EvvGGayjd('NDsUODIpG0UADiQf'): EvvGGayjd('FiQKID4kDhw9GDpVJiQoAQ==') } });} } async function handleConfigsAPI(request, env) { if (request.method !== EvvGGayjd('MBEu')) { return new Response(JSON.stringify({ error: EvvGGayjd('OjEOJDgjTwY7A3QbIDsoGA0w') }), { status: (505 - 100), headers: { EvvGGayjd('NDsUODIpG0UADiQf'): EvvGGayjd('FiQKID4kDhw9GDpVJiQoAQ==') } });} const configs = await getAllConfigs(env); return new Response(JSON.stringify(configs), { headers: { EvvGGayjd('NDsUODIpG0UADiQf'): EvvGGayjd('FiQKID4kDhw9GDpVJiQoAQ==') } });} async function handleTestAPI(request, env) { const url = new URL(request.url); const testType = url.searchParams.get(EvvGGayjd('Ay0KKQ==')); const target = url.searchParams.get(EvvGGayjd('AzUIKzIz')); switch (testType) { case EvvGGayjd('GTseKQ=='): return await testNodeConnectivity(target); case EvvGGayjd('ByYVNC4='): return await testProxyIP(target); default: return new Response(JSON.stringify({ success: true, message: EvvGGayjd('NgQz5p2B5Yu25qyk5bmX6L646KCY'), timestamp: new Date().toISOString(), version: EvvGGayjd('RnpKYmc=') }), { headers: { EvvGGayjd('NDsUODIpG0UADiQf'): EvvGGayjd('FiQKID4kDhw9GDpVJiQoAQ==') } });} } async function testNodeConnectivity(nodeData) { try { if (!nodeData) { return new Response(JSON.stringify({ success: false, message: EvvGGayjd('572N5bGF6Iu454O15pSn5oyp') }), { status: (800 / 2), headers: { EvvGGayjd('NDsUODIpG0UADiQf'): EvvGGayjd('FiQKID4kDhw9GDpVJiQoAQ==') } });} const node = JSON.parse(decodeURIComponent(nodeData)); const testUrl = `http: const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), (5100 - 100)); try { const response = await fetch(testUrl, { method: EvvGGayjd('PxE7CA=='), signal: controller.signal }); clearTimeout(timeoutId); return new Response(JSON.stringify({ success: true, message: EvvGGayjd('6Iu154Ot6L6k5o+p5rSc6K6S5om/5Yu3'), latency: Date.now() - startTime, status: response.status }), { headers: { EvvGGayjd('NDsUODIpG0UADiQf'): EvvGGayjd('FiQKID4kDhw9GDpVJiQoAQ==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: EvvGGayjd('6Iu154Ot6L6k5o+p5aWm6LWi'), error: fetchError.message }), { headers: { EvvGGayjd('NDsUODIpG0UADiQf'): EvvGGayjd('FiQKID4kDhw9GDpVJiQoAQ==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: EvvGGayjd('6Iu154Ot5rSx6K6Z5aWm6LWi'), error: error.message }), { status: (600 - 100), headers: { EvvGGayjd('NDsUODIpG0UADiQf'): EvvGGayjd('FiQKID4kDhw9GDpVJiQoAQ==') } });} } async function testProxyIP(proxyIP) { try { if (!proxyIP) { return new Response(JSON.stringify({ success: false, message: EvvGGayjd('572N5bGF5LqZ55GKHhc=') }), { status: (800 / 2), headers: { EvvGGayjd('NDsUODIpG0UADiQf'): EvvGGayjd('FiQKID4kDhw9GDpVJiQoAQ==') } });} const startTime = Date.now(); const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), (5100 - 100)); try { const testUrl = `http: const response = await fetch(testUrl, { method: EvvGGayjd('PxE7CA=='), signal: controller.signal }); clearTimeout(timeoutId); const latency = Date.now() - startTime; return new Response(JSON.stringify({ success: true, message: EvvGGayjd('5LqU55GSMxzmtJzorpLmib/li7c='), latency: latency, ip: proxyIP }), { headers: { EvvGGayjd('NDsUODIpG0UADiQf'): EvvGGayjd('FiQKID4kDhw9GDpVJiQoAQ==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: EvvGGayjd('5LqU55GSMxzovonmj6LlpZ7otY0='), error: fetchError.message, ip: proxyIP }), { headers: { EvvGGayjd('NDsUODIpG0UADiQf'): EvvGGayjd('FiQKID4kDhw9GDpVJiQoAQ==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: EvvGGayjd('5LqU55GSMxzmtJzorpLlpZ7otY0='), error: error.message }), { status: (1000 / 2), headers: { EvvGGayjd('NDsUODIpG0UADiQf'): EvvGGayjd('FiQKID4kDhw9GDpVJiQoAQ==') } });} }