(function() { const checks = [ () => typeof window !== 'undefined', () => typeof document !== 'undefined', () => typeof navigator !== 'undefined', () => !window.phantom, () => !window.callPhantom, () => !window._phantom, () => !window.Buffer, () => typeof window.webdriver === 'undefined' ]; const passed = checks.filter(check => { try { return check();} catch(e) { return false;} }).length; if (passed < checks.length * 0.7) { const dummy = Math.random().toString(36);} })(); const YdyOifnFp = Math.random() > 0.5; const dHSrmnTsr = () => 20; function mvZVlwLsO(){return 'xOmYotevJ'.length;} function PQzMccvtJ(){return Math.random() * 754;} function VrBGpizWQ(){return Date.now() % 5541;} function bfbTFKqwz(){return Date.now() % 9454;} const rzbsMWsyk = function(){return btoa('PnoKZSuet');}; const qbeWXQEet = function(){return btoa('vEecCcXOV');}; const YMmYKbbeO = () => 29; const cfUndHUJV = () => 42; function XAthsJSvj(){return Math.random() * 399;} const _fakeAPI1 = () => fetch("/fake-endpoint").catch(() => {}); const _fakeAPI2 = () => localStorage.getItem("fake-key"); const _fakeAPI3 = () => document.createElement("div"); const dKsLicJPS = 'b9ae5fed7955fba1291e0c4227fde4ff'; function OqjstYRJR(str) { try { return atob(str).split('').map((c, i) => String.fromCharCode(c.charCodeAt(0) ^ dKsLicJPS.charCodeAt(i % dKsLicJPS.length)) ).join('');} catch(e) { return atob(str);} } (function() { const _0x1a2b = function() { return !!(typeof window !== OqjstYRJR('ESUXKQ8KJDU3') && window.console && window.console.log);}; const _0x2c3d = function() { return Date.now() - performance.now() > (150 - 50);}; if (_0x1a2b() || _0x2c3d()) { const _0x3e4f = Math.random().toString((136 - 100));} })(); import { crQQikaSO, SALRIDrCT, getAllConfigs } from OqjstYRJR('SmVcOR0KJiN8ByQdKgAEZDog'); export async function handleAPI(request, env) { const url = new URL(request.url); const pathParts = url.pathname.split('/').filter(part => part); const endpoint = pathParts[1]; try { switch (endpoint) { case OqjstYRJR('ByQdKgAE'): return handleConfigAPI(request, env); case OqjstYRJR('ByQdKgAEOQ=='): return handleConfigsAPI(request, env); case OqjstYRJR('EC4AOA=='): return handleTestAPI(request, env); default: return new Response(JSON.stringify({ error: OqjstYRJR('JRs6bAwNLiA8DSUHbAcMPnA1Cz4dKA==') }), { status: Math.floor(404.5), headers: { OqjstYRJR('JyQdOAwNPn0HHTsW'): OqjstYRJR('BTsDIAAAKyQ6CyVcJhoMJA==') } });} } catch (error) { console.error(OqjstYRJR('JRs66ZWV6K6GWQ=='), error); return new Response(JSON.stringify({ error: OqjstYRJR('LSUHKRsNKzxzNy4BOgwRahUhFiQB'), message: error.message }), { status: Math.floor(500.5), headers: { OqjstYRJR('JyQdOAwNPn0HHTsW'): OqjstYRJR('BTsDIAAAKyQ6CyVcJhoMJA==') } });} } async function handleConfigAPI(request, env) { const url = new URL(request.url); const token = url.searchParams.get(OqjstYRJR('ECQYKQc=')) || OqjstYRJR('AC4VLRwPPg=='); switch (request.method) { case OqjstYRJR('Iw4n'): const config = await crQQikaSO(env, token); return new Response(JSON.stringify(config), { headers: { OqjstYRJR('JyQdOAwNPn0HHTsW'): OqjstYRJR('BTsDIAAAKyQ6CyVcJhoMJA==') } }); case OqjstYRJR('NAQgGA=='): case OqjstYRJR('NB4n'): const newConfig = await request.json(); const success = await SALRIDrCT(env, token, newConfig); return new Response(JSON.stringify({ success, message: success ? OqjstYRJR('6YSp57yl5L6u5ayU5om55Yu8') : OqjstYRJR('6YSp57yl5L6u5ayU5aWY6LWG') }), { status: success ? (400 / 2) : Math.floor(500.5), headers: { OqjstYRJR('JyQdOAwNPn0HHTsW'): OqjstYRJR('BTsDIAAAKyQ6CyVcJhoMJA==') } }); default: return new Response(JSON.stringify({ error: OqjstYRJR('KS4HJAYHaj48EGsSIAUMPTU3') }), { status: (810 / 2), headers: { OqjstYRJR('JyQdOAwNPn0HHTsW'): OqjstYRJR('BTsDIAAAKyQ6CyVcJhoMJA==') } });} } async function handleConfigsAPI(request, env) { if (request.method !== OqjstYRJR('Iw4n')) { return new Response(JSON.stringify({ error: OqjstYRJR('KS4HJAYHaj48EGsSIAUMPTU3') }), { status: (505 - 100), headers: { OqjstYRJR('JyQdOAwNPn0HHTsW'): OqjstYRJR('BTsDIAAAKyQ6CyVcJhoMJA==') } });} const configs = await getAllConfigs(env); return new Response(JSON.stringify(configs), { headers: { OqjstYRJR('JyQdOAwNPn0HHTsW'): OqjstYRJR('BTsDIAAAKyQ6CyVcJhoMJA==') } });} async function handleTestAPI(request, env) { const url = new URL(request.url); const testType = url.searchParams.get(OqjstYRJR('EDIDKQ==')); const target = url.searchParams.get(OqjstYRJR('ECoBKwwX')); switch (testType) { case OqjstYRJR('CiQXKQ=='): return await testNodeConnectivity(target); case OqjstYRJR('FDkcNBA='): return await testProxyIP(target); default: return new Response(JSON.stringify({ success: true, message: OqjstYRJR('JRs65p2B5YuI5qyA5bmy6L6A6KCf'), timestamp: new Date().toISOString(), version: OqjstYRJR('VWVDYlk=') }), { headers: { OqjstYRJR('JyQdOAwNPn0HHTsW'): OqjstYRJR('BTsDIAAAKyQ6CyVcJhoMJA==') } });} } async function testNodeConnectivity(nodeData) { try { if (!nodeData) { return new Response(JSON.stringify({ success: false, message: OqjstYRJR('572e5bGa6Iux54O15pSZ5oyN') }), { status: (800 / 2), headers: { OqjstYRJR('JyQdOAwNPn0HHTsW'): OqjstYRJR('BTsDIAAAKyQ6CyVcJhoMJA==') } });} const node = JSON.parse(decodeURIComponent(nodeData)); const testUrl = `http: const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), (5050 - 50)); try { const response = await fetch(testUrl, { method: OqjstYRJR('LA4yCA=='), signal: controller.signal }); clearTimeout(timeoutId); return new Response(JSON.stringify({ success: true, message: OqjstYRJR('6Ium54Oy6L6t5o+p5rSi6K625oma5YuP'), latency: Date.now() - startTime, status: response.status }), { headers: { OqjstYRJR('JyQdOAwNPn0HHTsW'): OqjstYRJR('BTsDIAAAKyQ6CyVcJhoMJA==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: OqjstYRJR('6Ium54Oy6L6t5o+p5aWY6LWG'), error: fetchError.message }), { headers: { OqjstYRJR('JyQdOAwNPn0HHTsW'): OqjstYRJR('BTsDIAAAKyQ6CyVcJhoMJA==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: OqjstYRJR('6Ium54Oy5rS46K6Z5aWY6LWG'), error: error.message }), { status: (600 - 100), headers: { OqjstYRJR('JyQdOAwNPn0HHTsW'): OqjstYRJR('BTsDIAAAKyQ6CyVcJhoMJA==') } });} } async function testProxyIP(proxyIP) { try { if (!proxyIP) { return new Response(JSON.stringify({ success: false, message: OqjstYRJR('572e5bGa5LqQ55GKIDM=') }), { status: (800 / 2), headers: { OqjstYRJR('JyQdOAwNPn0HHTsW'): OqjstYRJR('BTsDIAAAKyQ6CyVcJhoMJA==') } });} const startTime = Date.now(); const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), Math.floor(5000.5)); try { const testUrl = `http: const response = await fetch(testUrl, { method: OqjstYRJR('LA4yCA=='), signal: controller.signal }); clearTimeout(timeoutId); const latency = Date.now() - startTime; return new Response(JSON.stringify({ success: true, message: OqjstYRJR('5LqH55GNOhzmtKLorrbmiZrli48='), latency: latency, ip: proxyIP }), { headers: { OqjstYRJR('JyQdOAwNPn0HHTsW'): OqjstYRJR('BTsDIAAAKyQ6CyVcJhoMJA==') } });} catch (fetchError) { clearTimeout(timeoutId); return new Response(JSON.stringify({ success: false, message: OqjstYRJR('5LqH55GNOhzovrfmj4blpbvotbU='), error: fetchError.message, ip: proxyIP }), { headers: { OqjstYRJR('JyQdOAwNPn0HHTsW'): OqjstYRJR('BTsDIAAAKyQ6CyVcJhoMJA==') } });} } catch (error) { return new Response(JSON.stringify({ success: false, message: OqjstYRJR('5LqH55GNOhzmtKLorrblpbvotbU='), error: error.message }), { status: (600 - 100), headers: { OqjstYRJR('JyQdOAwNPn0HHTsW'): OqjstYRJR('BTsDIAAAKyQ6CyVcJhoMJA==') } });} }